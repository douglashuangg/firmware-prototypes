
OFS_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe8  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080081dc  080081dc  000181dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008318  08008318  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008318  08008318  00018318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008320  08008320  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008320  08008320  00018320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008324  08008324  00018324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  20000074  0800839c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  0800839c  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4e3  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b85  00000000  00000000  0003f58d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00043118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001558  00000000  00000000  000447e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003271e  00000000  00000000  00045d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001acfc  00000000  00000000  0007845e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012fdbb  00000000  00000000  0009315a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c2f15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068dc  00000000  00000000  001c2f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000074 	.word	0x20000074
 8000210:	00000000 	.word	0x00000000
 8000214:	080081c4 	.word	0x080081c4

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000078 	.word	0x20000078
 8000230:	080081c4 	.word	0x080081c4

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <_Z8crc8_dvbhhh>:
    return checksum;
}


uint8_t crc8_dvb(uint8_t crc, uint8_t a, uint8_t seed)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
 800055e:	460b      	mov	r3, r1
 8000560:	71bb      	strb	r3, [r7, #6]
 8000562:	4613      	mov	r3, r2
 8000564:	717b      	strb	r3, [r7, #5]
    crc ^= a;
 8000566:	79fa      	ldrb	r2, [r7, #7]
 8000568:	79bb      	ldrb	r3, [r7, #6]
 800056a:	4053      	eors	r3, r2
 800056c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; ++i) {
 800056e:	2300      	movs	r3, #0
 8000570:	73fb      	strb	r3, [r7, #15]
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	2b07      	cmp	r3, #7
 8000576:	d813      	bhi.n	80005a0 <_Z8crc8_dvbhhh+0x4c>
        if (crc & 0x80) {
 8000578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057c:	2b00      	cmp	r3, #0
 800057e:	da08      	bge.n	8000592 <_Z8crc8_dvbhhh+0x3e>
            crc = (crc << 1) ^ seed;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	b25a      	sxtb	r2, r3
 8000586:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800058a:	4053      	eors	r3, r2
 800058c:	b25b      	sxtb	r3, r3
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	e002      	b.n	8000598 <_Z8crc8_dvbhhh+0x44>
        } else {
            crc = crc << 1;
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; ++i) {
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	3301      	adds	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	e7e8      	b.n	8000572 <_Z8crc8_dvbhhh+0x1e>
        }
    }
    return crc;
 80005a0:	79fb      	ldrb	r3, [r7, #7]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <_Z23msp_parse_received_dataP12msp_format_sPh>:

bool msp_parse_received_data(msp_format_t *msp, uint8_t * raw_data){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	if(raw_data[0] != MSP_HEADER_START){
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	781a      	ldrb	r2, [r3, #0]
 80005be:	4b46      	ldr	r3, [pc, #280]	; (80006d8 <_Z23msp_parse_received_dataP12msp_format_sPh+0x128>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d001      	beq.n	80005ca <_Z23msp_parse_received_dataP12msp_format_sPh+0x1a>
		return false;
 80005c6:	2300      	movs	r3, #0
 80005c8:	e082      	b.n	80006d0 <_Z23msp_parse_received_dataP12msp_format_sPh+0x120>
	}
	// Processing is MSP V2
	uint8_t offset = 8;
 80005ca:	2308      	movs	r3, #8
 80005cc:	75fb      	strb	r3, [r7, #23]

	msp->checksum1 = 0;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	msp->cmd_flags = raw_data[3];
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	78da      	ldrb	r2, [r3, #3]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	msp->id = (raw_data[4] << 8 | raw_data[5]);
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	3304      	adds	r3, #4
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	021b      	lsls	r3, r3, #8
 80005e8:	b21a      	sxth	r2, r3
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	3305      	adds	r3, #5
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	b21b      	sxth	r3, r3
 80005f2:	4313      	orrs	r3, r2
 80005f4:	b21b      	sxth	r3, r3
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
	msp->data_size = (raw_data[6] << 8 | raw_data[7]);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	3306      	adds	r3, #6
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	021b      	lsls	r3, r3, #8
 8000606:	b21a      	sxth	r2, r3
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	3307      	adds	r3, #7
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b21b      	sxth	r3, r3
 8000610:	4313      	orrs	r3, r2
 8000612:	b21b      	sxth	r3, r3
 8000614:	b29a      	uxth	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
	for(int i = 3; i < 8; i++){
 800061c:	2303      	movs	r3, #3
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	2b07      	cmp	r3, #7
 8000624:	dc13      	bgt.n	800064e <_Z23msp_parse_received_dataP12msp_format_sPh+0x9e>
		msp->checksum1 = crc8_dvb(msp->checksum1, raw_data[i], 0xD5);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f893 00c8 	ldrb.w	r0, [r3, #200]	; 0xc8
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	4413      	add	r3, r2
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	22d5      	movs	r2, #213	; 0xd5
 8000636:	4619      	mov	r1, r3
 8000638:	f7ff ff8c 	bl	8000554 <_Z8crc8_dvbhhh>
 800063c:	4603      	mov	r3, r0
 800063e:	461a      	mov	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	for(int i = 3; i < 8; i++){
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	3301      	adds	r3, #1
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	e7e8      	b.n	8000620 <_Z23msp_parse_received_dataP12msp_format_sPh+0x70>
	}

	for(int i = 0; i < (msp->data_size/0x100) ; i++){ // 0x100 is 256 in hex
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	b29b      	uxth	r3, r3
 800065c:	461a      	mov	r2, r3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4293      	cmp	r3, r2
 8000662:	da22      	bge.n	80006aa <_Z23msp_parse_received_dataP12msp_format_sPh+0xfa>
		msp->payload[i] = raw_data[offset++];
 8000664:	7dfb      	ldrb	r3, [r7, #23]
 8000666:	1c5a      	adds	r2, r3, #1
 8000668:	75fa      	strb	r2, [r7, #23]
 800066a:	461a      	mov	r2, r3
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	4413      	add	r3, r2
 8000670:	7819      	ldrb	r1, [r3, #0]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	460a      	mov	r2, r1
 800067a:	701a      	strb	r2, [r3, #0]
		msp->checksum1 = crc8_dvb(msp->checksum1, raw_data[offset++], 0xD5);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f893 00c8 	ldrb.w	r0, [r3, #200]	; 0xc8
 8000682:	7dfb      	ldrb	r3, [r7, #23]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	75fa      	strb	r2, [r7, #23]
 8000688:	461a      	mov	r2, r3
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	4413      	add	r3, r2
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	22d5      	movs	r2, #213	; 0xd5
 8000692:	4619      	mov	r1, r3
 8000694:	f7ff ff5e 	bl	8000554 <_Z8crc8_dvbhhh>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	for(int i = 0; i < (msp->data_size/0x100) ; i++){ // 0x100 is 256 in hex
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	3301      	adds	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	e7d3      	b.n	8000652 <_Z23msp_parse_received_dataP12msp_format_sPh+0xa2>
	}
	if(msp->checksum1 == raw_data[offset]){
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
 80006b2:	6839      	ldr	r1, [r7, #0]
 80006b4:	440b      	add	r3, r1
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d104      	bne.n	80006c6 <_Z23msp_parse_received_dataP12msp_format_sPh+0x116>
		msp->c_state = MSP_COMMAND_RECEIVED;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2201      	movs	r2, #1
 80006c0:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 80006c4:	e003      	b.n	80006ce <_Z23msp_parse_received_dataP12msp_format_sPh+0x11e>
	} else {
		msp->c_state = MSP_IDLE;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	}
	return true;
 80006ce:	2301      	movs	r3, #1
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000000 	.word	0x20000000

080006dc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006e8:	4907      	ldr	r1, [pc, #28]	; (8000708 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4013      	ands	r3, r2
 80006f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006fa:	68fb      	ldr	r3, [r7, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	40021000 	.word	0x40021000

0800070c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000716:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000718:	4907      	ldr	r1, [pc, #28]	; (8000738 <LL_APB1_GRP2_EnableClock+0x2c>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4313      	orrs	r3, r2
 800071e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000722:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4013      	ands	r3, r2
 8000728:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800072a:	68fb      	ldr	r3, [r7, #12]
}
 800072c:	bf00      	nop
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	40021000 	.word	0x40021000

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000740:	f000 ff37 	bl	80015b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000744:	f000 f814 	bl	8000770 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000748:	f000 fa22 	bl	8000b90 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800074c:	f000 f880 	bl	8000850 <_ZL12MX_ADC1_Initv>
  MX_LPUART1_UART_Init();
 8000750:	f000 f904 	bl	800095c <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 8000754:	f000 f964 	bl	8000a20 <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 8000758:	f000 f9b6 	bl	8000ac8 <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 800075c:	f000 f9ea 	bl	8000b34 <_ZL15MX_USB_PCD_Initv>
  //MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  printf("hello World \n");
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <main+0x30>)
 8000762:	f006 fda3 	bl	80072ac <puts>
  read_flow_data();
 8000766:	f000 fb0b 	bl	8000d80 <_Z14read_flow_datav>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076a:	e7fe      	b.n	800076a <main+0x2e>
 800076c:	080081dc 	.word	0x080081dc

08000770 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b098      	sub	sp, #96	; 0x60
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0318 	add.w	r3, r7, #24
 800077a:	2248      	movs	r2, #72	; 0x48
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f006 fd06 	bl	8007190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000792:	2000      	movs	r0, #0
 8000794:	f002 fba8 	bl	8002ee8 <HAL_PWREx_ControlVoltageScaling>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	bf14      	ite	ne
 800079e:	2301      	movne	r3, #1
 80007a0:	2300      	moveq	r3, #0
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 80007a8:	f000 fa84 	bl	8000cb4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007ac:	f002 fb7e 	bl	8002eac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007b0:	4b26      	ldr	r3, [pc, #152]	; (800084c <_Z18SystemClock_Configv+0xdc>)
 80007b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007b6:	4a25      	ldr	r2, [pc, #148]	; (800084c <_Z18SystemClock_Configv+0xdc>)
 80007b8:	f023 0318 	bic.w	r3, r3, #24
 80007bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 80007c0:	2334      	movs	r3, #52	; 0x34
 80007c2:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007c4:	2381      	movs	r3, #129	; 0x81
 80007c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007d4:	2360      	movs	r3, #96	; 0x60
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007dc:	2301      	movs	r3, #1
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80007e4:	2337      	movs	r3, #55	; 0x37
 80007e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007e8:	2307      	movs	r3, #7
 80007ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 0318 	add.w	r3, r7, #24
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 fc05 	bl	8003008 <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	bf14      	ite	ne
 8000804:	2301      	movne	r3, #1
 8000806:	2300      	moveq	r3, #0
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800080e:	f000 fa51 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	230f      	movs	r3, #15
 8000814:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000816:	2303      	movs	r3, #3
 8000818:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2105      	movs	r1, #5
 800082a:	4618      	mov	r0, r3
 800082c:	f003 f8c2 	bl	80039b4 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	bf14      	ite	ne
 8000836:	2301      	movne	r3, #1
 8000838:	2300      	moveq	r3, #0
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000840:	f000 fa38 	bl	8000cb4 <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3760      	adds	r7, #96	; 0x60
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000

08000850 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
 8000870:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000872:	4b37      	ldr	r3, [pc, #220]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 8000874:	4a37      	ldr	r2, [pc, #220]	; (8000954 <_ZL12MX_ADC1_Initv+0x104>)
 8000876:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000878:	4b35      	ldr	r3, [pc, #212]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800087e:	4b34      	ldr	r3, [pc, #208]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000884:	4b32      	ldr	r3, [pc, #200]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800088a:	4b31      	ldr	r3, [pc, #196]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000890:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 8000892:	2204      	movs	r2, #4
 8000894:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000896:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 8000898:	2200      	movs	r2, #0
 800089a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800089c:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 800089e:	2200      	movs	r2, #0
 80008a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b0:	4b27      	ldr	r3, [pc, #156]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b6:	4b26      	ldr	r3, [pc, #152]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008bc:	4b24      	ldr	r3, [pc, #144]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 80008be:	2200      	movs	r2, #0
 80008c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008ca:	4b21      	ldr	r3, [pc, #132]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d2:	481f      	ldr	r0, [pc, #124]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 80008d4:	f001 f884 	bl	80019e0 <HAL_ADC_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	bf14      	ite	ne
 80008de:	2301      	movne	r3, #1
 80008e0:	2300      	moveq	r3, #0
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 80008e8:	f000 f9e4 	bl	8000cb4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4816      	ldr	r0, [pc, #88]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 80008f8:	f001 fdce 	bl	8002498 <HAL_ADCEx_MultiModeConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	bf14      	ite	ne
 8000902:	2301      	movne	r3, #1
 8000904:	2300      	moveq	r3, #0
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 800090c:	f000 f9d2 	bl	8000cb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <_ZL12MX_ADC1_Initv+0x108>)
 8000912:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000914:	2306      	movs	r3, #6
 8000916:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800091c:	237f      	movs	r3, #127	; 0x7f
 800091e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000920:	2304      	movs	r3, #4
 8000922:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	4619      	mov	r1, r3
 800092c:	4808      	ldr	r0, [pc, #32]	; (8000950 <_ZL12MX_ADC1_Initv+0x100>)
 800092e:	f001 f9a3 	bl	8001c78 <HAL_ADC_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	bf14      	ite	ne
 8000938:	2301      	movne	r3, #1
 800093a:	2300      	moveq	r3, #0
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 8000942:	f000 f9b7 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000090 	.word	0x20000090
 8000954:	42028000 	.word	0x42028000
 8000958:	0c900008 	.word	0x0c900008

0800095c <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000960:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000962:	4a2d      	ldr	r2, [pc, #180]	; (8000a18 <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 8000964:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000966:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000968:	4a2c      	ldr	r2, [pc, #176]	; (8000a1c <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 800096a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096c:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000972:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800097e:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000980:	220c      	movs	r2, #12
 8000982:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098a:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000996:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000998:	2200      	movs	r2, #0
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009a2:	481c      	ldr	r0, [pc, #112]	; (8000a14 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80009a4:	f004 f93a 	bl	8004c1c <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	bf14      	ite	ne
 80009ae:	2301      	movne	r3, #1
 80009b0:	2300      	moveq	r3, #0
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 80009b8:	f000 f97c 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	4815      	ldr	r0, [pc, #84]	; (8000a14 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80009c0:	f006 f8fd 	bl	8006bbe <HAL_UARTEx_SetTxFifoThreshold>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	bf14      	ite	ne
 80009ca:	2301      	movne	r3, #1
 80009cc:	2300      	moveq	r3, #0
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 80009d4:	f000 f96e 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	480e      	ldr	r0, [pc, #56]	; (8000a14 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80009dc:	f006 f92d 	bl	8006c3a <HAL_UARTEx_SetRxFifoThreshold>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	bf14      	ite	ne
 80009e6:	2301      	movne	r3, #1
 80009e8:	2300      	moveq	r3, #0
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 80009f0:	f000 f960 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009f4:	4807      	ldr	r0, [pc, #28]	; (8000a14 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80009f6:	f006 f8a9 	bl	8006b4c <HAL_UARTEx_DisableFifoMode>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	bf14      	ite	ne
 8000a00:	2301      	movne	r3, #1
 8000a02:	2300      	moveq	r3, #0
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 8000a0a:	f000 f953 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000f8 	.word	0x200000f8
 8000a18:	40008000 	.word	0x40008000
 8000a1c:	00033324 	.word	0x00033324

08000a20 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000a26:	463b      	mov	r3, r7
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
 8000a34:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a36:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <_ZL11MX_RTC_Initv+0xa0>)
 8000a38:	4a22      	ldr	r2, [pc, #136]	; (8000ac4 <_ZL11MX_RTC_Initv+0xa4>)
 8000a3a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <_ZL11MX_RTC_Initv+0xa0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <_ZL11MX_RTC_Initv+0xa0>)
 8000a44:	227f      	movs	r2, #127	; 0x7f
 8000a46:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <_ZL11MX_RTC_Initv+0xa0>)
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <_ZL11MX_RTC_Initv+0xa0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <_ZL11MX_RTC_Initv+0xa0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <_ZL11MX_RTC_Initv+0xa0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <_ZL11MX_RTC_Initv+0xa0>)
 8000a62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a66:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <_ZL11MX_RTC_Initv+0xa0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a6e:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <_ZL11MX_RTC_Initv+0xa0>)
 8000a70:	f003 ff9a 	bl	80049a8 <HAL_RTC_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	bf14      	ite	ne
 8000a7a:	2301      	movne	r3, #1
 8000a7c:	2300      	moveq	r3, #0
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 8000a84:	f000 f916 	bl	8000cb4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000a98:	463b      	mov	r3, r7
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <_ZL11MX_RTC_Initv+0xa0>)
 8000a9e:	f004 f891 	bl	8004bc4 <HAL_RTCEx_PrivilegeModeSet>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	bf14      	ite	ne
 8000aa8:	2301      	movne	r3, #1
 8000aaa:	2300      	moveq	r3, #0
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 8000ab2:	f000 f8ff 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000018c 	.word	0x2000018c
 8000ac4:	40002800 	.word	0x40002800

08000ac8 <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
 8000adc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000ade:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000ae2:	f7ff fe13 	bl	800070c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	f7ff fdf8 	bl	80006dc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff fdf5 	bl	80006dc <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000af6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000af8:	2303      	movs	r3, #3
 8000afa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	463b      	mov	r3, r7
 8000b02:	4619      	mov	r1, r3
 8000b04:	4809      	ldr	r0, [pc, #36]	; (8000b2c <_ZL13MX_UCPD1_Initv+0x64>)
 8000b06:	f006 fa70 	bl	8006fea <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b0e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000b10:	2303      	movs	r3, #3
 8000b12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <_ZL13MX_UCPD1_Initv+0x68>)
 8000b1e:	f006 fa64 	bl	8006fea <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	42020400 	.word	0x42020400
 8000b30:	42020000 	.word	0x42020000

08000b34 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b3a:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <_ZL15MX_USB_PCD_Initv+0x58>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b40:	2208      	movs	r2, #8
 8000b42:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b46:	2202      	movs	r2, #2
 8000b48:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b68:	4807      	ldr	r0, [pc, #28]	; (8000b88 <_ZL15MX_USB_PCD_Initv+0x54>)
 8000b6a:	f002 f89b 	bl	8002ca4 <HAL_PCD_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	bf14      	ite	ne
 8000b74:	2301      	movne	r3, #1
 8000b76:	2300      	moveq	r3, #0
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8000b7e:	f000 f899 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200001b4 	.word	0x200001b4
 8000b8c:	4000d400 	.word	0x4000d400

08000b90 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <_ZL12MX_GPIO_Initv+0x114>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a3e      	ldr	r2, [pc, #248]	; (8000ca4 <_ZL12MX_GPIO_Initv+0x114>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <_ZL12MX_GPIO_Initv+0x114>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <_ZL12MX_GPIO_Initv+0x114>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a38      	ldr	r2, [pc, #224]	; (8000ca4 <_ZL12MX_GPIO_Initv+0x114>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b36      	ldr	r3, [pc, #216]	; (8000ca4 <_ZL12MX_GPIO_Initv+0x114>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <_ZL12MX_GPIO_Initv+0x114>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a32      	ldr	r2, [pc, #200]	; (8000ca4 <_ZL12MX_GPIO_Initv+0x114>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <_ZL12MX_GPIO_Initv+0x114>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <_ZL12MX_GPIO_Initv+0x114>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4a2c      	ldr	r2, [pc, #176]	; (8000ca4 <_ZL12MX_GPIO_Initv+0x114>)
 8000bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <_ZL12MX_GPIO_Initv+0x114>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000c06:	f002 f9cb 	bl	8002fa0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	4826      	ldr	r0, [pc, #152]	; (8000ca8 <_ZL12MX_GPIO_Initv+0x118>)
 8000c10:	f002 f830 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c1a:	4824      	ldr	r0, [pc, #144]	; (8000cac <_ZL12MX_GPIO_Initv+0x11c>)
 8000c1c:	f002 f82a 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	21a0      	movs	r1, #160	; 0xa0
 8000c24:	4822      	ldr	r0, [pc, #136]	; (8000cb0 <_ZL12MX_GPIO_Initv+0x120>)
 8000c26:	f002 f825 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000c2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	481b      	ldr	r0, [pc, #108]	; (8000cb0 <_ZL12MX_GPIO_Initv+0x120>)
 8000c42:	f001 fe97 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <_ZL12MX_GPIO_Initv+0x118>)
 8000c5e:	f001 fe89 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480c      	ldr	r0, [pc, #48]	; (8000cac <_ZL12MX_GPIO_Initv+0x11c>)
 8000c7c:	f001 fe7a 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000c80:	23a0      	movs	r3, #160	; 0xa0
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <_ZL12MX_GPIO_Initv+0x120>)
 8000c98:	f001 fe6c 	bl	8002974 <HAL_GPIO_Init>

}
 8000c9c:	bf00      	nop
 8000c9e:	3728      	adds	r7, #40	; 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	42020800 	.word	0x42020800
 8000cac:	42020000 	.word	0x42020000
 8000cb0:	42020400 	.word	0x42020400

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <Error_Handler+0x8>
	...

08000cc0 <_ZL19MX_USART2_UART_Initv>:
uint8_t rx_data[18];
UART_HandleTypeDef huart2;


static void MX_USART2_UART_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000cc6:	4a2d      	ldr	r2, [pc, #180]	; (8000d7c <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000cc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cca:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ccc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d08:	481b      	ldr	r0, [pc, #108]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000d0a:	f003 ff87 	bl	8004c1c <HAL_UART_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	bf14      	ite	ne
 8000d14:	2301      	movne	r3, #1
 8000d16:	2300      	moveq	r3, #0
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8000d1e:	f7ff ffc9 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d22:	2100      	movs	r1, #0
 8000d24:	4814      	ldr	r0, [pc, #80]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000d26:	f005 ff4a 	bl	8006bbe <HAL_UARTEx_SetTxFifoThreshold>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	bf14      	ite	ne
 8000d30:	2301      	movne	r3, #1
 8000d32:	2300      	moveq	r3, #0
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8000d3a:	f7ff ffbb 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000d42:	f005 ff7a 	bl	8006c3a <HAL_UARTEx_SetRxFifoThreshold>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bf14      	ite	ne
 8000d4c:	2301      	movne	r3, #1
 8000d4e:	2300      	moveq	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8000d56:	f7ff ffad 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d5a:	4807      	ldr	r0, [pc, #28]	; (8000d78 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000d5c:	f005 fef6 	bl	8006b4c <HAL_UARTEx_DisableFifoMode>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	bf14      	ite	ne
 8000d66:	2301      	movne	r3, #1
 8000d68:	2300      	moveq	r3, #0
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8000d70:	f7ff ffa0 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200004bc 	.word	0x200004bc
 8000d7c:	40004400 	.word	0x40004400

08000d80 <_Z14read_flow_datav>:

// read data from sensor
void read_flow_data(){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	MX_USART2_UART_Init();
 8000d84:	f7ff ff9c 	bl	8000cc0 <_ZL19MX_USART2_UART_Initv>
	HAL_UART_Receive_IT(&huart2, rx_data, 18);
 8000d88:	2212      	movs	r2, #18
 8000d8a:	4903      	ldr	r1, [pc, #12]	; (8000d98 <_Z14read_flow_datav+0x18>)
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <_Z14read_flow_datav+0x1c>)
 8000d8e:	f003 ff95 	bl	8004cbc <HAL_UART_Receive_IT>
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200004a8 	.word	0x200004a8
 8000d9c:	200004bc 	.word	0x200004bc

08000da0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	process_opflow(rx_data);
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <HAL_UART_RxCpltCallback+0x1c>)
 8000daa:	f000 f809 	bl	8000dc0 <_Z14process_opflowPh>
	read_flow_data();
 8000dae:	f7ff ffe7 	bl	8000d80 <_Z14read_flow_datav>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200004a8 	.word	0x200004a8

08000dc0 <_Z14process_opflowPh>:

void process_opflow(uint8_t *rx_data){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b0b6      	sub	sp, #216	; 0xd8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	printf("Values are:\n");
 8000dc8:	4815      	ldr	r0, [pc, #84]	; (8000e20 <_Z14process_opflowPh+0x60>)
 8000dca:	f006 fa6f 	bl	80072ac <puts>
	for(int i=0;i<18;i++) {
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000dd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000dd8:	2b11      	cmp	r3, #17
 8000dda:	dc0e      	bgt.n	8000dfa <_Z14process_opflowPh+0x3a>
	  printf("%X ", rx_data[i]);
 8000ddc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	4413      	add	r3, r2
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	4619      	mov	r1, r3
 8000de8:	480e      	ldr	r0, [pc, #56]	; (8000e24 <_Z14process_opflowPh+0x64>)
 8000dea:	f006 f9d9 	bl	80071a0 <iprintf>
	for(int i=0;i<18;i++) {
 8000dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000df2:	3301      	adds	r3, #1
 8000df4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000df8:	e7ec      	b.n	8000dd4 <_Z14process_opflowPh+0x14>
	}
	msp_format_t msp_data;
	msp_parse_received_data(&msp_data, rx_data);
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fbd5 	bl	80005b0 <_Z23msp_parse_received_dataP12msp_format_sPh>

	if(msp_data.c_state == MSP_COMMAND_RECEIVED){
 8000e06:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d104      	bne.n	8000e18 <_Z14process_opflowPh+0x58>
		opFlowUpdate(&msp_data);
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f808 	bl	8000e28 <_Z12opFlowUpdateP12msp_format_s>
	}
}
 8000e18:	bf00      	nop
 8000e1a:	37d8      	adds	r7, #216	; 0xd8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	080081ec 	.word	0x080081ec
 8000e24:	080081f8 	.word	0x080081f8

08000e28 <_Z12opFlowUpdateP12msp_format_s>:

// CALIBRATION

// UPDATE FUNCTION
void opFlowUpdate(msp_format_t *raw_data)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	// need timing?
	raw_opflow_data_t *pkt = (raw_opflow_data_t *)raw_data->payload;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	60fb      	str	r3, [r7, #12]
	printf("%X", pkt->quality);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4803      	ldr	r0, [pc, #12]	; (8000e48 <_Z12opFlowUpdateP12msp_format_s+0x20>)
 8000e3c:	f006 f9b0 	bl	80071a0 <iprintf>
	// display data on screen?
	// sets global state variable...
}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	080081fc 	.word	0x080081fc

08000e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_MspInit+0x44>)
 8000e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_MspInit+0x44>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_MspInit+0x44>)
 8000e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_MspInit+0x44>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <HAL_MspInit+0x44>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	6593      	str	r3, [r2, #88]	; 0x58
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_MspInit+0x44>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000

08000e94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0ae      	sub	sp, #184	; 0xb8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	2294      	movs	r2, #148	; 0x94
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f006 f96b 	bl	8007190 <memset>
  if(hadc->Instance==ADC1)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a1f      	ldr	r2, [pc, #124]	; (8000f3c <HAL_ADC_MspInit+0xa8>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d137      	bne.n	8000f34 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ec4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ec8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000eca:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000ece:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 f850 	bl	8003f7c <HAL_RCCEx_PeriphCLKConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000ee2:	f7ff fee7 	bl	8000cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_ADC_MspInit+0xac>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a15      	ldr	r2, [pc, #84]	; (8000f40 <HAL_ADC_MspInit+0xac>)
 8000eec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <HAL_ADC_MspInit+0xac>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <HAL_ADC_MspInit+0xac>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <HAL_ADC_MspInit+0xac>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_ADC_MspInit+0xac>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000f16:	2304      	movs	r3, #4
 8000f18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <HAL_ADC_MspInit+0xb0>)
 8000f30:	f001 fd20 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f34:	bf00      	nop
 8000f36:	37b8      	adds	r7, #184	; 0xb8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	42028000 	.word	0x42028000
 8000f40:	40021000 	.word	0x40021000
 8000f44:	42020800 	.word	0x42020800

08000f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0b0      	sub	sp, #192	; 0xc0
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 0318 	add.w	r3, r7, #24
 8000f64:	2294      	movs	r2, #148	; 0x94
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f006 f911 	bl	8007190 <memset>
  if(huart->Instance==LPUART1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a47      	ldr	r2, [pc, #284]	; (8001090 <HAL_UART_MspInit+0x148>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d13e      	bne.n	8000ff6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f78:	2320      	movs	r3, #32
 8000f7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f80:	f107 0318 	add.w	r3, r7, #24
 8000f84:	4618      	mov	r0, r3
 8000f86:	f002 fff9 	bl	8003f7c <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f90:	f7ff fe90 	bl	8000cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f94:	4b3f      	ldr	r3, [pc, #252]	; (8001094 <HAL_UART_MspInit+0x14c>)
 8000f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f98:	4a3e      	ldr	r2, [pc, #248]	; (8001094 <HAL_UART_MspInit+0x14c>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000fa0:	4b3c      	ldr	r3, [pc, #240]	; (8001094 <HAL_UART_MspInit+0x14c>)
 8000fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fac:	4b39      	ldr	r3, [pc, #228]	; (8001094 <HAL_UART_MspInit+0x14c>)
 8000fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb0:	4a38      	ldr	r2, [pc, #224]	; (8001094 <HAL_UART_MspInit+0x14c>)
 8000fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb8:	4b36      	ldr	r3, [pc, #216]	; (8001094 <HAL_UART_MspInit+0x14c>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000fc4:	f001 ffec 	bl	8002fa0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000fc8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fe8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fec:	4619      	mov	r1, r3
 8000fee:	482a      	ldr	r0, [pc, #168]	; (8001098 <HAL_UART_MspInit+0x150>)
 8000ff0:	f001 fcc0 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ff4:	e047      	b.n	8001086 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a28      	ldr	r2, [pc, #160]	; (800109c <HAL_UART_MspInit+0x154>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d142      	bne.n	8001086 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001000:	2302      	movs	r3, #2
 8001002:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001004:	2300      	movs	r3, #0
 8001006:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001008:	f107 0318 	add.w	r3, r7, #24
 800100c:	4618      	mov	r0, r3
 800100e:	f002 ffb5 	bl	8003f7c <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001018:	f7ff fe4c 	bl	8000cb4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <HAL_UART_MspInit+0x14c>)
 800101e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001020:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <HAL_UART_MspInit+0x14c>)
 8001022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001026:	6593      	str	r3, [r2, #88]	; 0x58
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_UART_MspInit+0x14c>)
 800102a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <HAL_UART_MspInit+0x14c>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	4a16      	ldr	r2, [pc, #88]	; (8001094 <HAL_UART_MspInit+0x14c>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HAL_UART_MspInit+0x14c>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800104c:	230c      	movs	r3, #12
 800104e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001064:	2307      	movs	r3, #7
 8001066:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800106e:	4619      	mov	r1, r3
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <HAL_UART_MspInit+0x158>)
 8001072:	f001 fc7f 	bl	8002974 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	203e      	movs	r0, #62	; 0x3e
 800107c:	f001 fb8b 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001080:	203e      	movs	r0, #62	; 0x3e
 8001082:	f001 fba2 	bl	80027ca <HAL_NVIC_EnableIRQ>
}
 8001086:	bf00      	nop
 8001088:	37c0      	adds	r7, #192	; 0xc0
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40008000 	.word	0x40008000
 8001094:	40021000 	.word	0x40021000
 8001098:	42021800 	.word	0x42021800
 800109c:	40004400 	.word	0x40004400
 80010a0:	42020000 	.word	0x42020000

080010a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0a8      	sub	sp, #160	; 0xa0
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2294      	movs	r2, #148	; 0x94
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f006 f86b 	bl	8007190 <memset>
  if(hrtc->Instance==RTC)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a16      	ldr	r2, [pc, #88]	; (8001118 <HAL_RTC_MspInit+0x74>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d124      	bne.n	800110e <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80010ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 ff50 	bl	8003f7c <HAL_RCCEx_PeriphCLKConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80010e2:	f7ff fde7 	bl	8000cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <HAL_RTC_MspInit+0x78>)
 80010e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ec:	4a0b      	ldr	r2, [pc, #44]	; (800111c <HAL_RTC_MspInit+0x78>)
 80010ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_RTC_MspInit+0x78>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <HAL_RTC_MspInit+0x78>)
 80010fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001100:	6593      	str	r3, [r2, #88]	; 0x58
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_RTC_MspInit+0x78>)
 8001104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	37a0      	adds	r7, #160	; 0xa0
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40002800 	.word	0x40002800
 800111c:	40021000 	.word	0x40021000

08001120 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0ae      	sub	sp, #184	; 0xb8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	2294      	movs	r2, #148	; 0x94
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f006 f825 	bl	8007190 <memset>
  if(hpcd->Instance==USB)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <HAL_PCD_MspInit+0xb4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d13d      	bne.n	80011cc <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001154:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4618      	mov	r0, r3
 8001162:	f002 ff0b 	bl	8003f7c <HAL_RCCEx_PeriphCLKConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800116c:	f7ff fda2 	bl	8000cb4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_PCD_MspInit+0xb8>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	4a18      	ldr	r2, [pc, #96]	; (80011d8 <HAL_PCD_MspInit+0xb8>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_PCD_MspInit+0xb8>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001188:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800118c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80011a2:	230a      	movs	r3, #10
 80011a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011ac:	4619      	mov	r1, r3
 80011ae:	480b      	ldr	r0, [pc, #44]	; (80011dc <HAL_PCD_MspInit+0xbc>)
 80011b0:	f001 fbe0 	bl	8002974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_PCD_MspInit+0xb8>)
 80011b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_PCD_MspInit+0xb8>)
 80011ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011be:	65d3      	str	r3, [r2, #92]	; 0x5c
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_PCD_MspInit+0xb8>)
 80011c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80011cc:	bf00      	nop
 80011ce:	37b8      	adds	r7, #184	; 0xb8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	4000d400 	.word	0x4000d400
 80011d8:	40021000 	.word	0x40021000
 80011dc:	42020000 	.word	0x42020000

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <NMI_Handler+0x4>

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f000 fa18 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 27.
  */
void USART2_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <USART2_IRQHandler+0x10>)
 800123a:	f003 fd8b 	bl	8004d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200004bc 	.word	0x200004bc

08001248 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <ITM_SendChar+0x48>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <ITM_SendChar+0x48>)
 8001258:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800125c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <ITM_SendChar+0x4c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <ITM_SendChar+0x4c>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800126a:	bf00      	nop
 800126c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f8      	beq.n	800126c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800127a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	6013      	str	r3, [r2, #0]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000edfc 	.word	0xe000edfc
 8001294:	e0000e00 	.word	0xe0000e00

08001298 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	e00a      	b.n	80012c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012aa:	e000      	b.n	80012ae <_read+0x16>
 80012ac:	bf00      	nop
 80012ae:	4601      	mov	r1, r0
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	60ba      	str	r2, [r7, #8]
 80012b6:	b2ca      	uxtb	r2, r1
 80012b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3301      	adds	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	dbf0      	blt.n	80012aa <_read+0x12>
  }

  return len;
 80012c8:	687b      	ldr	r3, [r7, #4]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	e009      	b.n	80012f8 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	60ba      	str	r2, [r7, #8]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ffab 	bl	8001248 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbf1      	blt.n	80012e4 <_write+0x12>
  }
  return len;
 8001300:	687b      	ldr	r3, [r7, #4]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_close>:

int _close(int file)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001332:	605a      	str	r2, [r3, #4]
  return 0;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <_isatty>:

int _isatty(int file)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800137c:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <_sbrk+0x5c>)
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <_sbrk+0x60>)
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <_sbrk+0x64>)
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <_sbrk+0x68>)
 8001394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d207      	bcs.n	80013b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a4:	f005 feca 	bl	800713c <__errno>
 80013a8:	4603      	mov	r3, r0
 80013aa:	220c      	movs	r2, #12
 80013ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	e009      	b.n	80013c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <_sbrk+0x64>)
 80013c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20030000 	.word	0x20030000
 80013d4:	00000400 	.word	0x00000400
 80013d8:	20000550 	.word	0x20000550
 80013dc:	20000568 	.word	0x20000568

080013e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <SystemInit+0x20>)
 80013e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <SystemInit+0x20>)
 80013ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800140a:	4b4f      	ldr	r3, [pc, #316]	; (8001548 <SystemCoreClockUpdate+0x144>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	2b00      	cmp	r3, #0
 8001414:	d107      	bne.n	8001426 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001416:	4b4c      	ldr	r3, [pc, #304]	; (8001548 <SystemCoreClockUpdate+0x144>)
 8001418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e005      	b.n	8001432 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001426:	4b48      	ldr	r3, [pc, #288]	; (8001548 <SystemCoreClockUpdate+0x144>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	091b      	lsrs	r3, r3, #4
 800142c:	f003 030f 	and.w	r3, r3, #15
 8001430:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001432:	4a46      	ldr	r2, [pc, #280]	; (800154c <SystemCoreClockUpdate+0x148>)
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800143c:	4b42      	ldr	r3, [pc, #264]	; (8001548 <SystemCoreClockUpdate+0x144>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b0c      	cmp	r3, #12
 8001446:	d866      	bhi.n	8001516 <SystemCoreClockUpdate+0x112>
 8001448:	a201      	add	r2, pc, #4	; (adr r2, 8001450 <SystemCoreClockUpdate+0x4c>)
 800144a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144e:	bf00      	nop
 8001450:	08001485 	.word	0x08001485
 8001454:	08001517 	.word	0x08001517
 8001458:	08001517 	.word	0x08001517
 800145c:	08001517 	.word	0x08001517
 8001460:	0800148d 	.word	0x0800148d
 8001464:	08001517 	.word	0x08001517
 8001468:	08001517 	.word	0x08001517
 800146c:	08001517 	.word	0x08001517
 8001470:	08001495 	.word	0x08001495
 8001474:	08001517 	.word	0x08001517
 8001478:	08001517 	.word	0x08001517
 800147c:	08001517 	.word	0x08001517
 8001480:	0800149d 	.word	0x0800149d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001484:	4a32      	ldr	r2, [pc, #200]	; (8001550 <SystemCoreClockUpdate+0x14c>)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	6013      	str	r3, [r2, #0]
      break;
 800148a:	e048      	b.n	800151e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800148c:	4b30      	ldr	r3, [pc, #192]	; (8001550 <SystemCoreClockUpdate+0x14c>)
 800148e:	4a31      	ldr	r2, [pc, #196]	; (8001554 <SystemCoreClockUpdate+0x150>)
 8001490:	601a      	str	r2, [r3, #0]
      break;
 8001492:	e044      	b.n	800151e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001494:	4b2e      	ldr	r3, [pc, #184]	; (8001550 <SystemCoreClockUpdate+0x14c>)
 8001496:	4a30      	ldr	r2, [pc, #192]	; (8001558 <SystemCoreClockUpdate+0x154>)
 8001498:	601a      	str	r2, [r3, #0]
      break;
 800149a:	e040      	b.n	800151e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <SystemCoreClockUpdate+0x144>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80014a6:	4b28      	ldr	r3, [pc, #160]	; (8001548 <SystemCoreClockUpdate+0x144>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	f003 030f 	and.w	r3, r3, #15
 80014b0:	3301      	adds	r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d003      	beq.n	80014c2 <SystemCoreClockUpdate+0xbe>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d006      	beq.n	80014ce <SystemCoreClockUpdate+0xca>
 80014c0:	e00b      	b.n	80014da <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80014c2:	4a24      	ldr	r2, [pc, #144]	; (8001554 <SystemCoreClockUpdate+0x150>)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ca:	613b      	str	r3, [r7, #16]
          break;
 80014cc:	e00b      	b.n	80014e6 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80014ce:	4a22      	ldr	r2, [pc, #136]	; (8001558 <SystemCoreClockUpdate+0x154>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	613b      	str	r3, [r7, #16]
          break;
 80014d8:	e005      	b.n	80014e6 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	613b      	str	r3, [r7, #16]
          break;
 80014e4:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <SystemCoreClockUpdate+0x144>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	0a1b      	lsrs	r3, r3, #8
 80014ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <SystemCoreClockUpdate+0x144>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0e5b      	lsrs	r3, r3, #25
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	3301      	adds	r3, #1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001510:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <SystemCoreClockUpdate+0x14c>)
 8001512:	6013      	str	r3, [r2, #0]
      break;
 8001514:	e003      	b.n	800151e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001516:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <SystemCoreClockUpdate+0x14c>)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	6013      	str	r3, [r2, #0]
      break;
 800151c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <SystemCoreClockUpdate+0x144>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	091b      	lsrs	r3, r3, #4
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	4a0c      	ldr	r2, [pc, #48]	; (800155c <SystemCoreClockUpdate+0x158>)
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <SystemCoreClockUpdate+0x14c>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	fa22 f303 	lsr.w	r3, r2, r3
 8001538:	4a05      	ldr	r2, [pc, #20]	; (8001550 <SystemCoreClockUpdate+0x14c>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	371c      	adds	r7, #28
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40021000 	.word	0x40021000
 800154c:	08008218 	.word	0x08008218
 8001550:	20000004 	.word	0x20000004
 8001554:	00f42400 	.word	0x00f42400
 8001558:	007a1200 	.word	0x007a1200
 800155c:	08008200 	.word	0x08008200

08001560 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001598 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001564:	f7ff ff3c 	bl	80013e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001568:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800156a:	e003      	b.n	8001574 <LoopCopyDataInit>

0800156c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800156e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001570:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001572:	3104      	adds	r1, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001574:	480a      	ldr	r0, [pc, #40]	; (80015a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001578:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800157a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800157c:	d3f6      	bcc.n	800156c <CopyDataInit>
	ldr	r2, =_sbss
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001580:	e002      	b.n	8001588 <LoopFillZerobss>

08001582 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001582:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001584:	f842 3b04 	str.w	r3, [r2], #4

08001588 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <LoopForever+0x16>)
	cmp	r2, r3
 800158a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800158c:	d3f9      	bcc.n	8001582 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800158e:	f005 fddb 	bl	8007148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001592:	f7ff f8d3 	bl	800073c <main>

08001596 <LoopForever>:

LoopForever:
    b LoopForever
 8001596:	e7fe      	b.n	8001596 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001598:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800159c:	08008328 	.word	0x08008328
	ldr	r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80015a4:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80015a8:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80015ac:	20000568 	.word	0x20000568

080015b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC1_2_IRQHandler>

080015b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80015bc:	2004      	movs	r0, #4
 80015be:	f001 f8df 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80015c2:	f7ff ff1f 	bl	8001404 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015c6:	2000      	movs	r0, #0
 80015c8:	f000 f80e 	bl	80015e8 <HAL_InitTick>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d002      	beq.n	80015d8 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	71fb      	strb	r3, [r7, #7]
 80015d6:	e001      	b.n	80015dc <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015d8:	f7ff fc38 	bl	8000e4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015dc:	79fb      	ldrb	r3, [r7, #7]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_InitTick+0x6c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d023      	beq.n	8001644 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_InitTick+0x70>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_InitTick+0x6c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160a:	fbb3 f3f1 	udiv	r3, r3, r1
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f001 f8e7 	bl	80027e6 <HAL_SYSTICK_Config>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10f      	bne.n	800163e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b07      	cmp	r3, #7
 8001622:	d809      	bhi.n	8001638 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001624:	2200      	movs	r2, #0
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f001 f8b3 	bl	8002796 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001630:	4a0a      	ldr	r2, [pc, #40]	; (800165c <HAL_InitTick+0x74>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e007      	b.n	8001648 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	e004      	b.n	8001648 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e001      	b.n	8001648 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000000c 	.word	0x2000000c
 8001658:	20000004 	.word	0x20000004
 800165c:	20000008 	.word	0x20000008

08001660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x20>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_IncTick+0x24>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <HAL_IncTick+0x24>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	2000000c 	.word	0x2000000c
 8001684:	20000554 	.word	0x20000554

08001688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return uwTick;
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <HAL_GetTick+0x14>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000554 	.word	0x20000554

080016a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	609a      	str	r2, [r3, #8]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	609a      	str	r2, [r3, #8]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001708:	b480      	push	{r7}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3360      	adds	r3, #96	; 0x60
 800171a:	461a      	mov	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <LL_ADC_SetOffset+0x44>)
 800172a:	4013      	ands	r3, r2
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	4313      	orrs	r3, r2
 8001738:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001740:	bf00      	nop
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	03fff000 	.word	0x03fff000

08001750 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3360      	adds	r3, #96	; 0x60
 800175e:	461a      	mov	r2, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3360      	adds	r3, #96	; 0x60
 800178c:	461a      	mov	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	431a      	orrs	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017a6:	bf00      	nop
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	615a      	str	r2, [r3, #20]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3330      	adds	r3, #48	; 0x30
 80017e8:	461a      	mov	r2, r3
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	4413      	add	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f003 031f 	and.w	r3, r3, #31
 8001802:	211f      	movs	r1, #31
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	401a      	ands	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	0e9b      	lsrs	r3, r3, #26
 8001810:	f003 011f 	and.w	r1, r3, #31
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	431a      	orrs	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001824:	bf00      	nop
 8001826:	371c      	adds	r7, #28
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	3314      	adds	r3, #20
 8001840:	461a      	mov	r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	0e5b      	lsrs	r3, r3, #25
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	4413      	add	r3, r2
 800184e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	0d1b      	lsrs	r3, r3, #20
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	2107      	movs	r1, #7
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	401a      	ands	r2, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	0d1b      	lsrs	r3, r3, #20
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	431a      	orrs	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800187a:	bf00      	nop
 800187c:	371c      	adds	r7, #28
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0318 	and.w	r3, r3, #24
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80018ac:	40d9      	lsrs	r1, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	400b      	ands	r3, r1
 80018b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b6:	431a      	orrs	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	0007ffff 	.word	0x0007ffff

080018d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6093      	str	r3, [r2, #8]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001908:	d101      	bne.n	800190e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800192c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001930:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001954:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001958:	d101      	bne.n	800195e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <LL_ADC_IsEnabled+0x18>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <LL_ADC_IsEnabled+0x1a>
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d101      	bne.n	80019aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d101      	bne.n	80019d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e12e      	b.n	8001c58 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff fa43 	bl	8000e94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff67 	bl	80018f4 <LL_ADC_IsDeepPowerDownEnabled>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff4d 	bl	80018d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff82 	bl	8001944 <LL_ADC_IsInternalRegulatorEnabled>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d115      	bne.n	8001a72 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff66 	bl	800191c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a50:	4b83      	ldr	r3, [pc, #524]	; (8001c60 <HAL_ADC_Init+0x280>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	099b      	lsrs	r3, r3, #6
 8001a56:	4a83      	ldr	r2, [pc, #524]	; (8001c64 <HAL_ADC_Init+0x284>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	3301      	adds	r3, #1
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a64:	e002      	b.n	8001a6c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f9      	bne.n	8001a66 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff64 	bl	8001944 <LL_ADC_IsInternalRegulatorEnabled>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10d      	bne.n	8001a9e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a86:	f043 0210 	orr.w	r2, r3, #16
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a92:	f043 0201 	orr.w	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ff75 	bl	8001992 <LL_ADC_REG_IsConversionOngoing>
 8001aa8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f040 80c7 	bne.w	8001c46 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f040 80c3 	bne.w	8001c46 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ac8:	f043 0202 	orr.w	r2, r3, #2
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff49 	bl	800196c <LL_ADC_IsEnabled>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d110      	bne.n	8001b02 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ae0:	4861      	ldr	r0, [pc, #388]	; (8001c68 <HAL_ADC_Init+0x288>)
 8001ae2:	f7ff ff43 	bl	800196c <LL_ADC_IsEnabled>
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	4860      	ldr	r0, [pc, #384]	; (8001c6c <HAL_ADC_Init+0x28c>)
 8001aea:	f7ff ff3f 	bl	800196c <LL_ADC_IsEnabled>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4323      	orrs	r3, r4
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d105      	bne.n	8001b02 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4619      	mov	r1, r3
 8001afc:	485c      	ldr	r0, [pc, #368]	; (8001c70 <HAL_ADC_Init+0x290>)
 8001afe:	f7ff fdcf 	bl	80016a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7e5b      	ldrb	r3, [r3, #25]
 8001b06:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b0c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b12:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b18:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b20:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d106      	bne.n	8001b3e <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	3b01      	subs	r3, #1
 8001b36:	045b      	lsls	r3, r3, #17
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d009      	beq.n	8001b5a <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b52:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	4b44      	ldr	r3, [pc, #272]	; (8001c74 <HAL_ADC_Init+0x294>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	69b9      	ldr	r1, [r7, #24]
 8001b6a:	430b      	orrs	r3, r1
 8001b6c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff20 	bl	80019b8 <LL_ADC_INJ_IsConversionOngoing>
 8001b78:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d140      	bne.n	8001c02 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d13d      	bne.n	8001c02 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	7e1b      	ldrb	r3, [r3, #24]
 8001b8e:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b90:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b98:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ba8:	f023 0306 	bic.w	r3, r3, #6
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	69b9      	ldr	r1, [r7, #24]
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d118      	bne.n	8001bf2 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bca:	f023 0304 	bic.w	r3, r3, #4
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bd6:	4311      	orrs	r1, r2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bdc:	4311      	orrs	r1, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001be2:	430a      	orrs	r2, r1
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0201 	orr.w	r2, r2, #1
 8001bee:	611a      	str	r2, [r3, #16]
 8001bf0:	e007      	b.n	8001c02 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d10c      	bne.n	8001c24 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	f023 010f 	bic.w	r1, r3, #15
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	1e5a      	subs	r2, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
 8001c22:	e007      	b.n	8001c34 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 020f 	bic.w	r2, r2, #15
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c38:	f023 0303 	bic.w	r3, r3, #3
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	659a      	str	r2, [r3, #88]	; 0x58
 8001c44:	e007      	b.n	8001c56 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	f043 0210 	orr.w	r2, r3, #16
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c56:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3724      	adds	r7, #36	; 0x24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd90      	pop	{r4, r7, pc}
 8001c60:	20000004 	.word	0x20000004
 8001c64:	053e2d63 	.word	0x053e2d63
 8001c68:	42028000 	.word	0x42028000
 8001c6c:	42028100 	.word	0x42028100
 8001c70:	42028300 	.word	0x42028300
 8001c74:	fff0c007 	.word	0xfff0c007

08001c78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b0b7      	sub	sp, #220	; 0xdc
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x22>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e3c1      	b.n	800241e <HAL_ADC_ConfigChannel+0x7a6>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fe73 	bl	8001992 <LL_ADC_REG_IsConversionOngoing>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 83a6 	bne.w	8002400 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	6859      	ldr	r1, [r3, #4]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f7ff fd89 	bl	80017d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fe61 	bl	8001992 <LL_ADC_REG_IsConversionOngoing>
 8001cd0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fe6d 	bl	80019b8 <LL_ADC_INJ_IsConversionOngoing>
 8001cde:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ce2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 81c1 	bne.w	800206e <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f040 81bc 	bne.w	800206e <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cfe:	d10f      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f7ff fd90 	bl	8001830 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fd4a 	bl	80017b2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001d1e:	e00e      	b.n	8001d3e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	6819      	ldr	r1, [r3, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f7ff fd7f 	bl	8001830 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fd3a 	bl	80017b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	08db      	lsrs	r3, r3, #3
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d00a      	beq.n	8001d76 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	6919      	ldr	r1, [r3, #16]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d70:	f7ff fcca 	bl	8001708 <LL_ADC_SetOffset>
 8001d74:	e17b      	b.n	800206e <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fce7 	bl	8001750 <LL_ADC_GetOffsetChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10a      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x12a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fcdc 	bl	8001750 <LL_ADC_GetOffsetChannel>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	0e9b      	lsrs	r3, r3, #26
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	e01e      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x168>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fcd1 	bl	8001750 <LL_ADC_GetOffsetChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001dc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001dc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	e004      	b.n	8001dde <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001dd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x180>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0e9b      	lsrs	r3, r3, #26
 8001df2:	f003 031f 	and.w	r3, r3, #31
 8001df6:	e018      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1b2>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	e004      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001e20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d106      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fca0 	bl	800177c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fc84 	bl	8001750 <LL_ADC_GetOffsetChannel>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10a      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x1f0>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2101      	movs	r1, #1
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fc79 	bl	8001750 <LL_ADC_GetOffsetChannel>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	0e9b      	lsrs	r3, r3, #26
 8001e62:	f003 021f 	and.w	r2, r3, #31
 8001e66:	e01e      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x22e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fc6e 	bl	8001750 <LL_ADC_GetOffsetChannel>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001e96:	2320      	movs	r3, #32
 8001e98:	e004      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001e9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x246>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	0e9b      	lsrs	r3, r3, #26
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	e018      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x278>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ed6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001eda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	e004      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001ee6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d106      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2101      	movs	r1, #1
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fc3d 	bl	800177c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2102      	movs	r1, #2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fc21 	bl	8001750 <LL_ADC_GetOffsetChannel>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10a      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x2b6>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fc16 	bl	8001750 <LL_ADC_GetOffsetChannel>
 8001f24:	4603      	mov	r3, r0
 8001f26:	0e9b      	lsrs	r3, r3, #26
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	e01e      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x2f4>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2102      	movs	r1, #2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fc0b 	bl	8001750 <LL_ADC_GetOffsetChannel>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	e004      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001f60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d105      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x30c>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0e9b      	lsrs	r3, r3, #26
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	e016      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x33a>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001f96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001fa4:	2320      	movs	r3, #32
 8001fa6:	e004      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001fa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fac:	fab3 f383 	clz	r3, r3
 8001fb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d106      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fbdc 	bl	800177c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2103      	movs	r1, #3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fbc0 	bl	8001750 <LL_ADC_GetOffsetChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10a      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x378>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2103      	movs	r1, #3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fbb5 	bl	8001750 <LL_ADC_GetOffsetChannel>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	0e9b      	lsrs	r3, r3, #26
 8001fea:	f003 021f 	and.w	r2, r3, #31
 8001fee:	e017      	b.n	8002020 <HAL_ADC_ConfigChannel+0x3a8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2103      	movs	r1, #3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fbaa 	bl	8001750 <LL_ADC_GetOffsetChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002008:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800200a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800200c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8002012:	2320      	movs	r3, #32
 8002014:	e003      	b.n	800201e <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8002016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002028:	2b00      	cmp	r3, #0
 800202a:	d105      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x3c0>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	0e9b      	lsrs	r3, r3, #26
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	e011      	b.n	800205c <HAL_ADC_ConfigChannel+0x3e4>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002048:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800204a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002050:	2320      	movs	r3, #32
 8002052:	e003      	b.n	800205c <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8002054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800205c:	429a      	cmp	r2, r3
 800205e:	d106      	bne.n	800206e <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	2103      	movs	r1, #3
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fb87 	bl	800177c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fc7a 	bl	800196c <LL_ADC_IsEnabled>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 81c9 	bne.w	8002412 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6819      	ldr	r1, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	461a      	mov	r2, r3
 800208e:	f7ff fbfb 	bl	8001888 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	4a8f      	ldr	r2, [pc, #572]	; (80022d4 <HAL_ADC_ConfigChannel+0x65c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	f040 8131 	bne.w	8002300 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10b      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x44e>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	0e9b      	lsrs	r3, r3, #26
 80020b4:	3301      	adds	r3, #1
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	2b09      	cmp	r3, #9
 80020bc:	bf94      	ite	ls
 80020be:	2301      	movls	r3, #1
 80020c0:	2300      	movhi	r3, #0
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	e019      	b.n	80020fa <HAL_ADC_ConfigChannel+0x482>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80020d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020d6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80020d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 80020de:	2320      	movs	r3, #32
 80020e0:	e003      	b.n	80020ea <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 80020e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020e4:	fab3 f383 	clz	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	3301      	adds	r3, #1
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	2b09      	cmp	r3, #9
 80020f2:	bf94      	ite	ls
 80020f4:	2301      	movls	r3, #1
 80020f6:	2300      	movhi	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d079      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002106:	2b00      	cmp	r3, #0
 8002108:	d107      	bne.n	800211a <HAL_ADC_ConfigChannel+0x4a2>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	0e9b      	lsrs	r3, r3, #26
 8002110:	3301      	adds	r3, #1
 8002112:	069b      	lsls	r3, r3, #26
 8002114:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002118:	e015      	b.n	8002146 <HAL_ADC_ConfigChannel+0x4ce>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800212a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800212c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002132:	2320      	movs	r3, #32
 8002134:	e003      	b.n	800213e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002138:	fab3 f383 	clz	r3, r3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	3301      	adds	r3, #1
 8002140:	069b      	lsls	r3, r3, #26
 8002142:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x4ee>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	0e9b      	lsrs	r3, r3, #26
 8002158:	3301      	adds	r3, #1
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	2101      	movs	r1, #1
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	e017      	b.n	8002196 <HAL_ADC_ConfigChannel+0x51e>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002176:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 800217e:	2320      	movs	r3, #32
 8002180:	e003      	b.n	800218a <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	3301      	adds	r3, #1
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	ea42 0103 	orr.w	r1, r2, r3
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10a      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x544>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	0e9b      	lsrs	r3, r3, #26
 80021ac:	3301      	adds	r3, #1
 80021ae:	f003 021f 	and.w	r2, r3, #31
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	e018      	b.n	80021ee <HAL_ADC_ConfigChannel+0x576>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c4:	fa93 f3a3 	rbit	r3, r3
 80021c8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80021ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80021ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80021d4:	2320      	movs	r3, #32
 80021d6:	e003      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80021d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021da:	fab3 f383 	clz	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	3301      	adds	r3, #1
 80021e2:	f003 021f 	and.w	r2, r3, #31
 80021e6:	4613      	mov	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ee:	430b      	orrs	r3, r1
 80021f0:	e081      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d107      	bne.n	800220e <HAL_ADC_ConfigChannel+0x596>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	0e9b      	lsrs	r3, r3, #26
 8002204:	3301      	adds	r3, #1
 8002206:	069b      	lsls	r3, r3, #26
 8002208:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800220c:	e015      	b.n	800223a <HAL_ADC_ConfigChannel+0x5c2>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8002226:	2320      	movs	r3, #32
 8002228:	e003      	b.n	8002232 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	3301      	adds	r3, #1
 8002234:	069b      	lsls	r3, r3, #26
 8002236:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_ADC_ConfigChannel+0x5e2>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	0e9b      	lsrs	r3, r3, #26
 800224c:	3301      	adds	r3, #1
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	2101      	movs	r1, #1
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	e017      	b.n	800228a <HAL_ADC_ConfigChannel+0x612>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	61fb      	str	r3, [r7, #28]
  return result;
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002272:	2320      	movs	r3, #32
 8002274:	e003      	b.n	800227e <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	fab3 f383 	clz	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	3301      	adds	r3, #1
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	2101      	movs	r1, #1
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	ea42 0103 	orr.w	r1, r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10d      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x63e>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	0e9b      	lsrs	r3, r3, #26
 80022a0:	3301      	adds	r3, #1
 80022a2:	f003 021f 	and.w	r2, r3, #31
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	3b1e      	subs	r3, #30
 80022ae:	051b      	lsls	r3, r3, #20
 80022b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022b4:	e01e      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x67c>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	613b      	str	r3, [r7, #16]
  return result;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d104      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80022ce:	2320      	movs	r3, #32
 80022d0:	e006      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x668>
 80022d2:	bf00      	nop
 80022d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	fab3 f383 	clz	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	3301      	adds	r3, #1
 80022e2:	f003 021f 	and.w	r2, r3, #31
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	3b1e      	subs	r3, #30
 80022ee:	051b      	lsls	r3, r3, #20
 80022f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022f4:	430b      	orrs	r3, r1
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	6892      	ldr	r2, [r2, #8]
 80022fa:	4619      	mov	r1, r3
 80022fc:	f7ff fa98 	bl	8001830 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b48      	ldr	r3, [pc, #288]	; (8002428 <HAL_ADC_ConfigChannel+0x7b0>)
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8082 	beq.w	8002412 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800230e:	4847      	ldr	r0, [pc, #284]	; (800242c <HAL_ADC_ConfigChannel+0x7b4>)
 8002310:	f7ff f9ec 	bl	80016ec <LL_ADC_GetCommonPathInternalCh>
 8002314:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002318:	4845      	ldr	r0, [pc, #276]	; (8002430 <HAL_ADC_ConfigChannel+0x7b8>)
 800231a:	f7ff fb27 	bl	800196c <LL_ADC_IsEnabled>
 800231e:	4604      	mov	r4, r0
 8002320:	4844      	ldr	r0, [pc, #272]	; (8002434 <HAL_ADC_ConfigChannel+0x7bc>)
 8002322:	f7ff fb23 	bl	800196c <LL_ADC_IsEnabled>
 8002326:	4603      	mov	r3, r0
 8002328:	4323      	orrs	r3, r4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d15e      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a41      	ldr	r2, [pc, #260]	; (8002438 <HAL_ADC_ConfigChannel+0x7c0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d127      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002338:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800233c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d121      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a39      	ldr	r2, [pc, #228]	; (8002430 <HAL_ADC_ConfigChannel+0x7b8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d161      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800234e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002352:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002356:	4619      	mov	r1, r3
 8002358:	4834      	ldr	r0, [pc, #208]	; (800242c <HAL_ADC_ConfigChannel+0x7b4>)
 800235a:	f7ff f9b4 	bl	80016c6 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800235e:	4b37      	ldr	r3, [pc, #220]	; (800243c <HAL_ADC_ConfigChannel+0x7c4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	099b      	lsrs	r3, r3, #6
 8002364:	4a36      	ldr	r2, [pc, #216]	; (8002440 <HAL_ADC_ConfigChannel+0x7c8>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	099b      	lsrs	r3, r3, #6
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002376:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002378:	e002      	b.n	8002380 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	3b01      	subs	r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f9      	bne.n	800237a <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002386:	e044      	b.n	8002412 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a2d      	ldr	r2, [pc, #180]	; (8002444 <HAL_ADC_ConfigChannel+0x7cc>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d113      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002392:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002396:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10d      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a23      	ldr	r2, [pc, #140]	; (8002430 <HAL_ADC_ConfigChannel+0x7b8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d134      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b0:	4619      	mov	r1, r3
 80023b2:	481e      	ldr	r0, [pc, #120]	; (800242c <HAL_ADC_ConfigChannel+0x7b4>)
 80023b4:	f7ff f987 	bl	80016c6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023b8:	e02b      	b.n	8002412 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a22      	ldr	r2, [pc, #136]	; (8002448 <HAL_ADC_ConfigChannel+0x7d0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d126      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d120      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a16      	ldr	r2, [pc, #88]	; (8002430 <HAL_ADC_ConfigChannel+0x7b8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d11b      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023e2:	4619      	mov	r1, r3
 80023e4:	4811      	ldr	r0, [pc, #68]	; (800242c <HAL_ADC_ConfigChannel+0x7b4>)
 80023e6:	f7ff f96e 	bl	80016c6 <LL_ADC_SetCommonPathInternalCh>
 80023ea:	e012      	b.n	8002412 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	f043 0220 	orr.w	r2, r3, #32
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80023fe:	e008      	b.n	8002412 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	f043 0220 	orr.w	r2, r3, #32
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800241a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800241e:	4618      	mov	r0, r3
 8002420:	37dc      	adds	r7, #220	; 0xdc
 8002422:	46bd      	mov	sp, r7
 8002424:	bd90      	pop	{r4, r7, pc}
 8002426:	bf00      	nop
 8002428:	80080000 	.word	0x80080000
 800242c:	42028300 	.word	0x42028300
 8002430:	42028000 	.word	0x42028000
 8002434:	42028100 	.word	0x42028100
 8002438:	c7520000 	.word	0xc7520000
 800243c:	20000004 	.word	0x20000004
 8002440:	053e2d63 	.word	0x053e2d63
 8002444:	cb840000 	.word	0xcb840000
 8002448:	80000001 	.word	0x80000001

0800244c <LL_ADC_IsEnabled>:
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <LL_ADC_IsEnabled+0x18>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <LL_ADC_IsEnabled+0x1a>
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <LL_ADC_REG_IsConversionOngoing>:
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b04      	cmp	r3, #4
 8002484:	d101      	bne.n	800248a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b0a1      	sub	sp, #132	; 0x84
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e089      	b.n	80025ca <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80024be:	2300      	movs	r3, #0
 80024c0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80024c2:	2300      	movs	r3, #0
 80024c4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a42      	ldr	r2, [pc, #264]	; (80025d4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d102      	bne.n	80024d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024d0:	4b41      	ldr	r3, [pc, #260]	; (80025d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	e001      	b.n	80024da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10b      	bne.n	80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e4:	f043 0220 	orr.w	r2, r3, #32
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e068      	b.n	80025ca <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff ffb9 	bl	8002472 <LL_ADC_REG_IsConversionOngoing>
 8002500:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff ffb3 	bl	8002472 <LL_ADC_REG_IsConversionOngoing>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d14a      	bne.n	80025a8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002514:	2b00      	cmp	r3, #0
 8002516:	d147      	bne.n	80025a8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002518:	4b30      	ldr	r3, [pc, #192]	; (80025dc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800251a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d027      	beq.n	8002574 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002524:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002536:	035b      	lsls	r3, r3, #13
 8002538:	430b      	orrs	r3, r1
 800253a:	431a      	orrs	r2, r3
 800253c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800253e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002540:	4824      	ldr	r0, [pc, #144]	; (80025d4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002542:	f7ff ff83 	bl	800244c <LL_ADC_IsEnabled>
 8002546:	4604      	mov	r4, r0
 8002548:	4823      	ldr	r0, [pc, #140]	; (80025d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800254a:	f7ff ff7f 	bl	800244c <LL_ADC_IsEnabled>
 800254e:	4603      	mov	r3, r0
 8002550:	4323      	orrs	r3, r4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d132      	bne.n	80025bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800255e:	f023 030f 	bic.w	r3, r3, #15
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	6811      	ldr	r1, [r2, #0]
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	6892      	ldr	r2, [r2, #8]
 800256a:	430a      	orrs	r2, r1
 800256c:	431a      	orrs	r2, r3
 800256e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002570:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002572:	e023      	b.n	80025bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800257c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800257e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002580:	4814      	ldr	r0, [pc, #80]	; (80025d4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002582:	f7ff ff63 	bl	800244c <LL_ADC_IsEnabled>
 8002586:	4604      	mov	r4, r0
 8002588:	4813      	ldr	r0, [pc, #76]	; (80025d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800258a:	f7ff ff5f 	bl	800244c <LL_ADC_IsEnabled>
 800258e:	4603      	mov	r3, r0
 8002590:	4323      	orrs	r3, r4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d112      	bne.n	80025bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800259e:	f023 030f 	bic.w	r3, r3, #15
 80025a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80025a4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025a6:	e009      	b.n	80025bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	f043 0220 	orr.w	r2, r3, #32
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80025ba:	e000      	b.n	80025be <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80025c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3784      	adds	r7, #132	; 0x84
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd90      	pop	{r4, r7, pc}
 80025d2:	bf00      	nop
 80025d4:	42028000 	.word	0x42028000
 80025d8:	42028100 	.word	0x42028100
 80025dc:	42028300 	.word	0x42028300

080025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800260c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4907      	ldr	r1, [pc, #28]	; (800267c <__NVIC_EnableIRQ+0x38>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	0152      	lsls	r2, r2, #5
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0152      	lsls	r2, r2, #5
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	bf28      	it	cs
 80026f2:	2303      	movcs	r3, #3
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3303      	adds	r3, #3
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b04      	subs	r3, #4
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
         );
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800274c:	d301      	bcc.n	8002752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <SysTick_Config+0x40>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275a:	2107      	movs	r1, #7
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f7ff ff8e 	bl	8002680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <SysTick_Config+0x40>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <SysTick_Config+0x40>)
 800276c:	2207      	movs	r2, #7
 800276e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000e010 	.word	0xe000e010

08002780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff29 	bl	80025e0 <__NVIC_SetPriorityGrouping>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027a4:	f7ff ff40 	bl	8002628 <__NVIC_GetPriorityGrouping>
 80027a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	6978      	ldr	r0, [r7, #20]
 80027b0:	f7ff ff90 	bl	80026d4 <NVIC_EncodePriority>
 80027b4:	4602      	mov	r2, r0
 80027b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff5f 	bl	8002680 <__NVIC_SetPriority>
}
 80027c2:	bf00      	nop
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff33 	bl	8002644 <__NVIC_EnableIRQ>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ffa4 	bl	800273c <SysTick_Config>
 80027f4:	4603      	mov	r3, r0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d008      	beq.n	8002828 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2204      	movs	r2, #4
 800281a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e040      	b.n	80028aa <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 020e 	bic.w	r2, r2, #14
 8002836:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002842:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002846:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285c:	f003 021c 	and.w	r2, r3, #28
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002864:	2101      	movs	r1, #1
 8002866:	fa01 f202 	lsl.w	r2, r1, r2
 800286a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002874:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00c      	beq.n	8002898 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800288c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002896:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d005      	beq.n	80028da <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2204      	movs	r2, #4
 80028d2:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
 80028d8:	e047      	b.n	800296a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 020e 	bic.w	r2, r2, #14
 80028e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0201 	bic.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002908:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	f003 021c 	and.w	r2, r3, #28
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002916:	2101      	movs	r1, #1
 8002918:	fa01 f202 	lsl.w	r2, r1, r2
 800291c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002926:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00c      	beq.n	800294a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800293e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002948:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	4798      	blx	r3
    }
  }
  return status;
 800296a:	7bfb      	ldrb	r3, [r7, #15]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002982:	e158      	b.n	8002c36 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2101      	movs	r1, #1
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	4013      	ands	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 814a 	beq.w	8002c30 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d005      	beq.n	80029b4 <HAL_GPIO_Init+0x40>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d130      	bne.n	8002a16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	2203      	movs	r2, #3
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029ea:	2201      	movs	r2, #1
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	f003 0201 	and.w	r2, r3, #1
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d017      	beq.n	8002a52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4013      	ands	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d123      	bne.n	8002aa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	08da      	lsrs	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3208      	adds	r2, #8
 8002a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	220f      	movs	r2, #15
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	08da      	lsrs	r2, r3, #3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3208      	adds	r2, #8
 8002aa0:	6939      	ldr	r1, [r7, #16]
 8002aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4013      	ands	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0203 	and.w	r2, r3, #3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80a4 	beq.w	8002c30 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002ae8:	4a5a      	ldr	r2, [pc, #360]	; (8002c54 <HAL_GPIO_Init+0x2e0>)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	089b      	lsrs	r3, r3, #2
 8002aee:	3318      	adds	r3, #24
 8002af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	220f      	movs	r2, #15
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a52      	ldr	r2, [pc, #328]	; (8002c58 <HAL_GPIO_Init+0x2e4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d025      	beq.n	8002b60 <HAL_GPIO_Init+0x1ec>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a51      	ldr	r2, [pc, #324]	; (8002c5c <HAL_GPIO_Init+0x2e8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d01f      	beq.n	8002b5c <HAL_GPIO_Init+0x1e8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a50      	ldr	r2, [pc, #320]	; (8002c60 <HAL_GPIO_Init+0x2ec>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d019      	beq.n	8002b58 <HAL_GPIO_Init+0x1e4>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a4f      	ldr	r2, [pc, #316]	; (8002c64 <HAL_GPIO_Init+0x2f0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d013      	beq.n	8002b54 <HAL_GPIO_Init+0x1e0>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a4e      	ldr	r2, [pc, #312]	; (8002c68 <HAL_GPIO_Init+0x2f4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00d      	beq.n	8002b50 <HAL_GPIO_Init+0x1dc>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a4d      	ldr	r2, [pc, #308]	; (8002c6c <HAL_GPIO_Init+0x2f8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d007      	beq.n	8002b4c <HAL_GPIO_Init+0x1d8>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a4c      	ldr	r2, [pc, #304]	; (8002c70 <HAL_GPIO_Init+0x2fc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d101      	bne.n	8002b48 <HAL_GPIO_Init+0x1d4>
 8002b44:	2306      	movs	r3, #6
 8002b46:	e00c      	b.n	8002b62 <HAL_GPIO_Init+0x1ee>
 8002b48:	2307      	movs	r3, #7
 8002b4a:	e00a      	b.n	8002b62 <HAL_GPIO_Init+0x1ee>
 8002b4c:	2305      	movs	r3, #5
 8002b4e:	e008      	b.n	8002b62 <HAL_GPIO_Init+0x1ee>
 8002b50:	2304      	movs	r3, #4
 8002b52:	e006      	b.n	8002b62 <HAL_GPIO_Init+0x1ee>
 8002b54:	2303      	movs	r3, #3
 8002b56:	e004      	b.n	8002b62 <HAL_GPIO_Init+0x1ee>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e002      	b.n	8002b62 <HAL_GPIO_Init+0x1ee>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <HAL_GPIO_Init+0x1ee>
 8002b60:	2300      	movs	r3, #0
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	f002 0203 	and.w	r2, r2, #3
 8002b68:	00d2      	lsls	r2, r2, #3
 8002b6a:	4093      	lsls	r3, r2
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002b72:	4938      	ldr	r1, [pc, #224]	; (8002c54 <HAL_GPIO_Init+0x2e0>)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	3318      	adds	r3, #24
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b80:	4b34      	ldr	r3, [pc, #208]	; (8002c54 <HAL_GPIO_Init+0x2e0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ba4:	4a2b      	ldr	r2, [pc, #172]	; (8002c54 <HAL_GPIO_Init+0x2e0>)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002baa:	4b2a      	ldr	r3, [pc, #168]	; (8002c54 <HAL_GPIO_Init+0x2e0>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bce:	4a21      	ldr	r2, [pc, #132]	; (8002c54 <HAL_GPIO_Init+0x2e0>)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bd4:	4b1f      	ldr	r3, [pc, #124]	; (8002c54 <HAL_GPIO_Init+0x2e0>)
 8002bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4013      	ands	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bfa:	4a16      	ldr	r2, [pc, #88]	; (8002c54 <HAL_GPIO_Init+0x2e0>)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8002c02:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <HAL_GPIO_Init+0x2e0>)
 8002c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4013      	ands	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c28:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <HAL_GPIO_Init+0x2e0>)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	3301      	adds	r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f47f ae9f 	bne.w	8002984 <HAL_GPIO_Init+0x10>
  }
}
 8002c46:	bf00      	nop
 8002c48:	bf00      	nop
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	4002f400 	.word	0x4002f400
 8002c58:	42020000 	.word	0x42020000
 8002c5c:	42020400 	.word	0x42020400
 8002c60:	42020800 	.word	0x42020800
 8002c64:	42020c00 	.word	0x42020c00
 8002c68:	42021000 	.word	0x42021000
 8002c6c:	42021400 	.word	0x42021400
 8002c70:	42021800 	.word	0x42021800

08002c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
 8002c80:	4613      	mov	r3, r2
 8002c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c84:	787b      	ldrb	r3, [r7, #1]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c90:	e002      	b.n	8002c98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca6:	b08b      	sub	sp, #44	; 0x2c
 8002ca8:	af06      	add	r7, sp, #24
 8002caa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e0cb      	b.n	8002e4e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fe fa28 	bl	8001120 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f004 f9f1 	bl	80070c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	73fb      	strb	r3, [r7, #15]
 8002ce6:	e040      	b.n	8002d6a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	440b      	add	r3, r1
 8002d22:	3303      	adds	r3, #3
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d28:	7bfa      	ldrb	r2, [r7, #15]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	440b      	add	r3, r1
 8002d36:	3338      	adds	r3, #56	; 0x38
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	440b      	add	r3, r1
 8002d4a:	333c      	adds	r3, #60	; 0x3c
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3340      	adds	r3, #64	; 0x40
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	3301      	adds	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d3b9      	bcc.n	8002ce8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	e044      	b.n	8002e04 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d7a:	7bfa      	ldrb	r2, [r7, #15]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	440b      	add	r3, r1
 8002d88:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d90:	7bfa      	ldrb	r2, [r7, #15]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002da2:	7bfa      	ldrb	r2, [r7, #15]
 8002da4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002da6:	7bfa      	ldrb	r2, [r7, #15]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	440b      	add	r3, r1
 8002db4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dbc:	7bfa      	ldrb	r2, [r7, #15]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	440b      	add	r3, r1
 8002dca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dd2:	7bfa      	ldrb	r2, [r7, #15]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	440b      	add	r3, r1
 8002de0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002de8:	7bfa      	ldrb	r2, [r7, #15]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	440b      	add	r3, r1
 8002df6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	3301      	adds	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d3b5      	bcc.n	8002d7a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	603b      	str	r3, [r7, #0]
 8002e14:	687e      	ldr	r6, [r7, #4]
 8002e16:	466d      	mov	r5, sp
 8002e18:	f106 0410 	add.w	r4, r6, #16
 8002e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	602b      	str	r3, [r5, #0]
 8002e24:	1d33      	adds	r3, r6, #4
 8002e26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e28:	6838      	ldr	r0, [r7, #0]
 8002e2a:	f004 f966 	bl	80070fa <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d102      	bne.n	8002e4c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f805 	bl	8002e56 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e56 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b085      	sub	sp, #20
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eba:	6013      	str	r3, [r2, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40007000 	.word	0x40007000

08002ecc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40007000 	.word	0x40007000

08002ee8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002ef0:	4b27      	ldr	r3, [pc, #156]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ef8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002efa:	f000 f861 	bl	8002fc0 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f04:	d101      	bne.n	8002f0a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e03e      	b.n	8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002f0a:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f16:	d101      	bne.n	8002f1c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e035      	b.n	8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d101      	bne.n	8002f28 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	e02f      	b.n	8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002f30:	4917      	ldr	r1, [pc, #92]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002f38:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	4a16      	ldr	r2, [pc, #88]	; (8002f98 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	09db      	lsrs	r3, r3, #7
 8002f46:	2232      	movs	r2, #50	; 0x32
 8002f48:	fb02 f303 	mul.w	r3, r2, r3
 8002f4c:	4a13      	ldr	r2, [pc, #76]	; (8002f9c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	08db      	lsrs	r3, r3, #3
 8002f54:	3301      	adds	r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f58:	e002      	b.n	8002f60 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6c:	d102      	bne.n	8002f74 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f2      	bne.n	8002f5a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f80:	d101      	bne.n	8002f86 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e000      	b.n	8002f88 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40007000 	.word	0x40007000
 8002f94:	20000004 	.word	0x20000004
 8002f98:	0a7c5ac5 	.word	0x0a7c5ac5
 8002f9c:	cccccccd 	.word	0xcccccccd

08002fa0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <HAL_PWREx_EnableVddIO2+0x1c>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <HAL_PWREx_EnableVddIO2+0x1c>)
 8002faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fae:	6053      	str	r3, [r2, #4]
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40007000 	.word	0x40007000

08002fc0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	e00a      	b.n	8002ff4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d103      	bne.n	8002ff0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	e001      	b.n	8002ff4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002ff4:	687b      	ldr	r3, [r7, #4]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40007000 	.word	0x40007000

08003008 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	f000 bcc2 	b.w	80039a0 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800301c:	4b99      	ldr	r3, [pc, #612]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003026:	4b97      	ldr	r3, [pc, #604]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80e9 	beq.w	8003210 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <HAL_RCC_OscConfig+0x4a>
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b0c      	cmp	r3, #12
 8003048:	f040 8083 	bne.w	8003152 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d17f      	bne.n	8003152 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003052:	4b8c      	ldr	r3, [pc, #560]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d006      	beq.n	800306c <HAL_RCC_OscConfig+0x64>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d102      	bne.n	800306c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	f000 bc9a 	b.w	80039a0 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003070:	4b84      	ldr	r3, [pc, #528]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d004      	beq.n	8003086 <HAL_RCC_OscConfig+0x7e>
 800307c:	4b81      	ldr	r3, [pc, #516]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003084:	e005      	b.n	8003092 <HAL_RCC_OscConfig+0x8a>
 8003086:	4b7f      	ldr	r3, [pc, #508]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 8003088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003092:	4293      	cmp	r3, r2
 8003094:	d224      	bcs.n	80030e0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fe9c 	bl	8003dd8 <RCC_SetFlashLatencyFromMSIRange>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f000 bc7a 	b.w	80039a0 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ac:	4b75      	ldr	r3, [pc, #468]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a74      	ldr	r2, [pc, #464]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80030b2:	f043 0308 	orr.w	r3, r3, #8
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	4b72      	ldr	r3, [pc, #456]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	496f      	ldr	r1, [pc, #444]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ca:	4b6e      	ldr	r3, [pc, #440]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	021b      	lsls	r3, r3, #8
 80030d8:	496a      	ldr	r1, [pc, #424]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	604b      	str	r3, [r1, #4]
 80030de:	e026      	b.n	800312e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e0:	4b68      	ldr	r3, [pc, #416]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a67      	ldr	r2, [pc, #412]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80030e6:	f043 0308 	orr.w	r3, r3, #8
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4b65      	ldr	r3, [pc, #404]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	4962      	ldr	r1, [pc, #392]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030fe:	4b61      	ldr	r3, [pc, #388]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	495d      	ldr	r1, [pc, #372]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 800310e:	4313      	orrs	r3, r2
 8003110:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10a      	bne.n	800312e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fe5b 	bl	8003dd8 <RCC_SetFlashLatencyFromMSIRange>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	f000 bc39 	b.w	80039a0 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800312e:	f000 fe17 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003132:	4603      	mov	r3, r0
 8003134:	4a54      	ldr	r2, [pc, #336]	; (8003288 <HAL_RCC_OscConfig+0x280>)
 8003136:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003138:	4b54      	ldr	r3, [pc, #336]	; (800328c <HAL_RCC_OscConfig+0x284>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe fa53 	bl	80015e8 <HAL_InitTick>
 8003142:	4603      	mov	r3, r0
 8003144:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d060      	beq.n	800320e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	f000 bc27 	b.w	80039a0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d039      	beq.n	80031ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800315a:	4b4a      	ldr	r3, [pc, #296]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a49      	ldr	r2, [pc, #292]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003166:	f7fe fa8f 	bl	8001688 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800316c:	e00f      	b.n	800318e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800316e:	f7fe fa8b 	bl	8001688 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d908      	bls.n	800318e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800317c:	4b41      	ldr	r3, [pc, #260]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d102      	bne.n	800318e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	f000 bc09 	b.w	80039a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800318e:	4b3d      	ldr	r3, [pc, #244]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0e9      	beq.n	800316e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800319a:	4b3a      	ldr	r3, [pc, #232]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a39      	ldr	r2, [pc, #228]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80031a0:	f043 0308 	orr.w	r3, r3, #8
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b37      	ldr	r3, [pc, #220]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	4934      	ldr	r1, [pc, #208]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031b8:	4b32      	ldr	r3, [pc, #200]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	492f      	ldr	r1, [pc, #188]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	604b      	str	r3, [r1, #4]
 80031cc:	e020      	b.n	8003210 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031ce:	4b2d      	ldr	r3, [pc, #180]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a2c      	ldr	r2, [pc, #176]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031da:	f7fe fa55 	bl	8001688 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031e0:	e00e      	b.n	8003200 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031e2:	f7fe fa51 	bl	8001688 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d907      	bls.n	8003200 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031f0:	4b24      	ldr	r3, [pc, #144]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e3cf      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003200:	4b20      	ldr	r3, [pc, #128]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1ea      	bne.n	80031e2 <HAL_RCC_OscConfig+0x1da>
 800320c:	e000      	b.n	8003210 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800320e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d07e      	beq.n	800331a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	2b08      	cmp	r3, #8
 8003220:	d005      	beq.n	800322e <HAL_RCC_OscConfig+0x226>
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b0c      	cmp	r3, #12
 8003226:	d10e      	bne.n	8003246 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2b03      	cmp	r3, #3
 800322c:	d10b      	bne.n	8003246 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d06e      	beq.n	8003318 <HAL_RCC_OscConfig+0x310>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d16a      	bne.n	8003318 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e3ac      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324e:	d106      	bne.n	800325e <HAL_RCC_OscConfig+0x256>
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0b      	ldr	r2, [pc, #44]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 8003256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	e024      	b.n	80032a8 <HAL_RCC_OscConfig+0x2a0>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003266:	d113      	bne.n	8003290 <HAL_RCC_OscConfig+0x288>
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a05      	ldr	r2, [pc, #20]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 800326e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a02      	ldr	r2, [pc, #8]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 800327a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	e012      	b.n	80032a8 <HAL_RCC_OscConfig+0x2a0>
 8003282:	bf00      	nop
 8003284:	40021000 	.word	0x40021000
 8003288:	20000004 	.word	0x20000004
 800328c:	20000008 	.word	0x20000008
 8003290:	4b8b      	ldr	r3, [pc, #556]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a8a      	ldr	r2, [pc, #552]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 8003296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	4b88      	ldr	r3, [pc, #544]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a87      	ldr	r2, [pc, #540]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 80032a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d019      	beq.n	80032e4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fe f9ea 	bl	8001688 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b6:	e00e      	b.n	80032d6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fe f9e6 	bl	8001688 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	; 0x64
 80032c4:	d907      	bls.n	80032d6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032c6:	4b7e      	ldr	r3, [pc, #504]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e364      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d6:	4b7a      	ldr	r3, [pc, #488]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0ea      	beq.n	80032b8 <HAL_RCC_OscConfig+0x2b0>
 80032e2:	e01a      	b.n	800331a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fe f9d0 	bl	8001688 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ea:	e00e      	b.n	800330a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fe f9cc 	bl	8001688 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d907      	bls.n	800330a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032fa:	4b71      	ldr	r3, [pc, #452]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e34a      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800330a:	4b6d      	ldr	r3, [pc, #436]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1ea      	bne.n	80032ec <HAL_RCC_OscConfig+0x2e4>
 8003316:	e000      	b.n	800331a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d06c      	beq.n	8003400 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b04      	cmp	r3, #4
 800332a:	d005      	beq.n	8003338 <HAL_RCC_OscConfig+0x330>
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b0c      	cmp	r3, #12
 8003330:	d119      	bne.n	8003366 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d116      	bne.n	8003366 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003338:	4b61      	ldr	r3, [pc, #388]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_OscConfig+0x348>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e327      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003350:	4b5b      	ldr	r3, [pc, #364]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	4958      	ldr	r1, [pc, #352]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003364:	e04c      	b.n	8003400 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d029      	beq.n	80033c2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800336e:	4b54      	ldr	r3, [pc, #336]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a53      	ldr	r2, [pc, #332]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fe f985 	bl	8001688 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003380:	e00e      	b.n	80033a0 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003382:	f7fe f981 	bl	8001688 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d907      	bls.n	80033a0 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003390:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e2ff      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a0:	4b47      	ldr	r3, [pc, #284]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ea      	beq.n	8003382 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ac:	4b44      	ldr	r3, [pc, #272]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	061b      	lsls	r3, r3, #24
 80033ba:	4941      	ldr	r1, [pc, #260]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]
 80033c0:	e01e      	b.n	8003400 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c2:	4b3f      	ldr	r3, [pc, #252]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a3e      	ldr	r2, [pc, #248]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 80033c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7fe f95b 	bl	8001688 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d4:	e00e      	b.n	80033f4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d6:	f7fe f957 	bl	8001688 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d907      	bls.n	80033f4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e4:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e2d5      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033f4:	4b32      	ldr	r3, [pc, #200]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1ea      	bne.n	80033d6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d062      	beq.n	80034d2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d038      	beq.n	8003486 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d108      	bne.n	800342e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800341c:	4b28      	ldr	r3, [pc, #160]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 800341e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003422:	4a27      	ldr	r2, [pc, #156]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 8003424:	f023 0310 	bic.w	r3, r3, #16
 8003428:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800342c:	e007      	b.n	800343e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800342e:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 8003430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003434:	4a22      	ldr	r2, [pc, #136]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 8003436:	f043 0310 	orr.w	r3, r3, #16
 800343a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800343e:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 8003440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003444:	4a1e      	ldr	r2, [pc, #120]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344e:	f7fe f91b 	bl	8001688 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003454:	e00f      	b.n	8003476 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003456:	f7fe f917 	bl	8001688 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b07      	cmp	r3, #7
 8003462:	d908      	bls.n	8003476 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003464:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 8003466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e294      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003476:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 8003478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0e8      	beq.n	8003456 <HAL_RCC_OscConfig+0x44e>
 8003484:	e025      	b.n	80034d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003486:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 8003488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800348c:	4a0c      	ldr	r2, [pc, #48]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 800348e:	f023 0301 	bic.w	r3, r3, #1
 8003492:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003496:	f7fe f8f7 	bl	8001688 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800349c:	e012      	b.n	80034c4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800349e:	f7fe f8f3 	bl	8001688 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b07      	cmp	r3, #7
 80034aa:	d90b      	bls.n	80034c4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034ac:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <HAL_RCC_OscConfig+0x4b8>)
 80034ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d004      	beq.n	80034c4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e270      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034c4:	4ba8      	ldr	r3, [pc, #672]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 80034c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e5      	bne.n	800349e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 812d 	beq.w	800373a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e0:	2300      	movs	r3, #0
 80034e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034e4:	4ba0      	ldr	r3, [pc, #640]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10d      	bne.n	800350c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f0:	4b9d      	ldr	r3, [pc, #628]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f4:	4a9c      	ldr	r2, [pc, #624]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 80034f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fa:	6593      	str	r3, [r2, #88]	; 0x58
 80034fc:	4b9a      	ldr	r3, [pc, #616]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003508:	2301      	movs	r3, #1
 800350a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800350c:	4b97      	ldr	r3, [pc, #604]	; (800376c <HAL_RCC_OscConfig+0x764>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d11e      	bne.n	8003556 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003518:	4b94      	ldr	r3, [pc, #592]	; (800376c <HAL_RCC_OscConfig+0x764>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a93      	ldr	r2, [pc, #588]	; (800376c <HAL_RCC_OscConfig+0x764>)
 800351e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003522:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003524:	f7fe f8b0 	bl	8001688 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800352a:	e00e      	b.n	800354a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352c:	f7fe f8ac 	bl	8001688 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d907      	bls.n	800354a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800353a:	4b8c      	ldr	r3, [pc, #560]	; (800376c <HAL_RCC_OscConfig+0x764>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e22a      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800354a:	4b88      	ldr	r3, [pc, #544]	; (800376c <HAL_RCC_OscConfig+0x764>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0ea      	beq.n	800352c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d01f      	beq.n	80035a2 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	d010      	beq.n	8003590 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800356e:	4b7e      	ldr	r3, [pc, #504]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003574:	4a7c      	ldr	r2, [pc, #496]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 8003576:	f043 0304 	orr.w	r3, r3, #4
 800357a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800357e:	4b7a      	ldr	r3, [pc, #488]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 8003580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003584:	4a78      	ldr	r2, [pc, #480]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800358e:	e018      	b.n	80035c2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003590:	4b75      	ldr	r3, [pc, #468]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003596:	4a74      	ldr	r2, [pc, #464]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035a0:	e00f      	b.n	80035c2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80035a2:	4b71      	ldr	r3, [pc, #452]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a8:	4a6f      	ldr	r2, [pc, #444]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80035b2:	4b6d      	ldr	r3, [pc, #436]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b8:	4a6b      	ldr	r2, [pc, #428]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 80035ba:	f023 0304 	bic.w	r3, r3, #4
 80035be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d068      	beq.n	800369c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ca:	f7fe f85d 	bl	8001688 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d0:	e011      	b.n	80035f6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d2:	f7fe f859 	bl	8001688 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d908      	bls.n	80035f6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e4:	4b60      	ldr	r3, [pc, #384]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e1d4      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f6:	4b5c      	ldr	r3, [pc, #368]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0e6      	beq.n	80035d2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360c:	2b00      	cmp	r3, #0
 800360e:	d022      	beq.n	8003656 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003610:	4b55      	ldr	r3, [pc, #340]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 8003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003616:	4a54      	ldr	r2, [pc, #336]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 8003618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800361c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003620:	e011      	b.n	8003646 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003622:	f7fe f831 	bl	8001688 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003630:	4293      	cmp	r3, r2
 8003632:	d908      	bls.n	8003646 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003634:	4b4c      	ldr	r3, [pc, #304]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e1ac      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003646:	4b48      	ldr	r3, [pc, #288]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0e6      	beq.n	8003622 <HAL_RCC_OscConfig+0x61a>
 8003654:	e068      	b.n	8003728 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003656:	4b44      	ldr	r3, [pc, #272]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365c:	4a42      	ldr	r2, [pc, #264]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 800365e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003666:	e011      	b.n	800368c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7fe f80e 	bl	8001688 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d908      	bls.n	800368c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800367a:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e189      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800368c:	4b36      	ldr	r3, [pc, #216]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e6      	bne.n	8003668 <HAL_RCC_OscConfig+0x660>
 800369a:	e045      	b.n	8003728 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fd fff4 	bl	8001688 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036a2:	e011      	b.n	80036c8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fd fff0 	bl	8001688 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d908      	bls.n	80036c8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036b6:	4b2c      	ldr	r3, [pc, #176]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e16b      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036c8:	4b27      	ldr	r3, [pc, #156]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1e6      	bne.n	80036a4 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80036d6:	4b24      	ldr	r3, [pc, #144]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d021      	beq.n	8003728 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80036e4:	4b20      	ldr	r3, [pc, #128]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ea:	4a1f      	ldr	r2, [pc, #124]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 80036ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80036f4:	e011      	b.n	800371a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fd ffc7 	bl	8001688 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f241 3288 	movw	r2, #5000	; 0x1388
 8003704:	4293      	cmp	r3, r2
 8003706:	d908      	bls.n	800371a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003708:	4b17      	ldr	r3, [pc, #92]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e142      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 800371c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e6      	bne.n	80036f6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003728:	7ffb      	ldrb	r3, [r7, #31]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d105      	bne.n	800373a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372e:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 8003730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003732:	4a0d      	ldr	r2, [pc, #52]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 8003734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003738:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b00      	cmp	r3, #0
 8003744:	d04f      	beq.n	80037e6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	2b00      	cmp	r3, #0
 800374c:	d028      	beq.n	80037a0 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800374e:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 8003750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003754:	4a04      	ldr	r2, [pc, #16]	; (8003768 <HAL_RCC_OscConfig+0x760>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fd ff93 	bl	8001688 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003764:	e014      	b.n	8003790 <HAL_RCC_OscConfig+0x788>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003770:	f7fd ff8a 	bl	8001688 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d908      	bls.n	8003790 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800377e:	4b8a      	ldr	r3, [pc, #552]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 8003780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e107      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003790:	4b85      	ldr	r3, [pc, #532]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 8003792:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0e8      	beq.n	8003770 <HAL_RCC_OscConfig+0x768>
 800379e:	e022      	b.n	80037e6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037a0:	4b81      	ldr	r3, [pc, #516]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 80037a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037a6:	4a80      	ldr	r2, [pc, #512]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b0:	f7fd ff6a 	bl	8001688 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037b6:	e00f      	b.n	80037d8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037b8:	f7fd ff66 	bl	8001688 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d908      	bls.n	80037d8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037c6:	4b78      	ldr	r3, [pc, #480]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 80037c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e0e3      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037d8:	4b73      	ldr	r3, [pc, #460]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 80037da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e8      	bne.n	80037b8 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 80d7 	beq.w	800399e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f0:	4b6d      	ldr	r3, [pc, #436]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b0c      	cmp	r3, #12
 80037fa:	f000 8091 	beq.w	8003920 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	2b02      	cmp	r3, #2
 8003804:	d166      	bne.n	80038d4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003806:	4b68      	ldr	r3, [pc, #416]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a67      	ldr	r2, [pc, #412]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 800380c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003812:	f7fd ff39 	bl	8001688 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003818:	e00e      	b.n	8003838 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381a:	f7fd ff35 	bl	8001688 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d907      	bls.n	8003838 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003828:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0b3      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003838:	4b5b      	ldr	r3, [pc, #364]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1ea      	bne.n	800381a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003844:	4b58      	ldr	r3, [pc, #352]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	4b58      	ldr	r3, [pc, #352]	; (80039ac <HAL_RCC_OscConfig+0x9a4>)
 800384a:	4013      	ands	r3, r2
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003854:	3a01      	subs	r2, #1
 8003856:	0112      	lsls	r2, r2, #4
 8003858:	4311      	orrs	r1, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800385e:	0212      	lsls	r2, r2, #8
 8003860:	4311      	orrs	r1, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003866:	0852      	lsrs	r2, r2, #1
 8003868:	3a01      	subs	r2, #1
 800386a:	0552      	lsls	r2, r2, #21
 800386c:	4311      	orrs	r1, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003872:	0852      	lsrs	r2, r2, #1
 8003874:	3a01      	subs	r2, #1
 8003876:	0652      	lsls	r2, r2, #25
 8003878:	4311      	orrs	r1, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800387e:	06d2      	lsls	r2, r2, #27
 8003880:	430a      	orrs	r2, r1
 8003882:	4949      	ldr	r1, [pc, #292]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 8003884:	4313      	orrs	r3, r2
 8003886:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003888:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a46      	ldr	r2, [pc, #280]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 800388e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003892:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003894:	4b44      	ldr	r3, [pc, #272]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4a43      	ldr	r2, [pc, #268]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 800389a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fd fef2 	bl	8001688 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a6:	e00e      	b.n	80038c6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a8:	f7fd feee 	bl	8001688 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d907      	bls.n	80038c6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038b6:	4b3c      	ldr	r3, [pc, #240]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e06c      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c6:	4b38      	ldr	r3, [pc, #224]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0ea      	beq.n	80038a8 <HAL_RCC_OscConfig+0x8a0>
 80038d2:	e064      	b.n	800399e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d4:	4b34      	ldr	r3, [pc, #208]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a33      	ldr	r2, [pc, #204]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 80038da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fd fed2 	bl	8001688 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e6:	e00e      	b.n	8003906 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e8:	f7fd fece 	bl	8001688 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d907      	bls.n	8003906 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f6:	4b2c      	ldr	r3, [pc, #176]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e04c      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003906:	4b28      	ldr	r3, [pc, #160]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1ea      	bne.n	80038e8 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003912:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	4924      	ldr	r1, [pc, #144]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <HAL_RCC_OscConfig+0x9a8>)
 800391a:	4013      	ands	r3, r2
 800391c:	60cb      	str	r3, [r1, #12]
 800391e:	e03e      	b.n	800399e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e039      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800392c:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <HAL_RCC_OscConfig+0x9a0>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f003 0203 	and.w	r2, r3, #3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	429a      	cmp	r2, r3
 800393e:	d12c      	bne.n	800399a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394a:	3b01      	subs	r3, #1
 800394c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800394e:	429a      	cmp	r2, r3
 8003950:	d123      	bne.n	800399a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800395e:	429a      	cmp	r2, r3
 8003960:	d11b      	bne.n	800399a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d113      	bne.n	800399a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	3b01      	subs	r3, #1
 8003980:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d109      	bne.n	800399a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	3b01      	subs	r3, #1
 8003994:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d001      	beq.n	800399e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3720      	adds	r7, #32
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000
 80039ac:	019f800c 	.word	0x019f800c
 80039b0:	feeefffc 	.word	0xfeeefffc

080039b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e11c      	b.n	8003c06 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039cc:	4b90      	ldr	r3, [pc, #576]	; (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d910      	bls.n	80039fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b8d      	ldr	r3, [pc, #564]	; (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 020f 	bic.w	r2, r3, #15
 80039e2:	498b      	ldr	r1, [pc, #556]	; (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b89      	ldr	r3, [pc, #548]	; (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e104      	b.n	8003c06 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d010      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	4b81      	ldr	r3, [pc, #516]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d908      	bls.n	8003a2a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a18:	4b7e      	ldr	r3, [pc, #504]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	497b      	ldr	r1, [pc, #492]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8085 	beq.w	8003b42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d11f      	bne.n	8003a80 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a40:	4b74      	ldr	r3, [pc, #464]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0da      	b.n	8003c06 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a50:	f000 fa26 	bl	8003ea0 <RCC_GetSysClockFreqFromPLLSource>
 8003a54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4a6f      	ldr	r2, [pc, #444]	; (8003c18 <HAL_RCC_ClockConfig+0x264>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d947      	bls.n	8003aee <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a5e:	4b6d      	ldr	r3, [pc, #436]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d141      	bne.n	8003aee <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a6a:	4b6a      	ldr	r3, [pc, #424]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a72:	4a68      	ldr	r2, [pc, #416]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	e036      	b.n	8003aee <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a88:	4b62      	ldr	r3, [pc, #392]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d115      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0b6      	b.n	8003c06 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d107      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aa0:	4b5c      	ldr	r3, [pc, #368]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0aa      	b.n	8003c06 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab0:	4b58      	ldr	r3, [pc, #352]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0a2      	b.n	8003c06 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ac0:	f000 f8b0 	bl	8003c24 <HAL_RCC_GetSysClockFreq>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4a53      	ldr	r2, [pc, #332]	; (8003c18 <HAL_RCC_ClockConfig+0x264>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d90f      	bls.n	8003aee <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ace:	4b51      	ldr	r3, [pc, #324]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ada:	4b4e      	ldr	r3, [pc, #312]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ae2:	4a4c      	ldr	r2, [pc, #304]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003aee:	4b49      	ldr	r3, [pc, #292]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f023 0203 	bic.w	r2, r3, #3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4946      	ldr	r1, [pc, #280]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b00:	f7fd fdc2 	bl	8001688 <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b06:	e013      	b.n	8003b30 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b08:	f7fd fdbe 	bl	8001688 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d90a      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1a:	4b3e      	ldr	r3, [pc, #248]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 020c 	and.w	r2, r3, #12
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e06a      	b.n	8003c06 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b30:	4b38      	ldr	r3, [pc, #224]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 020c 	and.w	r2, r3, #12
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d1e2      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b80      	cmp	r3, #128	; 0x80
 8003b46:	d105      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b48:	4b32      	ldr	r3, [pc, #200]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4a31      	ldr	r2, [pc, #196]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003b4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b52:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d010      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d208      	bcs.n	8003b82 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b70:	4b28      	ldr	r3, [pc, #160]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	4925      	ldr	r1, [pc, #148]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b82:	4b23      	ldr	r3, [pc, #140]	; (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d210      	bcs.n	8003bb2 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b90:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f023 020f 	bic.w	r2, r3, #15
 8003b98:	491d      	ldr	r1, [pc, #116]	; (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba0:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d001      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e029      	b.n	8003c06 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d008      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bbe:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	4912      	ldr	r1, [pc, #72]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d009      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bdc:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	490a      	ldr	r1, [pc, #40]	; (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003bf0:	f000 f8b6 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	4a09      	ldr	r2, [pc, #36]	; (8003c1c <HAL_RCC_ClockConfig+0x268>)
 8003bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bfa:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <HAL_RCC_ClockConfig+0x26c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fd fcf2 	bl	80015e8 <HAL_InitTick>
 8003c04:	4603      	mov	r3, r0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40022000 	.word	0x40022000
 8003c14:	40021000 	.word	0x40021000
 8003c18:	04c4b400 	.word	0x04c4b400
 8003c1c:	20000004 	.word	0x20000004
 8003c20:	20000008 	.word	0x20000008

08003c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b089      	sub	sp, #36	; 0x24
 8003c28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c32:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c3c:	4b44      	ldr	r3, [pc, #272]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x34>
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d121      	bne.n	8003c96 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d11e      	bne.n	8003c96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c58:	4b3d      	ldr	r3, [pc, #244]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c64:	4b3a      	ldr	r3, [pc, #232]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	e005      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c74:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003c80:	4a34      	ldr	r2, [pc, #208]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x130>)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c88:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10d      	bne.n	8003cac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c94:	e00a      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d102      	bne.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c9c:	4b2e      	ldr	r3, [pc, #184]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x134>)
 8003c9e:	61bb      	str	r3, [r7, #24]
 8003ca0:	e004      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ca8:	4b2c      	ldr	r3, [pc, #176]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x138>)
 8003caa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b0c      	cmp	r3, #12
 8003cb0:	d146      	bne.n	8003d40 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003cb2:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cbc:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d003      	beq.n	8003cd8 <HAL_RCC_GetSysClockFreq+0xb4>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d00d      	beq.n	8003cf2 <HAL_RCC_GetSysClockFreq+0xce>
 8003cd6:	e019      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cd8:	4a1f      	ldr	r2, [pc, #124]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x134>)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce0:	4a1b      	ldr	r2, [pc, #108]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003ce2:	68d2      	ldr	r2, [r2, #12]
 8003ce4:	0a12      	lsrs	r2, r2, #8
 8003ce6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cea:	fb02 f303 	mul.w	r3, r2, r3
 8003cee:	617b      	str	r3, [r7, #20]
        break;
 8003cf0:	e019      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cf2:	4a1a      	ldr	r2, [pc, #104]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x138>)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfa:	4a15      	ldr	r2, [pc, #84]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003cfc:	68d2      	ldr	r2, [r2, #12]
 8003cfe:	0a12      	lsrs	r2, r2, #8
 8003d00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d04:	fb02 f303 	mul.w	r3, r2, r3
 8003d08:	617b      	str	r3, [r7, #20]
        break;
 8003d0a:	e00c      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d14:	4a0e      	ldr	r2, [pc, #56]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003d16:	68d2      	ldr	r2, [r2, #12]
 8003d18:	0a12      	lsrs	r2, r2, #8
 8003d1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d1e:	fb02 f303 	mul.w	r3, r2, r3
 8003d22:	617b      	str	r3, [r7, #20]
        break;
 8003d24:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003d26:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	0e5b      	lsrs	r3, r3, #25
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	3301      	adds	r3, #1
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d40:	69bb      	ldr	r3, [r7, #24]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3724      	adds	r7, #36	; 0x24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
 8003d54:	08008218 	.word	0x08008218
 8003d58:	00f42400 	.word	0x00f42400
 8003d5c:	007a1200 	.word	0x007a1200

08003d60 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003d64:	f7ff ff5e 	bl	8003c24 <HAL_RCC_GetSysClockFreq>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCC_GetHCLKFreq+0x20>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	091b      	lsrs	r3, r3, #4
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	4903      	ldr	r1, [pc, #12]	; (8003d84 <HAL_RCC_GetHCLKFreq+0x24>)
 8003d76:	5ccb      	ldrb	r3, [r1, r3]
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40021000 	.word	0x40021000
 8003d84:	08008200 	.word	0x08008200

08003d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d8c:	f7ff ffe8 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003d90:	4602      	mov	r2, r0
 8003d92:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	4903      	ldr	r1, [pc, #12]	; (8003dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d9e:	5ccb      	ldrb	r3, [r1, r3]
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40021000 	.word	0x40021000
 8003dac:	08008210 	.word	0x08008210

08003db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003db4:	f7ff ffd4 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	0adb      	lsrs	r3, r3, #11
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	4903      	ldr	r1, [pc, #12]	; (8003dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dc6:	5ccb      	ldrb	r3, [r1, r3]
 8003dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	08008210 	.word	0x08008210

08003dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003de4:	4b2c      	ldr	r3, [pc, #176]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003df0:	f7ff f86c 	bl	8002ecc <HAL_PWREx_GetVoltageRange>
 8003df4:	6138      	str	r0, [r7, #16]
 8003df6:	e014      	b.n	8003e22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003df8:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	4a26      	ldr	r2, [pc, #152]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e02:	6593      	str	r3, [r2, #88]	; 0x58
 8003e04:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e10:	f7ff f85c 	bl	8002ecc <HAL_PWREx_GetVoltageRange>
 8003e14:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e16:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1a:	4a1f      	ldr	r2, [pc, #124]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e2e:	d10b      	bne.n	8003e48 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b80      	cmp	r3, #128	; 0x80
 8003e34:	d919      	bls.n	8003e6a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2ba0      	cmp	r3, #160	; 0xa0
 8003e3a:	d902      	bls.n	8003e42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003e40:	e013      	b.n	8003e6a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e42:	2301      	movs	r3, #1
 8003e44:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003e46:	e010      	b.n	8003e6a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b80      	cmp	r3, #128	; 0x80
 8003e4c:	d902      	bls.n	8003e54 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e4e:	2303      	movs	r3, #3
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	e00a      	b.n	8003e6a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b80      	cmp	r3, #128	; 0x80
 8003e58:	d102      	bne.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	e004      	b.n	8003e6a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b70      	cmp	r3, #112	; 0x70
 8003e64:	d101      	bne.n	8003e6a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e66:	2301      	movs	r3, #1
 8003e68:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 020f 	bic.w	r2, r3, #15
 8003e72:	490a      	ldr	r1, [pc, #40]	; (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003e7a:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40022000 	.word	0x40022000

08003ea0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ea6:	4b31      	ldr	r3, [pc, #196]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eb0:	4b2e      	ldr	r3, [pc, #184]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	3301      	adds	r3, #1
 8003ebc:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d015      	beq.n	8003ef0 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d839      	bhi.n	8003f3e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d01c      	beq.n	8003f0a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d133      	bne.n	8003f3e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ed6:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ede:	4a23      	ldr	r2, [pc, #140]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003ee0:	68d2      	ldr	r2, [r2, #12]
 8003ee2:	0a12      	lsrs	r2, r2, #8
 8003ee4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ee8:	fb02 f303 	mul.w	r3, r2, r3
 8003eec:	613b      	str	r3, [r7, #16]
      break;
 8003eee:	e029      	b.n	8003f44 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ef0:	4a20      	ldr	r2, [pc, #128]	; (8003f74 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef8:	4a1c      	ldr	r2, [pc, #112]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003efa:	68d2      	ldr	r2, [r2, #12]
 8003efc:	0a12      	lsrs	r2, r2, #8
 8003efe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f02:	fb02 f303 	mul.w	r3, r2, r3
 8003f06:	613b      	str	r3, [r7, #16]
      break;
 8003f08:	e01c      	b.n	8003f44 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f0a:	4b18      	ldr	r3, [pc, #96]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d107      	bne.n	8003f26 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f16:	4b15      	ldr	r3, [pc, #84]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1c:	0a1b      	lsrs	r3, r3, #8
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e005      	b.n	8003f32 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f26:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8003f32:	4a11      	ldr	r2, [pc, #68]	; (8003f78 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3a:	613b      	str	r3, [r7, #16]
        break;
 8003f3c:	e002      	b.n	8003f44 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
      break;
 8003f42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003f44:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	0e5b      	lsrs	r3, r3, #25
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	3301      	adds	r3, #1
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003f5e:	683b      	ldr	r3, [r7, #0]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	371c      	adds	r7, #28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	00f42400 	.word	0x00f42400
 8003f74:	007a1200 	.word	0x007a1200
 8003f78:	08008218 	.word	0x08008218

08003f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f84:	2300      	movs	r3, #0
 8003f86:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f88:	2300      	movs	r3, #0
 8003f8a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d040      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f9c:	2b80      	cmp	r3, #128	; 0x80
 8003f9e:	d02a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003fa0:	2b80      	cmp	r3, #128	; 0x80
 8003fa2:	d825      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003fa4:	2b60      	cmp	r3, #96	; 0x60
 8003fa6:	d026      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003fa8:	2b60      	cmp	r3, #96	; 0x60
 8003faa:	d821      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003fac:	2b40      	cmp	r3, #64	; 0x40
 8003fae:	d006      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003fb0:	2b40      	cmp	r3, #64	; 0x40
 8003fb2:	d81d      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d009      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	d010      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003fbc:	e018      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fbe:	4b8f      	ldr	r3, [pc, #572]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	4a8e      	ldr	r2, [pc, #568]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fca:	e015      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fb56 	bl	8004684 <RCCEx_PLLSAI1_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fdc:	e00c      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3320      	adds	r3, #32
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fc33 	bl	8004850 <RCCEx_PLLSAI2_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fee:	e003      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	77fb      	strb	r3, [r7, #31]
        break;
 8003ff4:	e000      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff8:	7ffb      	ldrb	r3, [r7, #31]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ffe:	4b7f      	ldr	r3, [pc, #508]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004000:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004004:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400c:	497b      	ldr	r1, [pc, #492]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004014:	e001      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004016:	7ffb      	ldrb	r3, [r7, #31]
 8004018:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d047      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402e:	d030      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004034:	d82a      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800403a:	d02a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800403c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004040:	d824      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004046:	d008      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800404c:	d81e      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004056:	d010      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004058:	e018      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800405a:	4b68      	ldr	r3, [pc, #416]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	4a67      	ldr	r2, [pc, #412]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004064:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004066:	e015      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	2100      	movs	r1, #0
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fb08 	bl	8004684 <RCCEx_PLLSAI1_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004078:	e00c      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3320      	adds	r3, #32
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fbe5 	bl	8004850 <RCCEx_PLLSAI2_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800408a:	e003      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	77fb      	strb	r3, [r7, #31]
        break;
 8004090:	e000      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8004092:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004094:	7ffb      	ldrb	r3, [r7, #31]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10b      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800409a:	4b58      	ldr	r3, [pc, #352]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800409c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	4954      	ldr	r1, [pc, #336]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80040b0:	e001      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b2:	7ffb      	ldrb	r3, [r7, #31]
 80040b4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 80ab 	beq.w	800421a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c4:	2300      	movs	r3, #0
 80040c6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040c8:	4b4c      	ldr	r3, [pc, #304]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10d      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d4:	4b49      	ldr	r3, [pc, #292]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d8:	4a48      	ldr	r2, [pc, #288]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040de:	6593      	str	r3, [r2, #88]	; 0x58
 80040e0:	4b46      	ldr	r3, [pc, #280]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040ec:	2301      	movs	r3, #1
 80040ee:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040f0:	4b43      	ldr	r3, [pc, #268]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a42      	ldr	r2, [pc, #264]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80040f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040fc:	f7fd fac4 	bl	8001688 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004102:	e00f      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004104:	f7fd fac0 	bl	8001688 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d908      	bls.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004112:	4b3b      	ldr	r3, [pc, #236]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411a:	2b00      	cmp	r3, #0
 800411c:	d109      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004122:	e006      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004124:	4b36      	ldr	r3, [pc, #216]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0e9      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004130:	e000      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004132:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004134:	7ffb      	ldrb	r3, [r7, #31]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d164      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800413a:	4b30      	ldr	r3, [pc, #192]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004144:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01f      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x210>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	429a      	cmp	r2, r3
 8004156:	d019      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004158:	4b28      	ldr	r3, [pc, #160]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004162:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004164:	4b25      	ldr	r3, [pc, #148]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	4a24      	ldr	r2, [pc, #144]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800416c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004174:	4b21      	ldr	r3, [pc, #132]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	4a20      	ldr	r2, [pc, #128]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800417c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004184:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01f      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004196:	f7fd fa77 	bl	8001688 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800419c:	e012      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7fd fa73 	bl	8001688 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d909      	bls.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041b0:	4b12      	ldr	r3, [pc, #72]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10a      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80041c2:	e007      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c4:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0e5      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x222>
 80041d2:	e000      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80041d4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80041d6:	7ffb      	ldrb	r3, [r7, #31]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10c      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041dc:	4b07      	ldr	r3, [pc, #28]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ec:	4903      	ldr	r1, [pc, #12]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041f4:	e008      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041f6:	7ffb      	ldrb	r3, [r7, #31]
 80041f8:	77bb      	strb	r3, [r7, #30]
 80041fa:	e005      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80041fc:	40021000 	.word	0x40021000
 8004200:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004204:	7ffb      	ldrb	r3, [r7, #31]
 8004206:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d105      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800420e:	4b9c      	ldr	r3, [pc, #624]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004212:	4a9b      	ldr	r2, [pc, #620]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004218:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004226:	4b96      	ldr	r3, [pc, #600]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f023 0203 	bic.w	r2, r3, #3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004234:	4992      	ldr	r1, [pc, #584]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004248:	4b8d      	ldr	r3, [pc, #564]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	f023 020c 	bic.w	r2, r3, #12
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	498a      	ldr	r1, [pc, #552]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800426a:	4b85      	ldr	r3, [pc, #532]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004270:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	4981      	ldr	r1, [pc, #516]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800428c:	4b7c      	ldr	r3, [pc, #496]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	4979      	ldr	r1, [pc, #484]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042ae:	4b74      	ldr	r3, [pc, #464]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042bc:	4970      	ldr	r1, [pc, #448]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042d0:	4b6b      	ldr	r3, [pc, #428]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042de:	4968      	ldr	r1, [pc, #416]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042f2:	4b63      	ldr	r3, [pc, #396]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004300:	495f      	ldr	r1, [pc, #380]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004314:	4b5a      	ldr	r3, [pc, #360]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004322:	4957      	ldr	r1, [pc, #348]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004336:	4b52      	ldr	r3, [pc, #328]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004344:	494e      	ldr	r1, [pc, #312]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d031      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800435c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004360:	d00e      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004362:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004366:	d814      	bhi.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004368:	2b00      	cmp	r3, #0
 800436a:	d015      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800436c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004370:	d10f      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004372:	4b43      	ldr	r3, [pc, #268]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	4a42      	ldr	r2, [pc, #264]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004378:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800437c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800437e:	e00c      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	2100      	movs	r1, #0
 8004386:	4618      	mov	r0, r3
 8004388:	f000 f97c 	bl	8004684 <RCCEx_PLLSAI1_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004390:	e003      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	77fb      	strb	r3, [r7, #31]
        break;
 8004396:	e000      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800439a:	7ffb      	ldrb	r3, [r7, #31]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10b      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043a0:	4b37      	ldr	r3, [pc, #220]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043ae:	4934      	ldr	r1, [pc, #208]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043b6:	e001      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b8:	7ffb      	ldrb	r3, [r7, #31]
 80043ba:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043c8:	4b2d      	ldr	r3, [pc, #180]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d6:	492a      	ldr	r1, [pc, #168]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043ea:	4b25      	ldr	r3, [pc, #148]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f8:	4921      	ldr	r1, [pc, #132]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800440c:	4b1c      	ldr	r3, [pc, #112]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	4919      	ldr	r1, [pc, #100]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800442e:	4b14      	ldr	r3, [pc, #80]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004430:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004434:	f023 0203 	bic.w	r2, r3, #3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	4910      	ldr	r1, [pc, #64]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d02b      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445e:	4908      	ldr	r1, [pc, #32]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800446e:	d109      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004470:	4b03      	ldr	r3, [pc, #12]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4a02      	ldr	r2, [pc, #8]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800447a:	60d3      	str	r3, [r2, #12]
 800447c:	e014      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800448c:	d10c      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3304      	adds	r3, #4
 8004492:	2101      	movs	r1, #1
 8004494:	4618      	mov	r0, r3
 8004496:	f000 f8f5 	bl	8004684 <RCCEx_PLLSAI1_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800449e:	7ffb      	ldrb	r3, [r7, #31]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80044a4:	7ffb      	ldrb	r3, [r7, #31]
 80044a6:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d04a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044bc:	d108      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80044be:	4b70      	ldr	r3, [pc, #448]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044c4:	4a6e      	ldr	r2, [pc, #440]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044ca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80044ce:	e012      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80044d0:	4b6b      	ldr	r3, [pc, #428]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044de:	4968      	ldr	r1, [pc, #416]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044e6:	4b66      	ldr	r3, [pc, #408]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ec:	4a64      	ldr	r2, [pc, #400]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044f2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044fe:	d10d      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3304      	adds	r3, #4
 8004504:	2101      	movs	r1, #1
 8004506:	4618      	mov	r0, r3
 8004508:	f000 f8bc 	bl	8004684 <RCCEx_PLLSAI1_Config>
 800450c:	4603      	mov	r3, r0
 800450e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004510:	7ffb      	ldrb	r3, [r7, #31]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d019      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8004516:	7ffb      	ldrb	r3, [r7, #31]
 8004518:	77bb      	strb	r3, [r7, #30]
 800451a:	e016      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004524:	d106      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004526:	4b56      	ldr	r3, [pc, #344]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	4a55      	ldr	r2, [pc, #340]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800452c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004530:	60d3      	str	r3, [r2, #12]
 8004532:	e00a      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800453c:	d105      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800453e:	4b50      	ldr	r3, [pc, #320]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	4a4f      	ldr	r2, [pc, #316]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004548:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d028      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004556:	4b4a      	ldr	r3, [pc, #296]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004564:	4946      	ldr	r1, [pc, #280]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004574:	d106      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004576:	4b42      	ldr	r3, [pc, #264]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	4a41      	ldr	r2, [pc, #260]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800457c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004580:	60d3      	str	r3, [r2, #12]
 8004582:	e011      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800458c:	d10c      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3304      	adds	r3, #4
 8004592:	2101      	movs	r1, #1
 8004594:	4618      	mov	r0, r3
 8004596:	f000 f875 	bl	8004684 <RCCEx_PLLSAI1_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800459e:	7ffb      	ldrb	r3, [r7, #31]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80045a4:	7ffb      	ldrb	r3, [r7, #31]
 80045a6:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01e      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045b4:	4b32      	ldr	r3, [pc, #200]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045c4:	492e      	ldr	r1, [pc, #184]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045d6:	d10c      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	2102      	movs	r1, #2
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f850 	bl	8004684 <RCCEx_PLLSAI1_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80045e8:	7ffb      	ldrb	r3, [r7, #31]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80045ee:	7ffb      	ldrb	r3, [r7, #31]
 80045f0:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00b      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045fe:	4b20      	ldr	r3, [pc, #128]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004600:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004604:	f023 0204 	bic.w	r2, r3, #4
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460e:	491c      	ldr	r1, [pc, #112]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00b      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004622:	4b17      	ldr	r3, [pc, #92]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004624:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004628:	f023 0218 	bic.w	r2, r3, #24
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004632:	4913      	ldr	r1, [pc, #76]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d017      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004646:	4b0e      	ldr	r3, [pc, #56]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004648:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800464c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004656:	490a      	ldr	r1, [pc, #40]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004664:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004668:	d105      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	4a04      	ldr	r2, [pc, #16]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004674:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004676:	7fbb      	ldrb	r3, [r7, #30]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3720      	adds	r7, #32
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021000 	.word	0x40021000

08004684 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b03      	cmp	r3, #3
 8004698:	d018      	beq.n	80046cc <RCCEx_PLLSAI1_Config+0x48>
 800469a:	2b03      	cmp	r3, #3
 800469c:	d81f      	bhi.n	80046de <RCCEx_PLLSAI1_Config+0x5a>
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d002      	beq.n	80046a8 <RCCEx_PLLSAI1_Config+0x24>
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d009      	beq.n	80046ba <RCCEx_PLLSAI1_Config+0x36>
 80046a6:	e01a      	b.n	80046de <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046a8:	4b65      	ldr	r3, [pc, #404]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d117      	bne.n	80046e4 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b8:	e014      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046ba:	4b61      	ldr	r3, [pc, #388]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d110      	bne.n	80046e8 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ca:	e00d      	b.n	80046e8 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80046cc:	4b5c      	ldr	r3, [pc, #368]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d109      	bne.n	80046ec <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046dc:	e006      	b.n	80046ec <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	73fb      	strb	r3, [r7, #15]
      break;
 80046e2:	e004      	b.n	80046ee <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80046e4:	bf00      	nop
 80046e6:	e002      	b.n	80046ee <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80046e8:	bf00      	nop
 80046ea:	e000      	b.n	80046ee <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80046ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f040 809f 	bne.w	8004834 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046f6:	4b52      	ldr	r3, [pc, #328]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a51      	ldr	r2, [pc, #324]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004702:	f7fc ffc1 	bl	8001688 <HAL_GetTick>
 8004706:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004708:	e00f      	b.n	800472a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800470a:	f7fc ffbd 	bl	8001688 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d908      	bls.n	800472a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004718:	4b49      	ldr	r3, [pc, #292]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d009      	beq.n	8004738 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004728:	e006      	b.n	8004738 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800472a:	4b45      	ldr	r3, [pc, #276]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e9      	bne.n	800470a <RCCEx_PLLSAI1_Config+0x86>
 8004736:	e000      	b.n	800473a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004738:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d179      	bne.n	8004834 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d116      	bne.n	8004774 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004746:	4b3e      	ldr	r3, [pc, #248]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	4b3e      	ldr	r3, [pc, #248]	; (8004844 <RCCEx_PLLSAI1_Config+0x1c0>)
 800474c:	4013      	ands	r3, r2
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6892      	ldr	r2, [r2, #8]
 8004752:	0211      	lsls	r1, r2, #8
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	68d2      	ldr	r2, [r2, #12]
 8004758:	06d2      	lsls	r2, r2, #27
 800475a:	4311      	orrs	r1, r2
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6852      	ldr	r2, [r2, #4]
 8004760:	3a01      	subs	r2, #1
 8004762:	0112      	lsls	r2, r2, #4
 8004764:	4311      	orrs	r1, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6812      	ldr	r2, [r2, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	4934      	ldr	r1, [pc, #208]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 800476e:	4313      	orrs	r3, r2
 8004770:	610b      	str	r3, [r1, #16]
 8004772:	e033      	b.n	80047dc <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d118      	bne.n	80047ac <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800477a:	4b31      	ldr	r3, [pc, #196]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	4b32      	ldr	r3, [pc, #200]	; (8004848 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004780:	4013      	ands	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6892      	ldr	r2, [r2, #8]
 8004786:	0211      	lsls	r1, r2, #8
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6912      	ldr	r2, [r2, #16]
 800478c:	0852      	lsrs	r2, r2, #1
 800478e:	3a01      	subs	r2, #1
 8004790:	0552      	lsls	r2, r2, #21
 8004792:	4311      	orrs	r1, r2
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6852      	ldr	r2, [r2, #4]
 8004798:	3a01      	subs	r2, #1
 800479a:	0112      	lsls	r2, r2, #4
 800479c:	4311      	orrs	r1, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	4926      	ldr	r1, [pc, #152]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	610b      	str	r3, [r1, #16]
 80047aa:	e017      	b.n	80047dc <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047ac:	4b24      	ldr	r3, [pc, #144]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	4b26      	ldr	r3, [pc, #152]	; (800484c <RCCEx_PLLSAI1_Config+0x1c8>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6892      	ldr	r2, [r2, #8]
 80047b8:	0211      	lsls	r1, r2, #8
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6952      	ldr	r2, [r2, #20]
 80047be:	0852      	lsrs	r2, r2, #1
 80047c0:	3a01      	subs	r2, #1
 80047c2:	0652      	lsls	r2, r2, #25
 80047c4:	4311      	orrs	r1, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6852      	ldr	r2, [r2, #4]
 80047ca:	3a01      	subs	r2, #1
 80047cc:	0112      	lsls	r2, r2, #4
 80047ce:	4311      	orrs	r1, r2
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	491a      	ldr	r1, [pc, #104]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047dc:	4b18      	ldr	r3, [pc, #96]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a17      	ldr	r2, [pc, #92]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 80047e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e8:	f7fc ff4e 	bl	8001688 <HAL_GetTick>
 80047ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047ee:	e00f      	b.n	8004810 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047f0:	f7fc ff4a 	bl	8001688 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d908      	bls.n	8004810 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047fe:	4b10      	ldr	r3, [pc, #64]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800480e:	e006      	b.n	800481e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0e9      	beq.n	80047f0 <RCCEx_PLLSAI1_Config+0x16c>
 800481c:	e000      	b.n	8004820 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800481e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004826:	4b06      	ldr	r3, [pc, #24]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	4904      	ldr	r1, [pc, #16]	; (8004840 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004830:	4313      	orrs	r3, r2
 8004832:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004834:	7bfb      	ldrb	r3, [r7, #15]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000
 8004844:	07ff800c 	.word	0x07ff800c
 8004848:	ff9f800c 	.word	0xff9f800c
 800484c:	f9ff800c 	.word	0xf9ff800c

08004850 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b03      	cmp	r3, #3
 8004864:	d018      	beq.n	8004898 <RCCEx_PLLSAI2_Config+0x48>
 8004866:	2b03      	cmp	r3, #3
 8004868:	d81f      	bhi.n	80048aa <RCCEx_PLLSAI2_Config+0x5a>
 800486a:	2b01      	cmp	r3, #1
 800486c:	d002      	beq.n	8004874 <RCCEx_PLLSAI2_Config+0x24>
 800486e:	2b02      	cmp	r3, #2
 8004870:	d009      	beq.n	8004886 <RCCEx_PLLSAI2_Config+0x36>
 8004872:	e01a      	b.n	80048aa <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004874:	4b4a      	ldr	r3, [pc, #296]	; (80049a0 <RCCEx_PLLSAI2_Config+0x150>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d117      	bne.n	80048b0 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004884:	e014      	b.n	80048b0 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004886:	4b46      	ldr	r3, [pc, #280]	; (80049a0 <RCCEx_PLLSAI2_Config+0x150>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488e:	2b00      	cmp	r3, #0
 8004890:	d110      	bne.n	80048b4 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004896:	e00d      	b.n	80048b4 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004898:	4b41      	ldr	r3, [pc, #260]	; (80049a0 <RCCEx_PLLSAI2_Config+0x150>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a8:	e006      	b.n	80048b8 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
      break;
 80048ae:	e004      	b.n	80048ba <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80048b0:	bf00      	nop
 80048b2:	e002      	b.n	80048ba <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80048b4:	bf00      	nop
 80048b6:	e000      	b.n	80048ba <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80048b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d169      	bne.n	8004994 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048c0:	4b37      	ldr	r3, [pc, #220]	; (80049a0 <RCCEx_PLLSAI2_Config+0x150>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a36      	ldr	r2, [pc, #216]	; (80049a0 <RCCEx_PLLSAI2_Config+0x150>)
 80048c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048cc:	f7fc fedc 	bl	8001688 <HAL_GetTick>
 80048d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048d2:	e00f      	b.n	80048f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048d4:	f7fc fed8 	bl	8001688 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d908      	bls.n	80048f4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048e2:	4b2f      	ldr	r3, [pc, #188]	; (80049a0 <RCCEx_PLLSAI2_Config+0x150>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d009      	beq.n	8004902 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048f2:	e006      	b.n	8004902 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048f4:	4b2a      	ldr	r3, [pc, #168]	; (80049a0 <RCCEx_PLLSAI2_Config+0x150>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e9      	bne.n	80048d4 <RCCEx_PLLSAI2_Config+0x84>
 8004900:	e000      	b.n	8004904 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004902:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d144      	bne.n	8004994 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d115      	bne.n	800493c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004910:	4b23      	ldr	r3, [pc, #140]	; (80049a0 <RCCEx_PLLSAI2_Config+0x150>)
 8004912:	695a      	ldr	r2, [r3, #20]
 8004914:	4b23      	ldr	r3, [pc, #140]	; (80049a4 <RCCEx_PLLSAI2_Config+0x154>)
 8004916:	4013      	ands	r3, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6892      	ldr	r2, [r2, #8]
 800491c:	0211      	lsls	r1, r2, #8
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68d2      	ldr	r2, [r2, #12]
 8004922:	06d2      	lsls	r2, r2, #27
 8004924:	4311      	orrs	r1, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6852      	ldr	r2, [r2, #4]
 800492a:	3a01      	subs	r2, #1
 800492c:	0112      	lsls	r2, r2, #4
 800492e:	4311      	orrs	r1, r2
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	491a      	ldr	r1, [pc, #104]	; (80049a0 <RCCEx_PLLSAI2_Config+0x150>)
 8004938:	4313      	orrs	r3, r2
 800493a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800493c:	4b18      	ldr	r3, [pc, #96]	; (80049a0 <RCCEx_PLLSAI2_Config+0x150>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <RCCEx_PLLSAI2_Config+0x150>)
 8004942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004946:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004948:	f7fc fe9e 	bl	8001688 <HAL_GetTick>
 800494c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800494e:	e00f      	b.n	8004970 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004950:	f7fc fe9a 	bl	8001688 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d908      	bls.n	8004970 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800495e:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <RCCEx_PLLSAI2_Config+0x150>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d109      	bne.n	800497e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800496e:	e006      	b.n	800497e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <RCCEx_PLLSAI2_Config+0x150>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0e9      	beq.n	8004950 <RCCEx_PLLSAI2_Config+0x100>
 800497c:	e000      	b.n	8004980 <RCCEx_PLLSAI2_Config+0x130>
          break;
 800497e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <RCCEx_PLLSAI2_Config+0x150>)
 8004988:	695a      	ldr	r2, [r3, #20]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	4904      	ldr	r1, [pc, #16]	; (80049a0 <RCCEx_PLLSAI2_Config+0x150>)
 8004990:	4313      	orrs	r3, r2
 8004992:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004994:	7bfb      	ldrb	r3, [r7, #15]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40021000 	.word	0x40021000
 80049a4:	07ff800c 	.word	0x07ff800c

080049a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d066      	beq.n	8004a88 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fc fb68 	bl	80010a4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f003 0310 	and.w	r3, r3, #16
 80049e6:	2b10      	cmp	r3, #16
 80049e8:	d045      	beq.n	8004a76 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049ea:	4b2a      	ldr	r3, [pc, #168]	; (8004a94 <HAL_RTC_Init+0xec>)
 80049ec:	22ca      	movs	r2, #202	; 0xca
 80049ee:	625a      	str	r2, [r3, #36]	; 0x24
 80049f0:	4b28      	ldr	r3, [pc, #160]	; (8004a94 <HAL_RTC_Init+0xec>)
 80049f2:	2253      	movs	r2, #83	; 0x53
 80049f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f872 	bl	8004ae0 <RTC_EnterInitMode>
 80049fc:	4603      	mov	r3, r0
 80049fe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d121      	bne.n	8004a4a <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004a06:	4b23      	ldr	r3, [pc, #140]	; (8004a94 <HAL_RTC_Init+0xec>)
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	4a22      	ldr	r2, [pc, #136]	; (8004a94 <HAL_RTC_Init+0xec>)
 8004a0c:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a14:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004a16:	4b1f      	ldr	r3, [pc, #124]	; (8004a94 <HAL_RTC_Init+0xec>)
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6859      	ldr	r1, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	4319      	orrs	r1, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	491a      	ldr	r1, [pc, #104]	; (8004a94 <HAL_RTC_Init+0xec>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	041b      	lsls	r3, r3, #16
 8004a3a:	4916      	ldr	r1, [pc, #88]	; (8004a94 <HAL_RTC_Init+0xec>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f881 	bl	8004b48 <RTC_ExitInitMode>
 8004a46:	4603      	mov	r3, r0
 8004a48:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10e      	bne.n	8004a6e <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8004a50:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <HAL_RTC_Init+0xec>)
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a19      	ldr	r1, [r3, #32]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	4319      	orrs	r1, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	430b      	orrs	r3, r1
 8004a68:	490a      	ldr	r1, [pc, #40]	; (8004a94 <HAL_RTC_Init+0xec>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a6e:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <HAL_RTC_Init+0xec>)
 8004a70:	22ff      	movs	r2, #255	; 0xff
 8004a72:	625a      	str	r2, [r3, #36]	; 0x24
 8004a74:	e001      	b.n	8004a7a <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d103      	bne.n	8004a88 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40002800 	.word	0x40002800

08004a98 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8004aa0:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <HAL_RTC_WaitForSynchro+0x40>)
 8004aa2:	4a0e      	ldr	r2, [pc, #56]	; (8004adc <HAL_RTC_WaitForSynchro+0x44>)
 8004aa4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004aa6:	f7fc fdef 	bl	8001688 <HAL_GetTick>
 8004aaa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004aac:	e009      	b.n	8004ac2 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004aae:	f7fc fdeb 	bl	8001688 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004abc:	d901      	bls.n	8004ac2 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e006      	b.n	8004ad0 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004ac2:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_RTC_WaitForSynchro+0x40>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0ef      	beq.n	8004aae <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40002800 	.word	0x40002800
 8004adc:	0001005c 	.word	0x0001005c

08004ae0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004aec:	4b15      	ldr	r3, [pc, #84]	; (8004b44 <RTC_EnterInitMode+0x64>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d120      	bne.n	8004b3a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004af8:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <RTC_EnterInitMode+0x64>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	4a11      	ldr	r2, [pc, #68]	; (8004b44 <RTC_EnterInitMode+0x64>)
 8004afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b02:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004b04:	f7fc fdc0 	bl	8001688 <HAL_GetTick>
 8004b08:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004b0a:	e00d      	b.n	8004b28 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004b0c:	f7fc fdbc 	bl	8001688 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b1a:	d905      	bls.n	8004b28 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2203      	movs	r2, #3
 8004b24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <RTC_EnterInitMode+0x64>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d102      	bne.n	8004b3a <RTC_EnterInitMode+0x5a>
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d1e8      	bne.n	8004b0c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40002800 	.word	0x40002800

08004b48 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004b54:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <RTC_ExitInitMode+0x78>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4a19      	ldr	r2, [pc, #100]	; (8004bc0 <RTC_ExitInitMode+0x78>)
 8004b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b5e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004b60:	4b17      	ldr	r3, [pc, #92]	; (8004bc0 <RTC_ExitInitMode+0x78>)
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10c      	bne.n	8004b86 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff ff93 	bl	8004a98 <HAL_RTC_WaitForSynchro>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01e      	beq.n	8004bb6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	73fb      	strb	r3, [r7, #15]
 8004b84:	e017      	b.n	8004bb6 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b86:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <RTC_ExitInitMode+0x78>)
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	4a0d      	ldr	r2, [pc, #52]	; (8004bc0 <RTC_ExitInitMode+0x78>)
 8004b8c:	f023 0320 	bic.w	r3, r3, #32
 8004b90:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff ff80 	bl	8004a98 <HAL_RTC_WaitForSynchro>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d005      	beq.n	8004baa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004baa:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <RTC_ExitInitMode+0x78>)
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <RTC_ExitInitMode+0x78>)
 8004bb0:	f043 0320 	orr.w	r3, r3, #32
 8004bb4:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40002800 	.word	0x40002800

08004bc4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	490f      	ldr	r1, [pc, #60]	; (8004c14 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	490c      	ldr	r1, [pc, #48]	; (8004c18 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8004bea:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6919      	ldr	r1, [r3, #16]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	041b      	lsls	r3, r3, #16
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	4906      	ldr	r1, [pc, #24]	; (8004c18 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40002800 	.word	0x40002800
 8004c18:	40003400 	.word	0x40003400

08004c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e042      	b.n	8004cb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d106      	bne.n	8004c46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7fc f981 	bl	8000f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2224      	movs	r2, #36	; 0x24
 8004c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0201 	bic.w	r2, r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fbbc 	bl	80053dc <UART_SetConfig>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e022      	b.n	8004cb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 feb0 	bl	80059dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 ff37 	bl	8005b20 <UART_CheckIdleState>
 8004cb2:	4603      	mov	r3, r0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08a      	sub	sp, #40	; 0x28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d137      	bne.n	8004d44 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_UART_Receive_IT+0x24>
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e030      	b.n	8004d46 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a18      	ldr	r2, [pc, #96]	; (8004d50 <HAL_UART_Receive_IT+0x94>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d01f      	beq.n	8004d34 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d018      	beq.n	8004d34 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	623b      	str	r3, [r7, #32]
 8004d22:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	69f9      	ldr	r1, [r7, #28]
 8004d26:	6a3a      	ldr	r2, [r7, #32]
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e6      	bne.n	8004d02 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d34:	88fb      	ldrh	r3, [r7, #6]
 8004d36:	461a      	mov	r2, r3
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f001 f802 	bl	8005d44 <UART_Start_Receive_IT>
 8004d40:	4603      	mov	r3, r0
 8004d42:	e000      	b.n	8004d46 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d44:	2302      	movs	r3, #2
  }
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3728      	adds	r7, #40	; 0x28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40008000 	.word	0x40008000

08004d54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b0ba      	sub	sp, #232	; 0xe8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004d7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d82:	4013      	ands	r3, r2
 8004d84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004d88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d11b      	bne.n	8004dc8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d015      	beq.n	8004dc8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da0:	f003 0320 	and.w	r3, r3, #32
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d105      	bne.n	8004db4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d009      	beq.n	8004dc8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 82e3 	beq.w	8005384 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	4798      	blx	r3
      }
      return;
 8004dc6:	e2dd      	b.n	8005384 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004dc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8123 	beq.w	8005018 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004dd2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004dd6:	4b8d      	ldr	r3, [pc, #564]	; (800500c <HAL_UART_IRQHandler+0x2b8>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004dde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004de2:	4b8b      	ldr	r3, [pc, #556]	; (8005010 <HAL_UART_IRQHandler+0x2bc>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 8116 	beq.w	8005018 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d011      	beq.n	8004e1c <HAL_UART_IRQHandler+0xc8>
 8004df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00b      	beq.n	8004e1c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	f043 0201 	orr.w	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d011      	beq.n	8004e4c <HAL_UART_IRQHandler+0xf8>
 8004e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00b      	beq.n	8004e4c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e42:	f043 0204 	orr.w	r2, r3, #4
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d011      	beq.n	8004e7c <HAL_UART_IRQHandler+0x128>
 8004e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00b      	beq.n	8004e7c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2204      	movs	r2, #4
 8004e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e72:	f043 0202 	orr.w	r2, r3, #2
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d017      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d105      	bne.n	8004ea0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004e94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004e98:	4b5c      	ldr	r3, [pc, #368]	; (800500c <HAL_UART_IRQHandler+0x2b8>)
 8004e9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00b      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2208      	movs	r2, #8
 8004ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eae:	f043 0208 	orr.w	r2, r3, #8
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d012      	beq.n	8004eea <HAL_UART_IRQHandler+0x196>
 8004ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00c      	beq.n	8004eea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ed8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee0:	f043 0220 	orr.w	r2, r3, #32
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 8249 	beq.w	8005388 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d013      	beq.n	8004f2a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d105      	bne.n	8004f1a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d007      	beq.n	8004f2a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3e:	2b40      	cmp	r3, #64	; 0x40
 8004f40:	d005      	beq.n	8004f4e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d054      	beq.n	8004ff8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f001 f81a 	bl	8005f88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5e:	2b40      	cmp	r3, #64	; 0x40
 8004f60:	d146      	bne.n	8004ff0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3308      	adds	r3, #8
 8004f68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f70:	e853 3f00 	ldrex	r3, [r3]
 8004f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3308      	adds	r3, #8
 8004f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1d9      	bne.n	8004f62 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d017      	beq.n	8004fe8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fbe:	4a15      	ldr	r2, [pc, #84]	; (8005014 <HAL_UART_IRQHandler+0x2c0>)
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fd fc74 	bl	80028b6 <HAL_DMA_Abort_IT>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d019      	beq.n	8005008 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe6:	e00f      	b.n	8005008 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f9e1 	bl	80053b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fee:	e00b      	b.n	8005008 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f9dd 	bl	80053b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff6:	e007      	b.n	8005008 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f9d9 	bl	80053b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005006:	e1bf      	b.n	8005388 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005008:	bf00      	nop
    return;
 800500a:	e1bd      	b.n	8005388 <HAL_UART_IRQHandler+0x634>
 800500c:	10000001 	.word	0x10000001
 8005010:	04000120 	.word	0x04000120
 8005014:	08006055 	.word	0x08006055

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800501c:	2b01      	cmp	r3, #1
 800501e:	f040 8153 	bne.w	80052c8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005026:	f003 0310 	and.w	r3, r3, #16
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 814c 	beq.w	80052c8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005034:	f003 0310 	and.w	r3, r3, #16
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8145 	beq.w	80052c8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2210      	movs	r2, #16
 8005044:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	f040 80bb 	bne.w	80051cc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005064:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 818f 	beq.w	800538c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005074:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005078:	429a      	cmp	r2, r3
 800507a:	f080 8187 	bcs.w	800538c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005084:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	f040 8087 	bne.w	80051aa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050d6:	e841 2300 	strex	r3, r2, [r1]
 80050da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80050de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1da      	bne.n	800509c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3308      	adds	r3, #8
 80050ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80050f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3308      	adds	r3, #8
 8005106:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800510a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800510e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005112:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800511c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e1      	bne.n	80050e6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3308      	adds	r3, #8
 8005128:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005138:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3308      	adds	r3, #8
 8005142:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005146:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005148:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800514c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800514e:	e841 2300 	strex	r3, r2, [r1]
 8005152:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1e3      	bne.n	8005122 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2220      	movs	r2, #32
 800515e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005178:	f023 0310 	bic.w	r3, r3, #16
 800517c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800518a:	65bb      	str	r3, [r7, #88]	; 0x58
 800518c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005190:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005192:	e841 2300 	strex	r3, r2, [r1]
 8005196:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1e4      	bne.n	8005168 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fd fb2a 	bl	80027fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2202      	movs	r2, #2
 80051ae:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051bc:	b29b      	uxth	r3, r3
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f8fd 	bl	80053c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051ca:	e0df      	b.n	800538c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051d8:	b29b      	uxth	r3, r3
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 80d1 	beq.w	8005390 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80051ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 80cc 	beq.w	8005390 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005208:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800520c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800521a:	647b      	str	r3, [r7, #68]	; 0x44
 800521c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005220:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e4      	bne.n	80051f8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3308      	adds	r3, #8
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	e853 3f00 	ldrex	r3, [r3]
 800523c:	623b      	str	r3, [r7, #32]
   return(result);
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3308      	adds	r3, #8
 8005252:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005256:	633a      	str	r2, [r7, #48]	; 0x30
 8005258:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800525c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e1      	bne.n	800522e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	60fb      	str	r3, [r7, #12]
   return(result);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0310 	bic.w	r3, r3, #16
 8005292:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	69b9      	ldr	r1, [r7, #24]
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	e841 2300 	strex	r3, r2, [r1]
 80052ac:	617b      	str	r3, [r7, #20]
   return(result);
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e4      	bne.n	800527e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052be:	4619      	mov	r1, r3
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f87f 	bl	80053c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052c6:	e063      	b.n	8005390 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00e      	beq.n	80052f2 <HAL_UART_IRQHandler+0x59e>
 80052d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80052e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f001 fc10 	bl	8006b10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052f0:	e051      	b.n	8005396 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80052f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d014      	beq.n	8005328 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80052fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005306:	2b00      	cmp	r3, #0
 8005308:	d105      	bne.n	8005316 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800530a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800530e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800531a:	2b00      	cmp	r3, #0
 800531c:	d03a      	beq.n	8005394 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	4798      	blx	r3
    }
    return;
 8005326:	e035      	b.n	8005394 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005330:	2b00      	cmp	r3, #0
 8005332:	d009      	beq.n	8005348 <HAL_UART_IRQHandler+0x5f4>
 8005334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fe9d 	bl	8006080 <UART_EndTransmit_IT>
    return;
 8005346:	e026      	b.n	8005396 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800534c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d009      	beq.n	8005368 <HAL_UART_IRQHandler+0x614>
 8005354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005358:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f001 fbe9 	bl	8006b38 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005366:	e016      	b.n	8005396 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d010      	beq.n	8005396 <HAL_UART_IRQHandler+0x642>
 8005374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005378:	2b00      	cmp	r3, #0
 800537a:	da0c      	bge.n	8005396 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f001 fbd1 	bl	8006b24 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005382:	e008      	b.n	8005396 <HAL_UART_IRQHandler+0x642>
      return;
 8005384:	bf00      	nop
 8005386:	e006      	b.n	8005396 <HAL_UART_IRQHandler+0x642>
    return;
 8005388:	bf00      	nop
 800538a:	e004      	b.n	8005396 <HAL_UART_IRQHandler+0x642>
      return;
 800538c:	bf00      	nop
 800538e:	e002      	b.n	8005396 <HAL_UART_IRQHandler+0x642>
      return;
 8005390:	bf00      	nop
 8005392:	e000      	b.n	8005396 <HAL_UART_IRQHandler+0x642>
    return;
 8005394:	bf00      	nop
  }
}
 8005396:	37e8      	adds	r7, #232	; 0xe8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053e0:	b08c      	sub	sp, #48	; 0x30
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	431a      	orrs	r2, r3
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	4313      	orrs	r3, r2
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4baa      	ldr	r3, [pc, #680]	; (80056b4 <UART_SetConfig+0x2d8>)
 800540c:	4013      	ands	r3, r2
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	6812      	ldr	r2, [r2, #0]
 8005412:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005414:	430b      	orrs	r3, r1
 8005416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a9f      	ldr	r2, [pc, #636]	; (80056b8 <UART_SetConfig+0x2dc>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005444:	4313      	orrs	r3, r2
 8005446:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005452:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	6812      	ldr	r2, [r2, #0]
 800545a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800545c:	430b      	orrs	r3, r1
 800545e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005466:	f023 010f 	bic.w	r1, r3, #15
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a90      	ldr	r2, [pc, #576]	; (80056bc <UART_SetConfig+0x2e0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d125      	bne.n	80054cc <UART_SetConfig+0xf0>
 8005480:	4b8f      	ldr	r3, [pc, #572]	; (80056c0 <UART_SetConfig+0x2e4>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	2b03      	cmp	r3, #3
 800548c:	d81a      	bhi.n	80054c4 <UART_SetConfig+0xe8>
 800548e:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <UART_SetConfig+0xb8>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054a5 	.word	0x080054a5
 8005498:	080054b5 	.word	0x080054b5
 800549c:	080054ad 	.word	0x080054ad
 80054a0:	080054bd 	.word	0x080054bd
 80054a4:	2301      	movs	r3, #1
 80054a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054aa:	e116      	b.n	80056da <UART_SetConfig+0x2fe>
 80054ac:	2302      	movs	r3, #2
 80054ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054b2:	e112      	b.n	80056da <UART_SetConfig+0x2fe>
 80054b4:	2304      	movs	r3, #4
 80054b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ba:	e10e      	b.n	80056da <UART_SetConfig+0x2fe>
 80054bc:	2308      	movs	r3, #8
 80054be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054c2:	e10a      	b.n	80056da <UART_SetConfig+0x2fe>
 80054c4:	2310      	movs	r3, #16
 80054c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ca:	e106      	b.n	80056da <UART_SetConfig+0x2fe>
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a7c      	ldr	r2, [pc, #496]	; (80056c4 <UART_SetConfig+0x2e8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d138      	bne.n	8005548 <UART_SetConfig+0x16c>
 80054d6:	4b7a      	ldr	r3, [pc, #488]	; (80056c0 <UART_SetConfig+0x2e4>)
 80054d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054dc:	f003 030c 	and.w	r3, r3, #12
 80054e0:	2b0c      	cmp	r3, #12
 80054e2:	d82d      	bhi.n	8005540 <UART_SetConfig+0x164>
 80054e4:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <UART_SetConfig+0x110>)
 80054e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ea:	bf00      	nop
 80054ec:	08005521 	.word	0x08005521
 80054f0:	08005541 	.word	0x08005541
 80054f4:	08005541 	.word	0x08005541
 80054f8:	08005541 	.word	0x08005541
 80054fc:	08005531 	.word	0x08005531
 8005500:	08005541 	.word	0x08005541
 8005504:	08005541 	.word	0x08005541
 8005508:	08005541 	.word	0x08005541
 800550c:	08005529 	.word	0x08005529
 8005510:	08005541 	.word	0x08005541
 8005514:	08005541 	.word	0x08005541
 8005518:	08005541 	.word	0x08005541
 800551c:	08005539 	.word	0x08005539
 8005520:	2300      	movs	r3, #0
 8005522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005526:	e0d8      	b.n	80056da <UART_SetConfig+0x2fe>
 8005528:	2302      	movs	r3, #2
 800552a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800552e:	e0d4      	b.n	80056da <UART_SetConfig+0x2fe>
 8005530:	2304      	movs	r3, #4
 8005532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005536:	e0d0      	b.n	80056da <UART_SetConfig+0x2fe>
 8005538:	2308      	movs	r3, #8
 800553a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800553e:	e0cc      	b.n	80056da <UART_SetConfig+0x2fe>
 8005540:	2310      	movs	r3, #16
 8005542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005546:	e0c8      	b.n	80056da <UART_SetConfig+0x2fe>
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a5e      	ldr	r2, [pc, #376]	; (80056c8 <UART_SetConfig+0x2ec>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d125      	bne.n	800559e <UART_SetConfig+0x1c2>
 8005552:	4b5b      	ldr	r3, [pc, #364]	; (80056c0 <UART_SetConfig+0x2e4>)
 8005554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005558:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800555c:	2b30      	cmp	r3, #48	; 0x30
 800555e:	d016      	beq.n	800558e <UART_SetConfig+0x1b2>
 8005560:	2b30      	cmp	r3, #48	; 0x30
 8005562:	d818      	bhi.n	8005596 <UART_SetConfig+0x1ba>
 8005564:	2b20      	cmp	r3, #32
 8005566:	d00a      	beq.n	800557e <UART_SetConfig+0x1a2>
 8005568:	2b20      	cmp	r3, #32
 800556a:	d814      	bhi.n	8005596 <UART_SetConfig+0x1ba>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <UART_SetConfig+0x19a>
 8005570:	2b10      	cmp	r3, #16
 8005572:	d008      	beq.n	8005586 <UART_SetConfig+0x1aa>
 8005574:	e00f      	b.n	8005596 <UART_SetConfig+0x1ba>
 8005576:	2300      	movs	r3, #0
 8005578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800557c:	e0ad      	b.n	80056da <UART_SetConfig+0x2fe>
 800557e:	2302      	movs	r3, #2
 8005580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005584:	e0a9      	b.n	80056da <UART_SetConfig+0x2fe>
 8005586:	2304      	movs	r3, #4
 8005588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800558c:	e0a5      	b.n	80056da <UART_SetConfig+0x2fe>
 800558e:	2308      	movs	r3, #8
 8005590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005594:	e0a1      	b.n	80056da <UART_SetConfig+0x2fe>
 8005596:	2310      	movs	r3, #16
 8005598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800559c:	e09d      	b.n	80056da <UART_SetConfig+0x2fe>
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a4a      	ldr	r2, [pc, #296]	; (80056cc <UART_SetConfig+0x2f0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d125      	bne.n	80055f4 <UART_SetConfig+0x218>
 80055a8:	4b45      	ldr	r3, [pc, #276]	; (80056c0 <UART_SetConfig+0x2e4>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055b2:	2bc0      	cmp	r3, #192	; 0xc0
 80055b4:	d016      	beq.n	80055e4 <UART_SetConfig+0x208>
 80055b6:	2bc0      	cmp	r3, #192	; 0xc0
 80055b8:	d818      	bhi.n	80055ec <UART_SetConfig+0x210>
 80055ba:	2b80      	cmp	r3, #128	; 0x80
 80055bc:	d00a      	beq.n	80055d4 <UART_SetConfig+0x1f8>
 80055be:	2b80      	cmp	r3, #128	; 0x80
 80055c0:	d814      	bhi.n	80055ec <UART_SetConfig+0x210>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <UART_SetConfig+0x1f0>
 80055c6:	2b40      	cmp	r3, #64	; 0x40
 80055c8:	d008      	beq.n	80055dc <UART_SetConfig+0x200>
 80055ca:	e00f      	b.n	80055ec <UART_SetConfig+0x210>
 80055cc:	2300      	movs	r3, #0
 80055ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055d2:	e082      	b.n	80056da <UART_SetConfig+0x2fe>
 80055d4:	2302      	movs	r3, #2
 80055d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055da:	e07e      	b.n	80056da <UART_SetConfig+0x2fe>
 80055dc:	2304      	movs	r3, #4
 80055de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055e2:	e07a      	b.n	80056da <UART_SetConfig+0x2fe>
 80055e4:	2308      	movs	r3, #8
 80055e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ea:	e076      	b.n	80056da <UART_SetConfig+0x2fe>
 80055ec:	2310      	movs	r3, #16
 80055ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055f2:	e072      	b.n	80056da <UART_SetConfig+0x2fe>
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a35      	ldr	r2, [pc, #212]	; (80056d0 <UART_SetConfig+0x2f4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d12a      	bne.n	8005654 <UART_SetConfig+0x278>
 80055fe:	4b30      	ldr	r3, [pc, #192]	; (80056c0 <UART_SetConfig+0x2e4>)
 8005600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005608:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800560c:	d01a      	beq.n	8005644 <UART_SetConfig+0x268>
 800560e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005612:	d81b      	bhi.n	800564c <UART_SetConfig+0x270>
 8005614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005618:	d00c      	beq.n	8005634 <UART_SetConfig+0x258>
 800561a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800561e:	d815      	bhi.n	800564c <UART_SetConfig+0x270>
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <UART_SetConfig+0x250>
 8005624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005628:	d008      	beq.n	800563c <UART_SetConfig+0x260>
 800562a:	e00f      	b.n	800564c <UART_SetConfig+0x270>
 800562c:	2300      	movs	r3, #0
 800562e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005632:	e052      	b.n	80056da <UART_SetConfig+0x2fe>
 8005634:	2302      	movs	r3, #2
 8005636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800563a:	e04e      	b.n	80056da <UART_SetConfig+0x2fe>
 800563c:	2304      	movs	r3, #4
 800563e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005642:	e04a      	b.n	80056da <UART_SetConfig+0x2fe>
 8005644:	2308      	movs	r3, #8
 8005646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800564a:	e046      	b.n	80056da <UART_SetConfig+0x2fe>
 800564c:	2310      	movs	r3, #16
 800564e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005652:	e042      	b.n	80056da <UART_SetConfig+0x2fe>
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <UART_SetConfig+0x2dc>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d13a      	bne.n	80056d4 <UART_SetConfig+0x2f8>
 800565e:	4b18      	ldr	r3, [pc, #96]	; (80056c0 <UART_SetConfig+0x2e4>)
 8005660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005664:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005668:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800566c:	d01a      	beq.n	80056a4 <UART_SetConfig+0x2c8>
 800566e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005672:	d81b      	bhi.n	80056ac <UART_SetConfig+0x2d0>
 8005674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005678:	d00c      	beq.n	8005694 <UART_SetConfig+0x2b8>
 800567a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800567e:	d815      	bhi.n	80056ac <UART_SetConfig+0x2d0>
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <UART_SetConfig+0x2b0>
 8005684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005688:	d008      	beq.n	800569c <UART_SetConfig+0x2c0>
 800568a:	e00f      	b.n	80056ac <UART_SetConfig+0x2d0>
 800568c:	2300      	movs	r3, #0
 800568e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005692:	e022      	b.n	80056da <UART_SetConfig+0x2fe>
 8005694:	2302      	movs	r3, #2
 8005696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800569a:	e01e      	b.n	80056da <UART_SetConfig+0x2fe>
 800569c:	2304      	movs	r3, #4
 800569e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056a2:	e01a      	b.n	80056da <UART_SetConfig+0x2fe>
 80056a4:	2308      	movs	r3, #8
 80056a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056aa:	e016      	b.n	80056da <UART_SetConfig+0x2fe>
 80056ac:	2310      	movs	r3, #16
 80056ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056b2:	e012      	b.n	80056da <UART_SetConfig+0x2fe>
 80056b4:	cfff69f3 	.word	0xcfff69f3
 80056b8:	40008000 	.word	0x40008000
 80056bc:	40013800 	.word	0x40013800
 80056c0:	40021000 	.word	0x40021000
 80056c4:	40004400 	.word	0x40004400
 80056c8:	40004800 	.word	0x40004800
 80056cc:	40004c00 	.word	0x40004c00
 80056d0:	40005000 	.word	0x40005000
 80056d4:	2310      	movs	r3, #16
 80056d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4ab0      	ldr	r2, [pc, #704]	; (80059a0 <UART_SetConfig+0x5c4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	f040 809b 	bne.w	800581c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d827      	bhi.n	800573e <UART_SetConfig+0x362>
 80056ee:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <UART_SetConfig+0x318>)
 80056f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f4:	08005719 	.word	0x08005719
 80056f8:	08005721 	.word	0x08005721
 80056fc:	08005729 	.word	0x08005729
 8005700:	0800573f 	.word	0x0800573f
 8005704:	0800572f 	.word	0x0800572f
 8005708:	0800573f 	.word	0x0800573f
 800570c:	0800573f 	.word	0x0800573f
 8005710:	0800573f 	.word	0x0800573f
 8005714:	08005737 	.word	0x08005737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005718:	f7fe fb36 	bl	8003d88 <HAL_RCC_GetPCLK1Freq>
 800571c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800571e:	e014      	b.n	800574a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005720:	f7fe fb46 	bl	8003db0 <HAL_RCC_GetPCLK2Freq>
 8005724:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005726:	e010      	b.n	800574a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005728:	4b9e      	ldr	r3, [pc, #632]	; (80059a4 <UART_SetConfig+0x5c8>)
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800572c:	e00d      	b.n	800574a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800572e:	f7fe fa79 	bl	8003c24 <HAL_RCC_GetSysClockFreq>
 8005732:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005734:	e009      	b.n	800574a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800573c:	e005      	b.n	800574a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005748:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 8130 	beq.w	80059b2 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	4a94      	ldr	r2, [pc, #592]	; (80059a8 <UART_SetConfig+0x5cc>)
 8005758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800575c:	461a      	mov	r2, r3
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	fbb3 f3f2 	udiv	r3, r3, r2
 8005764:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	4413      	add	r3, r2
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	429a      	cmp	r2, r3
 8005774:	d305      	bcc.n	8005782 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	429a      	cmp	r2, r3
 8005780:	d903      	bls.n	800578a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005788:	e113      	b.n	80059b2 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	2200      	movs	r2, #0
 800578e:	60bb      	str	r3, [r7, #8]
 8005790:	60fa      	str	r2, [r7, #12]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	4a84      	ldr	r2, [pc, #528]	; (80059a8 <UART_SetConfig+0x5cc>)
 8005798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800579c:	b29b      	uxth	r3, r3
 800579e:	2200      	movs	r2, #0
 80057a0:	603b      	str	r3, [r7, #0]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057ac:	f7fa fd42 	bl	8000234 <__aeabi_uldivmod>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4610      	mov	r0, r2
 80057b6:	4619      	mov	r1, r3
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	f04f 0300 	mov.w	r3, #0
 80057c0:	020b      	lsls	r3, r1, #8
 80057c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057c6:	0202      	lsls	r2, r0, #8
 80057c8:	6979      	ldr	r1, [r7, #20]
 80057ca:	6849      	ldr	r1, [r1, #4]
 80057cc:	0849      	lsrs	r1, r1, #1
 80057ce:	2000      	movs	r0, #0
 80057d0:	460c      	mov	r4, r1
 80057d2:	4605      	mov	r5, r0
 80057d4:	eb12 0804 	adds.w	r8, r2, r4
 80057d8:	eb43 0905 	adc.w	r9, r3, r5
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	469a      	mov	sl, r3
 80057e4:	4693      	mov	fp, r2
 80057e6:	4652      	mov	r2, sl
 80057e8:	465b      	mov	r3, fp
 80057ea:	4640      	mov	r0, r8
 80057ec:	4649      	mov	r1, r9
 80057ee:	f7fa fd21 	bl	8000234 <__aeabi_uldivmod>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4613      	mov	r3, r2
 80057f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005800:	d308      	bcc.n	8005814 <UART_SetConfig+0x438>
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005808:	d204      	bcs.n	8005814 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6a3a      	ldr	r2, [r7, #32]
 8005810:	60da      	str	r2, [r3, #12]
 8005812:	e0ce      	b.n	80059b2 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800581a:	e0ca      	b.n	80059b2 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005824:	d166      	bne.n	80058f4 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8005826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800582a:	2b08      	cmp	r3, #8
 800582c:	d827      	bhi.n	800587e <UART_SetConfig+0x4a2>
 800582e:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <UART_SetConfig+0x458>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	08005859 	.word	0x08005859
 8005838:	08005861 	.word	0x08005861
 800583c:	08005869 	.word	0x08005869
 8005840:	0800587f 	.word	0x0800587f
 8005844:	0800586f 	.word	0x0800586f
 8005848:	0800587f 	.word	0x0800587f
 800584c:	0800587f 	.word	0x0800587f
 8005850:	0800587f 	.word	0x0800587f
 8005854:	08005877 	.word	0x08005877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005858:	f7fe fa96 	bl	8003d88 <HAL_RCC_GetPCLK1Freq>
 800585c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800585e:	e014      	b.n	800588a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005860:	f7fe faa6 	bl	8003db0 <HAL_RCC_GetPCLK2Freq>
 8005864:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005866:	e010      	b.n	800588a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005868:	4b4e      	ldr	r3, [pc, #312]	; (80059a4 <UART_SetConfig+0x5c8>)
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800586c:	e00d      	b.n	800588a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800586e:	f7fe f9d9 	bl	8003c24 <HAL_RCC_GetSysClockFreq>
 8005872:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005874:	e009      	b.n	800588a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800587c:	e005      	b.n	800588a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005888:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8090 	beq.w	80059b2 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	4a44      	ldr	r2, [pc, #272]	; (80059a8 <UART_SetConfig+0x5cc>)
 8005898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800589c:	461a      	mov	r2, r3
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80058a4:	005a      	lsls	r2, r3, #1
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	085b      	lsrs	r3, r3, #1
 80058ac:	441a      	add	r2, r3
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	2b0f      	cmp	r3, #15
 80058bc:	d916      	bls.n	80058ec <UART_SetConfig+0x510>
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c4:	d212      	bcs.n	80058ec <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f023 030f 	bic.w	r3, r3, #15
 80058ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	b29a      	uxth	r2, r3
 80058dc:	8bfb      	ldrh	r3, [r7, #30]
 80058de:	4313      	orrs	r3, r2
 80058e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	8bfa      	ldrh	r2, [r7, #30]
 80058e8:	60da      	str	r2, [r3, #12]
 80058ea:	e062      	b.n	80059b2 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058f2:	e05e      	b.n	80059b2 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d828      	bhi.n	800594e <UART_SetConfig+0x572>
 80058fc:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <UART_SetConfig+0x528>)
 80058fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005902:	bf00      	nop
 8005904:	08005929 	.word	0x08005929
 8005908:	08005931 	.word	0x08005931
 800590c:	08005939 	.word	0x08005939
 8005910:	0800594f 	.word	0x0800594f
 8005914:	0800593f 	.word	0x0800593f
 8005918:	0800594f 	.word	0x0800594f
 800591c:	0800594f 	.word	0x0800594f
 8005920:	0800594f 	.word	0x0800594f
 8005924:	08005947 	.word	0x08005947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005928:	f7fe fa2e 	bl	8003d88 <HAL_RCC_GetPCLK1Freq>
 800592c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800592e:	e014      	b.n	800595a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005930:	f7fe fa3e 	bl	8003db0 <HAL_RCC_GetPCLK2Freq>
 8005934:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005936:	e010      	b.n	800595a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005938:	4b1a      	ldr	r3, [pc, #104]	; (80059a4 <UART_SetConfig+0x5c8>)
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800593c:	e00d      	b.n	800595a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800593e:	f7fe f971 	bl	8003c24 <HAL_RCC_GetSysClockFreq>
 8005942:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005944:	e009      	b.n	800595a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800594a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800594c:	e005      	b.n	800595a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005958:	bf00      	nop
    }

    if (pclk != 0U)
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	2b00      	cmp	r3, #0
 800595e:	d028      	beq.n	80059b2 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	4a10      	ldr	r2, [pc, #64]	; (80059a8 <UART_SetConfig+0x5cc>)
 8005966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800596a:	461a      	mov	r2, r3
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	085b      	lsrs	r3, r3, #1
 8005978:	441a      	add	r2, r3
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005982:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	2b0f      	cmp	r3, #15
 8005988:	d910      	bls.n	80059ac <UART_SetConfig+0x5d0>
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005990:	d20c      	bcs.n	80059ac <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	b29a      	uxth	r2, r3
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60da      	str	r2, [r3, #12]
 800599c:	e009      	b.n	80059b2 <UART_SetConfig+0x5d6>
 800599e:	bf00      	nop
 80059a0:	40008000 	.word	0x40008000
 80059a4:	00f42400 	.word	0x00f42400
 80059a8:	08008258 	.word	0x08008258
      }
      else
      {
        ret = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2201      	movs	r2, #1
 80059be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2200      	movs	r2, #0
 80059c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2200      	movs	r2, #0
 80059cc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80059ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3730      	adds	r7, #48	; 0x30
 80059d6:	46bd      	mov	sp, r7
 80059d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080059dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a92:	f003 0320 	and.w	r3, r3, #32
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01a      	beq.n	8005af2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ada:	d10a      	bne.n	8005af2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	605a      	str	r2, [r3, #4]
  }
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b098      	sub	sp, #96	; 0x60
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b30:	f7fb fdaa 	bl	8001688 <HAL_GetTick>
 8005b34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d12f      	bne.n	8005ba4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f88e 	bl	8005c74 <UART_WaitOnFlagUntilTimeout>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d022      	beq.n	8005ba4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b72:	653b      	str	r3, [r7, #80]	; 0x50
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b7c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e6      	bne.n	8005b5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e063      	b.n	8005c6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d149      	bne.n	8005c46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f857 	bl	8005c74 <UART_WaitOnFlagUntilTimeout>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d03c      	beq.n	8005c46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005be0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bea:	633b      	str	r3, [r7, #48]	; 0x30
 8005bec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e6      	bne.n	8005bcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3308      	adds	r3, #8
 8005c04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f023 0301 	bic.w	r3, r3, #1
 8005c14:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c1e:	61fa      	str	r2, [r7, #28]
 8005c20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	69b9      	ldr	r1, [r7, #24]
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e5      	bne.n	8005bfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e012      	b.n	8005c6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3758      	adds	r7, #88	; 0x58
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	603b      	str	r3, [r7, #0]
 8005c80:	4613      	mov	r3, r2
 8005c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c84:	e049      	b.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8c:	d045      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c8e:	f7fb fcfb 	bl	8001688 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d302      	bcc.n	8005ca4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e048      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d031      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	f003 0308 	and.w	r3, r3, #8
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d110      	bne.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2208      	movs	r2, #8
 8005cca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f95b 	bl	8005f88 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e029      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cf4:	d111      	bne.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 f941 	bl	8005f88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e00f      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4013      	ands	r3, r2
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	bf0c      	ite	eq
 8005d2a:	2301      	moveq	r3, #1
 8005d2c:	2300      	movne	r3, #0
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	461a      	mov	r2, r3
 8005d32:	79fb      	ldrb	r3, [r7, #7]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d0a6      	beq.n	8005c86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b0a3      	sub	sp, #140	; 0x8c
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	88fa      	ldrh	r2, [r7, #6]
 8005d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	88fa      	ldrh	r2, [r7, #6]
 8005d64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d76:	d10e      	bne.n	8005d96 <UART_Start_Receive_IT+0x52>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d105      	bne.n	8005d8c <UART_Start_Receive_IT+0x48>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d8a:	e02d      	b.n	8005de8 <UART_Start_Receive_IT+0xa4>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	22ff      	movs	r2, #255	; 0xff
 8005d90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d94:	e028      	b.n	8005de8 <UART_Start_Receive_IT+0xa4>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10d      	bne.n	8005dba <UART_Start_Receive_IT+0x76>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d104      	bne.n	8005db0 <UART_Start_Receive_IT+0x6c>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	22ff      	movs	r2, #255	; 0xff
 8005daa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005dae:	e01b      	b.n	8005de8 <UART_Start_Receive_IT+0xa4>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	227f      	movs	r2, #127	; 0x7f
 8005db4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005db8:	e016      	b.n	8005de8 <UART_Start_Receive_IT+0xa4>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dc2:	d10d      	bne.n	8005de0 <UART_Start_Receive_IT+0x9c>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d104      	bne.n	8005dd6 <UART_Start_Receive_IT+0x92>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	227f      	movs	r2, #127	; 0x7f
 8005dd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005dd4:	e008      	b.n	8005de8 <UART_Start_Receive_IT+0xa4>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	223f      	movs	r2, #63	; 0x3f
 8005dda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005dde:	e003      	b.n	8005de8 <UART_Start_Receive_IT+0xa4>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2222      	movs	r2, #34	; 0x22
 8005df4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3308      	adds	r3, #8
 8005dfe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e02:	e853 3f00 	ldrex	r3, [r3]
 8005e06:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005e08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e0a:	f043 0301 	orr.w	r3, r3, #1
 8005e0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3308      	adds	r3, #8
 8005e18:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005e1c:	673a      	str	r2, [r7, #112]	; 0x70
 8005e1e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005e22:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005e2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e3      	bne.n	8005df8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e38:	d14f      	bne.n	8005eda <UART_Start_Receive_IT+0x196>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005e40:	88fa      	ldrh	r2, [r7, #6]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d349      	bcc.n	8005eda <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e4e:	d107      	bne.n	8005e60 <UART_Start_Receive_IT+0x11c>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d103      	bne.n	8005e60 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4a47      	ldr	r2, [pc, #284]	; (8005f78 <UART_Start_Receive_IT+0x234>)
 8005e5c:	675a      	str	r2, [r3, #116]	; 0x74
 8005e5e:	e002      	b.n	8005e66 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4a46      	ldr	r2, [pc, #280]	; (8005f7c <UART_Start_Receive_IT+0x238>)
 8005e64:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01a      	beq.n	8005ea4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e76:	e853 3f00 	ldrex	r3, [r3]
 8005e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e92:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e98:	e841 2300 	strex	r3, r2, [r1]
 8005e9c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1e4      	bne.n	8005e6e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eae:	e853 3f00 	ldrex	r3, [r3]
 8005eb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005ec4:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ec6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005eca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ecc:	e841 2300 	strex	r3, r2, [r1]
 8005ed0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e5      	bne.n	8005ea4 <UART_Start_Receive_IT+0x160>
 8005ed8:	e046      	b.n	8005f68 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee2:	d107      	bne.n	8005ef4 <UART_Start_Receive_IT+0x1b0>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d103      	bne.n	8005ef4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4a24      	ldr	r2, [pc, #144]	; (8005f80 <UART_Start_Receive_IT+0x23c>)
 8005ef0:	675a      	str	r2, [r3, #116]	; 0x74
 8005ef2:	e002      	b.n	8005efa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4a23      	ldr	r2, [pc, #140]	; (8005f84 <UART_Start_Receive_IT+0x240>)
 8005ef8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d019      	beq.n	8005f36 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005f16:	677b      	str	r3, [r7, #116]	; 0x74
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f20:	637b      	str	r3, [r7, #52]	; 0x34
 8005f22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e6      	bne.n	8005f02 <UART_Start_Receive_IT+0x1be>
 8005f34:	e018      	b.n	8005f68 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	613b      	str	r3, [r7, #16]
   return(result);
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f043 0320 	orr.w	r3, r3, #32
 8005f4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f54:	623b      	str	r3, [r7, #32]
 8005f56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	69f9      	ldr	r1, [r7, #28]
 8005f5a:	6a3a      	ldr	r2, [r7, #32]
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e6      	bne.n	8005f36 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	378c      	adds	r7, #140	; 0x8c
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	080067a9 	.word	0x080067a9
 8005f7c:	08006449 	.word	0x08006449
 8005f80:	08006291 	.word	0x08006291
 8005f84:	080060d9 	.word	0x080060d9

08005f88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b095      	sub	sp, #84	; 0x54
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fae:	643b      	str	r3, [r7, #64]	; 0x40
 8005fb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e6      	bne.n	8005f90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3308      	adds	r3, #8
 8005fc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	f023 0301 	bic.w	r3, r3, #1
 8005fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e3      	bne.n	8005fc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d118      	bne.n	8006034 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f023 0310 	bic.w	r3, r3, #16
 8006016:	647b      	str	r3, [r7, #68]	; 0x44
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	6979      	ldr	r1, [r7, #20]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	613b      	str	r3, [r7, #16]
   return(result);
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e6      	bne.n	8006002 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006048:	bf00      	nop
 800604a:	3754      	adds	r7, #84	; 0x54
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7ff f99c 	bl	80053b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006078:	bf00      	nop
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	60bb      	str	r3, [r7, #8]
   return(result);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609c:	61fb      	str	r3, [r7, #28]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	61bb      	str	r3, [r7, #24]
 80060a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6979      	ldr	r1, [r7, #20]
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	613b      	str	r3, [r7, #16]
   return(result);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e6      	bne.n	8006088 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff f967 	bl	800539c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ce:	bf00      	nop
 80060d0:	3720      	adds	r7, #32
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b09c      	sub	sp, #112	; 0x70
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80060e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060f0:	2b22      	cmp	r3, #34	; 0x22
 80060f2:	f040 80be 	bne.w	8006272 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006100:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006104:	b2d9      	uxtb	r1, r3
 8006106:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800610a:	b2da      	uxtb	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006110:	400a      	ands	r2, r1
 8006112:	b2d2      	uxtb	r2, r2
 8006114:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	f040 80a1 	bne.w	8006282 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800614e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006154:	66bb      	str	r3, [r7, #104]	; 0x68
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800615e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006160:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006162:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006164:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006166:	e841 2300 	strex	r3, r2, [r1]
 800616a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800616c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1e6      	bne.n	8006140 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3308      	adds	r3, #8
 8006178:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006184:	f023 0301 	bic.w	r3, r3, #1
 8006188:	667b      	str	r3, [r7, #100]	; 0x64
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3308      	adds	r3, #8
 8006190:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006192:	647a      	str	r2, [r7, #68]	; 0x44
 8006194:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e5      	bne.n	8006172 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a33      	ldr	r2, [pc, #204]	; (800628c <UART_RxISR_8BIT+0x1b4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d01f      	beq.n	8006204 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d018      	beq.n	8006204 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	623b      	str	r3, [r7, #32]
   return(result);
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061e6:	663b      	str	r3, [r7, #96]	; 0x60
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061f0:	633b      	str	r3, [r7, #48]	; 0x30
 80061f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e6      	bne.n	80061d2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006208:	2b01      	cmp	r3, #1
 800620a:	d12e      	bne.n	800626a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	e853 3f00 	ldrex	r3, [r3]
 800621e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0310 	bic.w	r3, r3, #16
 8006226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006234:	69b9      	ldr	r1, [r7, #24]
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	e841 2300 	strex	r3, r2, [r1]
 800623c:	617b      	str	r3, [r7, #20]
   return(result);
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e6      	bne.n	8006212 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	f003 0310 	and.w	r3, r3, #16
 800624e:	2b10      	cmp	r3, #16
 8006250:	d103      	bne.n	800625a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2210      	movs	r2, #16
 8006258:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006260:	4619      	mov	r1, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff f8ae 	bl	80053c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006268:	e00b      	b.n	8006282 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7fa fd98 	bl	8000da0 <HAL_UART_RxCpltCallback>
}
 8006270:	e007      	b.n	8006282 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	699a      	ldr	r2, [r3, #24]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f042 0208 	orr.w	r2, r2, #8
 8006280:	619a      	str	r2, [r3, #24]
}
 8006282:	bf00      	nop
 8006284:	3770      	adds	r7, #112	; 0x70
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	40008000 	.word	0x40008000

08006290 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b09c      	sub	sp, #112	; 0x70
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800629e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062a8:	2b22      	cmp	r3, #34	; 0x22
 80062aa:	f040 80be 	bne.w	800642a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062bc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80062be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80062c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80062c6:	4013      	ands	r3, r2
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d2:	1c9a      	adds	r2, r3, #2
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062de:	b29b      	uxth	r3, r3
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f040 80a1 	bne.w	800643a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006300:	e853 3f00 	ldrex	r3, [r3]
 8006304:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800630c:	667b      	str	r3, [r7, #100]	; 0x64
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006316:	657b      	str	r3, [r7, #84]	; 0x54
 8006318:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800631c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e6      	bne.n	80062f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3308      	adds	r3, #8
 8006330:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	f023 0301 	bic.w	r3, r3, #1
 8006340:	663b      	str	r3, [r7, #96]	; 0x60
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3308      	adds	r3, #8
 8006348:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800634a:	643a      	str	r2, [r7, #64]	; 0x40
 800634c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e5      	bne.n	800632a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a33      	ldr	r2, [pc, #204]	; (8006444 <UART_RxISR_16BIT+0x1b4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d01f      	beq.n	80063bc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d018      	beq.n	80063bc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	61fb      	str	r3, [r7, #28]
   return(result);
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800639e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	461a      	mov	r2, r3
 80063a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063aa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b0:	e841 2300 	strex	r3, r2, [r1]
 80063b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e6      	bne.n	800638a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d12e      	bne.n	8006422 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f023 0310 	bic.w	r3, r3, #16
 80063de:	65bb      	str	r3, [r7, #88]	; 0x58
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063e8:	61bb      	str	r3, [r7, #24]
 80063ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6979      	ldr	r1, [r7, #20]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	613b      	str	r3, [r7, #16]
   return(result);
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e6      	bne.n	80063ca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	f003 0310 	and.w	r3, r3, #16
 8006406:	2b10      	cmp	r3, #16
 8006408:	d103      	bne.n	8006412 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2210      	movs	r2, #16
 8006410:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006418:	4619      	mov	r1, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7fe ffd2 	bl	80053c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006420:	e00b      	b.n	800643a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7fa fcbc 	bl	8000da0 <HAL_UART_RxCpltCallback>
}
 8006428:	e007      	b.n	800643a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699a      	ldr	r2, [r3, #24]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0208 	orr.w	r2, r2, #8
 8006438:	619a      	str	r2, [r3, #24]
}
 800643a:	bf00      	nop
 800643c:	3770      	adds	r7, #112	; 0x70
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40008000 	.word	0x40008000

08006448 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b0ac      	sub	sp, #176	; 0xb0
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006456:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800647e:	2b22      	cmp	r3, #34	; 0x22
 8006480:	f040 8182 	bne.w	8006788 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800648a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800648e:	e125      	b.n	80066dc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800649a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800649e:	b2d9      	uxtb	r1, r3
 80064a0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064aa:	400a      	ands	r2, r1
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	3b01      	subs	r3, #1
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80064d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064da:	f003 0307 	and.w	r3, r3, #7
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d053      	beq.n	800658a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d011      	beq.n	8006512 <UART_RxISR_8BIT_FIFOEN+0xca>
 80064ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80064f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00b      	beq.n	8006512 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2201      	movs	r2, #1
 8006500:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006508:	f043 0201 	orr.w	r2, r3, #1
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d011      	beq.n	8006542 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800651e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2202      	movs	r2, #2
 8006530:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006538:	f043 0204 	orr.w	r2, r3, #4
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	2b00      	cmp	r3, #0
 800654c:	d011      	beq.n	8006572 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800654e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00b      	beq.n	8006572 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2204      	movs	r2, #4
 8006560:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006568:	f043 0202 	orr.w	r2, r3, #2
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006578:	2b00      	cmp	r3, #0
 800657a:	d006      	beq.n	800658a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7fe ff17 	bl	80053b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	f040 80a2 	bne.w	80066dc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065a0:	e853 3f00 	ldrex	r3, [r3]
 80065a4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80065a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	461a      	mov	r2, r3
 80065b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065bc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80065c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80065c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e4      	bne.n	8006598 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3308      	adds	r3, #8
 80065d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80065de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065e4:	f023 0301 	bic.w	r3, r3, #1
 80065e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3308      	adds	r3, #8
 80065f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065f6:	66ba      	str	r2, [r7, #104]	; 0x68
 80065f8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80065fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006604:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e1      	bne.n	80065ce <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2220      	movs	r2, #32
 800660e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a5f      	ldr	r2, [pc, #380]	; (80067a0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d021      	beq.n	800666c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d01a      	beq.n	800666c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800663e:	e853 3f00 	ldrex	r3, [r3]
 8006642:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006646:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800664a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006658:	657b      	str	r3, [r7, #84]	; 0x54
 800665a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800665e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e4      	bne.n	8006636 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d130      	bne.n	80066d6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	f023 0310 	bic.w	r3, r3, #16
 800668e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800669c:	643b      	str	r3, [r7, #64]	; 0x40
 800669e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066a4:	e841 2300 	strex	r3, r2, [r1]
 80066a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e4      	bne.n	800667a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	f003 0310 	and.w	r3, r3, #16
 80066ba:	2b10      	cmp	r3, #16
 80066bc:	d103      	bne.n	80066c6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2210      	movs	r2, #16
 80066c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7fe fe78 	bl	80053c4 <HAL_UARTEx_RxEventCallback>
 80066d4:	e002      	b.n	80066dc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7fa fb62 	bl	8000da0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80066dc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d006      	beq.n	80066f2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80066e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066e8:	f003 0320 	and.w	r3, r3, #32
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f47f aecf 	bne.w	8006490 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066f8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80066fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006700:	2b00      	cmp	r3, #0
 8006702:	d049      	beq.n	8006798 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800670a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800670e:	429a      	cmp	r2, r3
 8006710:	d242      	bcs.n	8006798 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3308      	adds	r3, #8
 8006718:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	61fb      	str	r3, [r7, #28]
   return(result);
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3308      	adds	r3, #8
 8006732:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006736:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006738:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800673c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e3      	bne.n	8006712 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a15      	ldr	r2, [pc, #84]	; (80067a4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800674e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	e853 3f00 	ldrex	r3, [r3]
 800675c:	60bb      	str	r3, [r7, #8]
   return(result);
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	f043 0320 	orr.w	r3, r3, #32
 8006764:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006772:	61bb      	str	r3, [r7, #24]
 8006774:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006776:	6979      	ldr	r1, [r7, #20]
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	613b      	str	r3, [r7, #16]
   return(result);
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e4      	bne.n	8006750 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006786:	e007      	b.n	8006798 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0208 	orr.w	r2, r2, #8
 8006796:	619a      	str	r2, [r3, #24]
}
 8006798:	bf00      	nop
 800679a:	37b0      	adds	r7, #176	; 0xb0
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40008000 	.word	0x40008000
 80067a4:	080060d9 	.word	0x080060d9

080067a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b0ae      	sub	sp, #184	; 0xb8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067b6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067de:	2b22      	cmp	r3, #34	; 0x22
 80067e0:	f040 8186 	bne.w	8006af0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80067ea:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80067ee:	e129      	b.n	8006a44 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006802:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006806:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800680a:	4013      	ands	r3, r2
 800680c:	b29a      	uxth	r2, r3
 800680e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006812:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006818:	1c9a      	adds	r2, r3, #2
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800683a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	2b00      	cmp	r3, #0
 8006844:	d053      	beq.n	80068ee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006846:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d011      	beq.n	8006876 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00b      	beq.n	8006876 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2201      	movs	r2, #1
 8006864:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686c:	f043 0201 	orr.w	r2, r3, #1
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006876:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d011      	beq.n	80068a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006882:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00b      	beq.n	80068a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2202      	movs	r2, #2
 8006894:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689c:	f043 0204 	orr.w	r2, r3, #4
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d011      	beq.n	80068d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80068b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00b      	beq.n	80068d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2204      	movs	r2, #4
 80068c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068cc:	f043 0202 	orr.w	r2, r3, #2
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d006      	beq.n	80068ee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7fe fd65 	bl	80053b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f040 80a4 	bne.w	8006a44 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800690a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800690c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	461a      	mov	r2, r3
 800691a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800691e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006922:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006924:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006926:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800692a:	e841 2300 	strex	r3, r2, [r1]
 800692e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1e2      	bne.n	80068fc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3308      	adds	r3, #8
 800693c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800694c:	f023 0301 	bic.w	r3, r3, #1
 8006950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3308      	adds	r3, #8
 800695a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800695e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006960:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006962:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006964:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800696c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1e1      	bne.n	8006936 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2220      	movs	r2, #32
 8006976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a5f      	ldr	r2, [pc, #380]	; (8006b08 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d021      	beq.n	80069d4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d01a      	beq.n	80069d4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80069c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80069c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069c8:	e841 2300 	strex	r3, r2, [r1]
 80069cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e4      	bne.n	800699e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d130      	bne.n	8006a3e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ea:	e853 3f00 	ldrex	r3, [r3]
 80069ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f2:	f023 0310 	bic.w	r3, r3, #16
 80069f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a04:	647b      	str	r3, [r7, #68]	; 0x44
 8006a06:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a0c:	e841 2300 	strex	r3, r2, [r1]
 8006a10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e4      	bne.n	80069e2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	f003 0310 	and.w	r3, r3, #16
 8006a22:	2b10      	cmp	r3, #16
 8006a24:	d103      	bne.n	8006a2e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2210      	movs	r2, #16
 8006a2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7fe fcc4 	bl	80053c4 <HAL_UARTEx_RxEventCallback>
 8006a3c:	e002      	b.n	8006a44 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fa f9ae 	bl	8000da0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a44:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d006      	beq.n	8006a5a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006a4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a50:	f003 0320 	and.w	r3, r3, #32
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f47f aecb 	bne.w	80067f0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a60:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a64:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d049      	beq.n	8006b00 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a72:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d242      	bcs.n	8006b00 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3308      	adds	r3, #8
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	623b      	str	r3, [r7, #32]
   return(result);
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3308      	adds	r3, #8
 8006a9a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006a9e:	633a      	str	r2, [r7, #48]	; 0x30
 8006aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e3      	bne.n	8006a7a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a15      	ldr	r2, [pc, #84]	; (8006b0c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006ab6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f043 0320 	orr.w	r3, r3, #32
 8006acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ada:	61fb      	str	r3, [r7, #28]
 8006adc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	69b9      	ldr	r1, [r7, #24]
 8006ae0:	69fa      	ldr	r2, [r7, #28]
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	617b      	str	r3, [r7, #20]
   return(result);
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e4      	bne.n	8006ab8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006aee:	e007      	b.n	8006b00 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699a      	ldr	r2, [r3, #24]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0208 	orr.w	r2, r2, #8
 8006afe:	619a      	str	r2, [r3, #24]
}
 8006b00:	bf00      	nop
 8006b02:	37b8      	adds	r7, #184	; 0xb8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	40008000 	.word	0x40008000
 8006b0c:	08006291 	.word	0x08006291

08006b10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d101      	bne.n	8006b62 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e027      	b.n	8006bb2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2224      	movs	r2, #36	; 0x24
 8006b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0201 	bic.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d101      	bne.n	8006bd6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e02d      	b.n	8006c32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2224      	movs	r2, #36	; 0x24
 8006be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0201 	bic.w	r2, r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f850 	bl	8006cb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d101      	bne.n	8006c52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c4e:	2302      	movs	r3, #2
 8006c50:	e02d      	b.n	8006cae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2224      	movs	r2, #36	; 0x24
 8006c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 0201 	bic.w	r2, r2, #1
 8006c78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f812 	bl	8006cb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d108      	bne.n	8006cda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006cd8:	e031      	b.n	8006d3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006cda:	2308      	movs	r3, #8
 8006cdc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006cde:	2308      	movs	r3, #8
 8006ce0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	0e5b      	lsrs	r3, r3, #25
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	f003 0307 	and.w	r3, r3, #7
 8006cf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	0f5b      	lsrs	r3, r3, #29
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d02:	7bbb      	ldrb	r3, [r7, #14]
 8006d04:	7b3a      	ldrb	r2, [r7, #12]
 8006d06:	4911      	ldr	r1, [pc, #68]	; (8006d4c <UARTEx_SetNbDataToProcess+0x94>)
 8006d08:	5c8a      	ldrb	r2, [r1, r2]
 8006d0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d0e:	7b3a      	ldrb	r2, [r7, #12]
 8006d10:	490f      	ldr	r1, [pc, #60]	; (8006d50 <UARTEx_SetNbDataToProcess+0x98>)
 8006d12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d14:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	7b7a      	ldrb	r2, [r7, #13]
 8006d24:	4909      	ldr	r1, [pc, #36]	; (8006d4c <UARTEx_SetNbDataToProcess+0x94>)
 8006d26:	5c8a      	ldrb	r2, [r1, r2]
 8006d28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d2c:	7b7a      	ldrb	r2, [r7, #13]
 8006d2e:	4908      	ldr	r1, [pc, #32]	; (8006d50 <UARTEx_SetNbDataToProcess+0x98>)
 8006d30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d32:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d3e:	bf00      	nop
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	08008270 	.word	0x08008270
 8006d50:	08008278 	.word	0x08008278

08006d54 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b08b      	sub	sp, #44	; 0x2c
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	fa93 f3a3 	rbit	r3, r3
 8006d6e:	613b      	str	r3, [r7, #16]
  return result;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006d7a:	2320      	movs	r3, #32
 8006d7c:	e003      	b.n	8006d86 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	fab3 f383 	clz	r3, r3
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	005b      	lsls	r3, r3, #1
 8006d88:	2103      	movs	r1, #3
 8006d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8e:	43db      	mvns	r3, r3
 8006d90:	401a      	ands	r2, r3
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	fa93 f3a3 	rbit	r3, r3
 8006d9c:	61fb      	str	r3, [r7, #28]
  return result;
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006da8:	2320      	movs	r3, #32
 8006daa:	e003      	b.n	8006db4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	fab3 f383 	clz	r3, r3
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	601a      	str	r2, [r3, #0]
}
 8006dc2:	bf00      	nop
 8006dc4:	372c      	adds	r7, #44	; 0x2c
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b085      	sub	sp, #20
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	43db      	mvns	r3, r3
 8006de2:	401a      	ands	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	fb01 f303 	mul.w	r3, r1, r3
 8006dec:	431a      	orrs	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	605a      	str	r2, [r3, #4]
}
 8006df2:	bf00      	nop
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b08b      	sub	sp, #44	; 0x2c
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	fa93 f3a3 	rbit	r3, r3
 8006e18:	613b      	str	r3, [r7, #16]
  return result;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006e24:	2320      	movs	r3, #32
 8006e26:	e003      	b.n	8006e30 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	fab3 f383 	clz	r3, r3
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	2103      	movs	r1, #3
 8006e34:	fa01 f303 	lsl.w	r3, r1, r3
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	401a      	ands	r2, r3
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	fa93 f3a3 	rbit	r3, r3
 8006e46:	61fb      	str	r3, [r7, #28]
  return result;
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006e52:	2320      	movs	r3, #32
 8006e54:	e003      	b.n	8006e5e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	fab3 f383 	clz	r3, r3
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	005b      	lsls	r3, r3, #1
 8006e60:	6879      	ldr	r1, [r7, #4]
 8006e62:	fa01 f303 	lsl.w	r3, r1, r3
 8006e66:	431a      	orrs	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006e6c:	bf00      	nop
 8006e6e:	372c      	adds	r7, #44	; 0x2c
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b08b      	sub	sp, #44	; 0x2c
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	fa93 f3a3 	rbit	r3, r3
 8006e92:	613b      	str	r3, [r7, #16]
  return result;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006e9e:	2320      	movs	r3, #32
 8006ea0:	e003      	b.n	8006eaa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	fab3 f383 	clz	r3, r3
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	2103      	movs	r1, #3
 8006eae:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb2:	43db      	mvns	r3, r3
 8006eb4:	401a      	ands	r2, r3
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	fa93 f3a3 	rbit	r3, r3
 8006ec0:	61fb      	str	r3, [r7, #28]
  return result;
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006ecc:	2320      	movs	r3, #32
 8006ece:	e003      	b.n	8006ed8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	fab3 f383 	clz	r3, r3
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	6879      	ldr	r1, [r7, #4]
 8006edc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee0:	431a      	orrs	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	60da      	str	r2, [r3, #12]
}
 8006ee6:	bf00      	nop
 8006ee8:	372c      	adds	r7, #44	; 0x2c
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b08b      	sub	sp, #44	; 0x2c
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a1a      	ldr	r2, [r3, #32]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	fa93 f3a3 	rbit	r3, r3
 8006f0c:	613b      	str	r3, [r7, #16]
  return result;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006f18:	2320      	movs	r3, #32
 8006f1a:	e003      	b.n	8006f24 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	fab3 f383 	clz	r3, r3
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	210f      	movs	r1, #15
 8006f28:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2c:	43db      	mvns	r3, r3
 8006f2e:	401a      	ands	r2, r3
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	fa93 f3a3 	rbit	r3, r3
 8006f3a:	61fb      	str	r3, [r7, #28]
  return result;
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006f46:	2320      	movs	r3, #32
 8006f48:	e003      	b.n	8006f52 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	fab3 f383 	clz	r3, r3
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	fa01 f303 	lsl.w	r3, r1, r3
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006f60:	bf00      	nop
 8006f62:	372c      	adds	r7, #44	; 0x2c
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b08b      	sub	sp, #44	; 0x2c
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	0a1b      	lsrs	r3, r3, #8
 8006f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	fa93 f3a3 	rbit	r3, r3
 8006f88:	613b      	str	r3, [r7, #16]
  return result;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006f94:	2320      	movs	r3, #32
 8006f96:	e003      	b.n	8006fa0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	fab3 f383 	clz	r3, r3
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	210f      	movs	r1, #15
 8006fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa8:	43db      	mvns	r3, r3
 8006faa:	401a      	ands	r2, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	0a1b      	lsrs	r3, r3, #8
 8006fb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	fa93 f3a3 	rbit	r3, r3
 8006fb8:	61fb      	str	r3, [r7, #28]
  return result;
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006fc4:	2320      	movs	r3, #32
 8006fc6:	e003      	b.n	8006fd0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	fab3 f383 	clz	r3, r3
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006fde:	bf00      	nop
 8006fe0:	372c      	adds	r7, #44	; 0x2c
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b088      	sub	sp, #32
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	fa93 f3a3 	rbit	r3, r3
 8007000:	60fb      	str	r3, [r7, #12]
  return result;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <LL_GPIO_Init+0x26>
    return 32U;
 800700c:	2320      	movs	r3, #32
 800700e:	e003      	b.n	8007018 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	fab3 f383 	clz	r3, r3
 8007016:	b2db      	uxtb	r3, r3
 8007018:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800701a:	e047      	b.n	80070ac <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	2101      	movs	r1, #1
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	fa01 f303 	lsl.w	r3, r1, r3
 8007028:	4013      	ands	r3, r2
 800702a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d039      	beq.n	80070a6 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d003      	beq.n	8007042 <LL_GPIO_Init+0x58>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b02      	cmp	r3, #2
 8007040:	d10d      	bne.n	800705e <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	461a      	mov	r2, r3
 8007048:	69b9      	ldr	r1, [r7, #24]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7ff fed7 	bl	8006dfe <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	461a      	mov	r2, r3
 8007056:	69b9      	ldr	r1, [r7, #24]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7ff feb8 	bl	8006dce <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	461a      	mov	r2, r3
 8007064:	69b9      	ldr	r1, [r7, #24]
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7ff ff06 	bl	8006e78 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	2b02      	cmp	r3, #2
 8007072:	d111      	bne.n	8007098 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	2bff      	cmp	r3, #255	; 0xff
 8007078:	d807      	bhi.n	800708a <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	461a      	mov	r2, r3
 8007080:	69b9      	ldr	r1, [r7, #24]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff ff35 	bl	8006ef2 <LL_GPIO_SetAFPin_0_7>
 8007088:	e006      	b.n	8007098 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	461a      	mov	r2, r3
 8007090:	69b9      	ldr	r1, [r7, #24]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7ff ff6a 	bl	8006f6c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	461a      	mov	r2, r3
 800709e:	69b9      	ldr	r1, [r7, #24]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff fe57 	bl	8006d54 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	3301      	adds	r3, #1
 80070aa:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	fa22 f303 	lsr.w	r3, r2, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1b0      	bne.n	800701c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3720      	adds	r7, #32
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80070cc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80070d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	43db      	mvns	r3, r3
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	4013      	ands	r3, r2
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80070fa:	b084      	sub	sp, #16
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	f107 0014 	add.w	r0, r7, #20
 8007108:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	b004      	add	sp, #16
 800713a:	4770      	bx	lr

0800713c <__errno>:
 800713c:	4b01      	ldr	r3, [pc, #4]	; (8007144 <__errno+0x8>)
 800713e:	6818      	ldr	r0, [r3, #0]
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	20000010 	.word	0x20000010

08007148 <__libc_init_array>:
 8007148:	b570      	push	{r4, r5, r6, lr}
 800714a:	4d0d      	ldr	r5, [pc, #52]	; (8007180 <__libc_init_array+0x38>)
 800714c:	2600      	movs	r6, #0
 800714e:	4c0d      	ldr	r4, [pc, #52]	; (8007184 <__libc_init_array+0x3c>)
 8007150:	1b64      	subs	r4, r4, r5
 8007152:	10a4      	asrs	r4, r4, #2
 8007154:	42a6      	cmp	r6, r4
 8007156:	d109      	bne.n	800716c <__libc_init_array+0x24>
 8007158:	4d0b      	ldr	r5, [pc, #44]	; (8007188 <__libc_init_array+0x40>)
 800715a:	2600      	movs	r6, #0
 800715c:	4c0b      	ldr	r4, [pc, #44]	; (800718c <__libc_init_array+0x44>)
 800715e:	f001 f831 	bl	80081c4 <_init>
 8007162:	1b64      	subs	r4, r4, r5
 8007164:	10a4      	asrs	r4, r4, #2
 8007166:	42a6      	cmp	r6, r4
 8007168:	d105      	bne.n	8007176 <__libc_init_array+0x2e>
 800716a:	bd70      	pop	{r4, r5, r6, pc}
 800716c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007170:	3601      	adds	r6, #1
 8007172:	4798      	blx	r3
 8007174:	e7ee      	b.n	8007154 <__libc_init_array+0xc>
 8007176:	f855 3b04 	ldr.w	r3, [r5], #4
 800717a:	3601      	adds	r6, #1
 800717c:	4798      	blx	r3
 800717e:	e7f2      	b.n	8007166 <__libc_init_array+0x1e>
 8007180:	08008320 	.word	0x08008320
 8007184:	08008320 	.word	0x08008320
 8007188:	08008320 	.word	0x08008320
 800718c:	08008324 	.word	0x08008324

08007190 <memset>:
 8007190:	4402      	add	r2, r0
 8007192:	4603      	mov	r3, r0
 8007194:	4293      	cmp	r3, r2
 8007196:	d100      	bne.n	800719a <memset+0xa>
 8007198:	4770      	bx	lr
 800719a:	f803 1b01 	strb.w	r1, [r3], #1
 800719e:	e7f9      	b.n	8007194 <memset+0x4>

080071a0 <iprintf>:
 80071a0:	b40f      	push	{r0, r1, r2, r3}
 80071a2:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <iprintf+0x2c>)
 80071a4:	b513      	push	{r0, r1, r4, lr}
 80071a6:	681c      	ldr	r4, [r3, #0]
 80071a8:	b124      	cbz	r4, 80071b4 <iprintf+0x14>
 80071aa:	69a3      	ldr	r3, [r4, #24]
 80071ac:	b913      	cbnz	r3, 80071b4 <iprintf+0x14>
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 fa5c 	bl	800766c <__sinit>
 80071b4:	ab05      	add	r3, sp, #20
 80071b6:	9a04      	ldr	r2, [sp, #16]
 80071b8:	68a1      	ldr	r1, [r4, #8]
 80071ba:	4620      	mov	r0, r4
 80071bc:	9301      	str	r3, [sp, #4]
 80071be:	f000 fc65 	bl	8007a8c <_vfiprintf_r>
 80071c2:	b002      	add	sp, #8
 80071c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c8:	b004      	add	sp, #16
 80071ca:	4770      	bx	lr
 80071cc:	20000010 	.word	0x20000010

080071d0 <_puts_r>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	460e      	mov	r6, r1
 80071d4:	4605      	mov	r5, r0
 80071d6:	b118      	cbz	r0, 80071e0 <_puts_r+0x10>
 80071d8:	6983      	ldr	r3, [r0, #24]
 80071da:	b90b      	cbnz	r3, 80071e0 <_puts_r+0x10>
 80071dc:	f000 fa46 	bl	800766c <__sinit>
 80071e0:	69ab      	ldr	r3, [r5, #24]
 80071e2:	68ac      	ldr	r4, [r5, #8]
 80071e4:	b913      	cbnz	r3, 80071ec <_puts_r+0x1c>
 80071e6:	4628      	mov	r0, r5
 80071e8:	f000 fa40 	bl	800766c <__sinit>
 80071ec:	4b2c      	ldr	r3, [pc, #176]	; (80072a0 <_puts_r+0xd0>)
 80071ee:	429c      	cmp	r4, r3
 80071f0:	d120      	bne.n	8007234 <_puts_r+0x64>
 80071f2:	686c      	ldr	r4, [r5, #4]
 80071f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071f6:	07db      	lsls	r3, r3, #31
 80071f8:	d405      	bmi.n	8007206 <_puts_r+0x36>
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	0598      	lsls	r0, r3, #22
 80071fe:	d402      	bmi.n	8007206 <_puts_r+0x36>
 8007200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007202:	f000 fad1 	bl	80077a8 <__retarget_lock_acquire_recursive>
 8007206:	89a3      	ldrh	r3, [r4, #12]
 8007208:	0719      	lsls	r1, r3, #28
 800720a:	d51d      	bpl.n	8007248 <_puts_r+0x78>
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	b1db      	cbz	r3, 8007248 <_puts_r+0x78>
 8007210:	3e01      	subs	r6, #1
 8007212:	68a3      	ldr	r3, [r4, #8]
 8007214:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007218:	3b01      	subs	r3, #1
 800721a:	60a3      	str	r3, [r4, #8]
 800721c:	bb39      	cbnz	r1, 800726e <_puts_r+0x9e>
 800721e:	2b00      	cmp	r3, #0
 8007220:	da38      	bge.n	8007294 <_puts_r+0xc4>
 8007222:	4622      	mov	r2, r4
 8007224:	210a      	movs	r1, #10
 8007226:	4628      	mov	r0, r5
 8007228:	f000 f848 	bl	80072bc <__swbuf_r>
 800722c:	3001      	adds	r0, #1
 800722e:	d011      	beq.n	8007254 <_puts_r+0x84>
 8007230:	250a      	movs	r5, #10
 8007232:	e011      	b.n	8007258 <_puts_r+0x88>
 8007234:	4b1b      	ldr	r3, [pc, #108]	; (80072a4 <_puts_r+0xd4>)
 8007236:	429c      	cmp	r4, r3
 8007238:	d101      	bne.n	800723e <_puts_r+0x6e>
 800723a:	68ac      	ldr	r4, [r5, #8]
 800723c:	e7da      	b.n	80071f4 <_puts_r+0x24>
 800723e:	4b1a      	ldr	r3, [pc, #104]	; (80072a8 <_puts_r+0xd8>)
 8007240:	429c      	cmp	r4, r3
 8007242:	bf08      	it	eq
 8007244:	68ec      	ldreq	r4, [r5, #12]
 8007246:	e7d5      	b.n	80071f4 <_puts_r+0x24>
 8007248:	4621      	mov	r1, r4
 800724a:	4628      	mov	r0, r5
 800724c:	f000 f888 	bl	8007360 <__swsetup_r>
 8007250:	2800      	cmp	r0, #0
 8007252:	d0dd      	beq.n	8007210 <_puts_r+0x40>
 8007254:	f04f 35ff 	mov.w	r5, #4294967295
 8007258:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800725a:	07da      	lsls	r2, r3, #31
 800725c:	d405      	bmi.n	800726a <_puts_r+0x9a>
 800725e:	89a3      	ldrh	r3, [r4, #12]
 8007260:	059b      	lsls	r3, r3, #22
 8007262:	d402      	bmi.n	800726a <_puts_r+0x9a>
 8007264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007266:	f000 faa0 	bl	80077aa <__retarget_lock_release_recursive>
 800726a:	4628      	mov	r0, r5
 800726c:	bd70      	pop	{r4, r5, r6, pc}
 800726e:	2b00      	cmp	r3, #0
 8007270:	da04      	bge.n	800727c <_puts_r+0xac>
 8007272:	69a2      	ldr	r2, [r4, #24]
 8007274:	429a      	cmp	r2, r3
 8007276:	dc06      	bgt.n	8007286 <_puts_r+0xb6>
 8007278:	290a      	cmp	r1, #10
 800727a:	d004      	beq.n	8007286 <_puts_r+0xb6>
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	6022      	str	r2, [r4, #0]
 8007282:	7019      	strb	r1, [r3, #0]
 8007284:	e7c5      	b.n	8007212 <_puts_r+0x42>
 8007286:	4622      	mov	r2, r4
 8007288:	4628      	mov	r0, r5
 800728a:	f000 f817 	bl	80072bc <__swbuf_r>
 800728e:	3001      	adds	r0, #1
 8007290:	d1bf      	bne.n	8007212 <_puts_r+0x42>
 8007292:	e7df      	b.n	8007254 <_puts_r+0x84>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	250a      	movs	r5, #10
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	6022      	str	r2, [r4, #0]
 800729c:	701d      	strb	r5, [r3, #0]
 800729e:	e7db      	b.n	8007258 <_puts_r+0x88>
 80072a0:	080082a4 	.word	0x080082a4
 80072a4:	080082c4 	.word	0x080082c4
 80072a8:	08008284 	.word	0x08008284

080072ac <puts>:
 80072ac:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <puts+0xc>)
 80072ae:	4601      	mov	r1, r0
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	f7ff bf8d 	b.w	80071d0 <_puts_r>
 80072b6:	bf00      	nop
 80072b8:	20000010 	.word	0x20000010

080072bc <__swbuf_r>:
 80072bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072be:	460e      	mov	r6, r1
 80072c0:	4614      	mov	r4, r2
 80072c2:	4605      	mov	r5, r0
 80072c4:	b118      	cbz	r0, 80072ce <__swbuf_r+0x12>
 80072c6:	6983      	ldr	r3, [r0, #24]
 80072c8:	b90b      	cbnz	r3, 80072ce <__swbuf_r+0x12>
 80072ca:	f000 f9cf 	bl	800766c <__sinit>
 80072ce:	4b21      	ldr	r3, [pc, #132]	; (8007354 <__swbuf_r+0x98>)
 80072d0:	429c      	cmp	r4, r3
 80072d2:	d12b      	bne.n	800732c <__swbuf_r+0x70>
 80072d4:	686c      	ldr	r4, [r5, #4]
 80072d6:	69a3      	ldr	r3, [r4, #24]
 80072d8:	60a3      	str	r3, [r4, #8]
 80072da:	89a3      	ldrh	r3, [r4, #12]
 80072dc:	071a      	lsls	r2, r3, #28
 80072de:	d52f      	bpl.n	8007340 <__swbuf_r+0x84>
 80072e0:	6923      	ldr	r3, [r4, #16]
 80072e2:	b36b      	cbz	r3, 8007340 <__swbuf_r+0x84>
 80072e4:	6923      	ldr	r3, [r4, #16]
 80072e6:	b2f6      	uxtb	r6, r6
 80072e8:	6820      	ldr	r0, [r4, #0]
 80072ea:	4637      	mov	r7, r6
 80072ec:	1ac0      	subs	r0, r0, r3
 80072ee:	6963      	ldr	r3, [r4, #20]
 80072f0:	4283      	cmp	r3, r0
 80072f2:	dc04      	bgt.n	80072fe <__swbuf_r+0x42>
 80072f4:	4621      	mov	r1, r4
 80072f6:	4628      	mov	r0, r5
 80072f8:	f000 f924 	bl	8007544 <_fflush_r>
 80072fc:	bb30      	cbnz	r0, 800734c <__swbuf_r+0x90>
 80072fe:	68a3      	ldr	r3, [r4, #8]
 8007300:	3001      	adds	r0, #1
 8007302:	3b01      	subs	r3, #1
 8007304:	60a3      	str	r3, [r4, #8]
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	6022      	str	r2, [r4, #0]
 800730c:	701e      	strb	r6, [r3, #0]
 800730e:	6963      	ldr	r3, [r4, #20]
 8007310:	4283      	cmp	r3, r0
 8007312:	d004      	beq.n	800731e <__swbuf_r+0x62>
 8007314:	89a3      	ldrh	r3, [r4, #12]
 8007316:	07db      	lsls	r3, r3, #31
 8007318:	d506      	bpl.n	8007328 <__swbuf_r+0x6c>
 800731a:	2e0a      	cmp	r6, #10
 800731c:	d104      	bne.n	8007328 <__swbuf_r+0x6c>
 800731e:	4621      	mov	r1, r4
 8007320:	4628      	mov	r0, r5
 8007322:	f000 f90f 	bl	8007544 <_fflush_r>
 8007326:	b988      	cbnz	r0, 800734c <__swbuf_r+0x90>
 8007328:	4638      	mov	r0, r7
 800732a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800732c:	4b0a      	ldr	r3, [pc, #40]	; (8007358 <__swbuf_r+0x9c>)
 800732e:	429c      	cmp	r4, r3
 8007330:	d101      	bne.n	8007336 <__swbuf_r+0x7a>
 8007332:	68ac      	ldr	r4, [r5, #8]
 8007334:	e7cf      	b.n	80072d6 <__swbuf_r+0x1a>
 8007336:	4b09      	ldr	r3, [pc, #36]	; (800735c <__swbuf_r+0xa0>)
 8007338:	429c      	cmp	r4, r3
 800733a:	bf08      	it	eq
 800733c:	68ec      	ldreq	r4, [r5, #12]
 800733e:	e7ca      	b.n	80072d6 <__swbuf_r+0x1a>
 8007340:	4621      	mov	r1, r4
 8007342:	4628      	mov	r0, r5
 8007344:	f000 f80c 	bl	8007360 <__swsetup_r>
 8007348:	2800      	cmp	r0, #0
 800734a:	d0cb      	beq.n	80072e4 <__swbuf_r+0x28>
 800734c:	f04f 37ff 	mov.w	r7, #4294967295
 8007350:	e7ea      	b.n	8007328 <__swbuf_r+0x6c>
 8007352:	bf00      	nop
 8007354:	080082a4 	.word	0x080082a4
 8007358:	080082c4 	.word	0x080082c4
 800735c:	08008284 	.word	0x08008284

08007360 <__swsetup_r>:
 8007360:	4b32      	ldr	r3, [pc, #200]	; (800742c <__swsetup_r+0xcc>)
 8007362:	b570      	push	{r4, r5, r6, lr}
 8007364:	681d      	ldr	r5, [r3, #0]
 8007366:	4606      	mov	r6, r0
 8007368:	460c      	mov	r4, r1
 800736a:	b125      	cbz	r5, 8007376 <__swsetup_r+0x16>
 800736c:	69ab      	ldr	r3, [r5, #24]
 800736e:	b913      	cbnz	r3, 8007376 <__swsetup_r+0x16>
 8007370:	4628      	mov	r0, r5
 8007372:	f000 f97b 	bl	800766c <__sinit>
 8007376:	4b2e      	ldr	r3, [pc, #184]	; (8007430 <__swsetup_r+0xd0>)
 8007378:	429c      	cmp	r4, r3
 800737a:	d10f      	bne.n	800739c <__swsetup_r+0x3c>
 800737c:	686c      	ldr	r4, [r5, #4]
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007384:	0719      	lsls	r1, r3, #28
 8007386:	d42c      	bmi.n	80073e2 <__swsetup_r+0x82>
 8007388:	06dd      	lsls	r5, r3, #27
 800738a:	d411      	bmi.n	80073b0 <__swsetup_r+0x50>
 800738c:	2309      	movs	r3, #9
 800738e:	6033      	str	r3, [r6, #0]
 8007390:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007394:	f04f 30ff 	mov.w	r0, #4294967295
 8007398:	81a3      	strh	r3, [r4, #12]
 800739a:	e03e      	b.n	800741a <__swsetup_r+0xba>
 800739c:	4b25      	ldr	r3, [pc, #148]	; (8007434 <__swsetup_r+0xd4>)
 800739e:	429c      	cmp	r4, r3
 80073a0:	d101      	bne.n	80073a6 <__swsetup_r+0x46>
 80073a2:	68ac      	ldr	r4, [r5, #8]
 80073a4:	e7eb      	b.n	800737e <__swsetup_r+0x1e>
 80073a6:	4b24      	ldr	r3, [pc, #144]	; (8007438 <__swsetup_r+0xd8>)
 80073a8:	429c      	cmp	r4, r3
 80073aa:	bf08      	it	eq
 80073ac:	68ec      	ldreq	r4, [r5, #12]
 80073ae:	e7e6      	b.n	800737e <__swsetup_r+0x1e>
 80073b0:	0758      	lsls	r0, r3, #29
 80073b2:	d512      	bpl.n	80073da <__swsetup_r+0x7a>
 80073b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073b6:	b141      	cbz	r1, 80073ca <__swsetup_r+0x6a>
 80073b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073bc:	4299      	cmp	r1, r3
 80073be:	d002      	beq.n	80073c6 <__swsetup_r+0x66>
 80073c0:	4630      	mov	r0, r6
 80073c2:	f000 fa59 	bl	8007878 <_free_r>
 80073c6:	2300      	movs	r3, #0
 80073c8:	6363      	str	r3, [r4, #52]	; 0x34
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073d0:	81a3      	strh	r3, [r4, #12]
 80073d2:	2300      	movs	r3, #0
 80073d4:	6063      	str	r3, [r4, #4]
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	6023      	str	r3, [r4, #0]
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	f043 0308 	orr.w	r3, r3, #8
 80073e0:	81a3      	strh	r3, [r4, #12]
 80073e2:	6923      	ldr	r3, [r4, #16]
 80073e4:	b94b      	cbnz	r3, 80073fa <__swsetup_r+0x9a>
 80073e6:	89a3      	ldrh	r3, [r4, #12]
 80073e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f0:	d003      	beq.n	80073fa <__swsetup_r+0x9a>
 80073f2:	4621      	mov	r1, r4
 80073f4:	4630      	mov	r0, r6
 80073f6:	f000 f9ff 	bl	80077f8 <__smakebuf_r>
 80073fa:	89a0      	ldrh	r0, [r4, #12]
 80073fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007400:	f010 0301 	ands.w	r3, r0, #1
 8007404:	d00a      	beq.n	800741c <__swsetup_r+0xbc>
 8007406:	2300      	movs	r3, #0
 8007408:	60a3      	str	r3, [r4, #8]
 800740a:	6963      	ldr	r3, [r4, #20]
 800740c:	425b      	negs	r3, r3
 800740e:	61a3      	str	r3, [r4, #24]
 8007410:	6923      	ldr	r3, [r4, #16]
 8007412:	b943      	cbnz	r3, 8007426 <__swsetup_r+0xc6>
 8007414:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007418:	d1ba      	bne.n	8007390 <__swsetup_r+0x30>
 800741a:	bd70      	pop	{r4, r5, r6, pc}
 800741c:	0781      	lsls	r1, r0, #30
 800741e:	bf58      	it	pl
 8007420:	6963      	ldrpl	r3, [r4, #20]
 8007422:	60a3      	str	r3, [r4, #8]
 8007424:	e7f4      	b.n	8007410 <__swsetup_r+0xb0>
 8007426:	2000      	movs	r0, #0
 8007428:	e7f7      	b.n	800741a <__swsetup_r+0xba>
 800742a:	bf00      	nop
 800742c:	20000010 	.word	0x20000010
 8007430:	080082a4 	.word	0x080082a4
 8007434:	080082c4 	.word	0x080082c4
 8007438:	08008284 	.word	0x08008284

0800743c <__sflush_r>:
 800743c:	898a      	ldrh	r2, [r1, #12]
 800743e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007442:	4605      	mov	r5, r0
 8007444:	0710      	lsls	r0, r2, #28
 8007446:	460c      	mov	r4, r1
 8007448:	d458      	bmi.n	80074fc <__sflush_r+0xc0>
 800744a:	684b      	ldr	r3, [r1, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	dc05      	bgt.n	800745c <__sflush_r+0x20>
 8007450:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007452:	2b00      	cmp	r3, #0
 8007454:	dc02      	bgt.n	800745c <__sflush_r+0x20>
 8007456:	2000      	movs	r0, #0
 8007458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800745c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800745e:	2e00      	cmp	r6, #0
 8007460:	d0f9      	beq.n	8007456 <__sflush_r+0x1a>
 8007462:	2300      	movs	r3, #0
 8007464:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007468:	682f      	ldr	r7, [r5, #0]
 800746a:	602b      	str	r3, [r5, #0]
 800746c:	d032      	beq.n	80074d4 <__sflush_r+0x98>
 800746e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007470:	89a3      	ldrh	r3, [r4, #12]
 8007472:	075a      	lsls	r2, r3, #29
 8007474:	d505      	bpl.n	8007482 <__sflush_r+0x46>
 8007476:	6863      	ldr	r3, [r4, #4]
 8007478:	1ac0      	subs	r0, r0, r3
 800747a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800747c:	b10b      	cbz	r3, 8007482 <__sflush_r+0x46>
 800747e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007480:	1ac0      	subs	r0, r0, r3
 8007482:	2300      	movs	r3, #0
 8007484:	4602      	mov	r2, r0
 8007486:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007488:	4628      	mov	r0, r5
 800748a:	6a21      	ldr	r1, [r4, #32]
 800748c:	47b0      	blx	r6
 800748e:	1c43      	adds	r3, r0, #1
 8007490:	89a3      	ldrh	r3, [r4, #12]
 8007492:	d106      	bne.n	80074a2 <__sflush_r+0x66>
 8007494:	6829      	ldr	r1, [r5, #0]
 8007496:	291d      	cmp	r1, #29
 8007498:	d82c      	bhi.n	80074f4 <__sflush_r+0xb8>
 800749a:	4a29      	ldr	r2, [pc, #164]	; (8007540 <__sflush_r+0x104>)
 800749c:	40ca      	lsrs	r2, r1
 800749e:	07d6      	lsls	r6, r2, #31
 80074a0:	d528      	bpl.n	80074f4 <__sflush_r+0xb8>
 80074a2:	2200      	movs	r2, #0
 80074a4:	04d9      	lsls	r1, r3, #19
 80074a6:	6062      	str	r2, [r4, #4]
 80074a8:	6922      	ldr	r2, [r4, #16]
 80074aa:	6022      	str	r2, [r4, #0]
 80074ac:	d504      	bpl.n	80074b8 <__sflush_r+0x7c>
 80074ae:	1c42      	adds	r2, r0, #1
 80074b0:	d101      	bne.n	80074b6 <__sflush_r+0x7a>
 80074b2:	682b      	ldr	r3, [r5, #0]
 80074b4:	b903      	cbnz	r3, 80074b8 <__sflush_r+0x7c>
 80074b6:	6560      	str	r0, [r4, #84]	; 0x54
 80074b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074ba:	602f      	str	r7, [r5, #0]
 80074bc:	2900      	cmp	r1, #0
 80074be:	d0ca      	beq.n	8007456 <__sflush_r+0x1a>
 80074c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074c4:	4299      	cmp	r1, r3
 80074c6:	d002      	beq.n	80074ce <__sflush_r+0x92>
 80074c8:	4628      	mov	r0, r5
 80074ca:	f000 f9d5 	bl	8007878 <_free_r>
 80074ce:	2000      	movs	r0, #0
 80074d0:	6360      	str	r0, [r4, #52]	; 0x34
 80074d2:	e7c1      	b.n	8007458 <__sflush_r+0x1c>
 80074d4:	6a21      	ldr	r1, [r4, #32]
 80074d6:	2301      	movs	r3, #1
 80074d8:	4628      	mov	r0, r5
 80074da:	47b0      	blx	r6
 80074dc:	1c41      	adds	r1, r0, #1
 80074de:	d1c7      	bne.n	8007470 <__sflush_r+0x34>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d0c4      	beq.n	8007470 <__sflush_r+0x34>
 80074e6:	2b1d      	cmp	r3, #29
 80074e8:	d001      	beq.n	80074ee <__sflush_r+0xb2>
 80074ea:	2b16      	cmp	r3, #22
 80074ec:	d101      	bne.n	80074f2 <__sflush_r+0xb6>
 80074ee:	602f      	str	r7, [r5, #0]
 80074f0:	e7b1      	b.n	8007456 <__sflush_r+0x1a>
 80074f2:	89a3      	ldrh	r3, [r4, #12]
 80074f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074f8:	81a3      	strh	r3, [r4, #12]
 80074fa:	e7ad      	b.n	8007458 <__sflush_r+0x1c>
 80074fc:	690f      	ldr	r7, [r1, #16]
 80074fe:	2f00      	cmp	r7, #0
 8007500:	d0a9      	beq.n	8007456 <__sflush_r+0x1a>
 8007502:	0793      	lsls	r3, r2, #30
 8007504:	680e      	ldr	r6, [r1, #0]
 8007506:	600f      	str	r7, [r1, #0]
 8007508:	bf0c      	ite	eq
 800750a:	694b      	ldreq	r3, [r1, #20]
 800750c:	2300      	movne	r3, #0
 800750e:	eba6 0807 	sub.w	r8, r6, r7
 8007512:	608b      	str	r3, [r1, #8]
 8007514:	f1b8 0f00 	cmp.w	r8, #0
 8007518:	dd9d      	ble.n	8007456 <__sflush_r+0x1a>
 800751a:	4643      	mov	r3, r8
 800751c:	463a      	mov	r2, r7
 800751e:	6a21      	ldr	r1, [r4, #32]
 8007520:	4628      	mov	r0, r5
 8007522:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007524:	47b0      	blx	r6
 8007526:	2800      	cmp	r0, #0
 8007528:	dc06      	bgt.n	8007538 <__sflush_r+0xfc>
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	f04f 30ff 	mov.w	r0, #4294967295
 8007530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007534:	81a3      	strh	r3, [r4, #12]
 8007536:	e78f      	b.n	8007458 <__sflush_r+0x1c>
 8007538:	4407      	add	r7, r0
 800753a:	eba8 0800 	sub.w	r8, r8, r0
 800753e:	e7e9      	b.n	8007514 <__sflush_r+0xd8>
 8007540:	20400001 	.word	0x20400001

08007544 <_fflush_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	690b      	ldr	r3, [r1, #16]
 8007548:	4605      	mov	r5, r0
 800754a:	460c      	mov	r4, r1
 800754c:	b913      	cbnz	r3, 8007554 <_fflush_r+0x10>
 800754e:	2500      	movs	r5, #0
 8007550:	4628      	mov	r0, r5
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	b118      	cbz	r0, 800755e <_fflush_r+0x1a>
 8007556:	6983      	ldr	r3, [r0, #24]
 8007558:	b90b      	cbnz	r3, 800755e <_fflush_r+0x1a>
 800755a:	f000 f887 	bl	800766c <__sinit>
 800755e:	4b14      	ldr	r3, [pc, #80]	; (80075b0 <_fflush_r+0x6c>)
 8007560:	429c      	cmp	r4, r3
 8007562:	d11b      	bne.n	800759c <_fflush_r+0x58>
 8007564:	686c      	ldr	r4, [r5, #4]
 8007566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0ef      	beq.n	800754e <_fflush_r+0xa>
 800756e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007570:	07d0      	lsls	r0, r2, #31
 8007572:	d404      	bmi.n	800757e <_fflush_r+0x3a>
 8007574:	0599      	lsls	r1, r3, #22
 8007576:	d402      	bmi.n	800757e <_fflush_r+0x3a>
 8007578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800757a:	f000 f915 	bl	80077a8 <__retarget_lock_acquire_recursive>
 800757e:	4628      	mov	r0, r5
 8007580:	4621      	mov	r1, r4
 8007582:	f7ff ff5b 	bl	800743c <__sflush_r>
 8007586:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007588:	4605      	mov	r5, r0
 800758a:	07da      	lsls	r2, r3, #31
 800758c:	d4e0      	bmi.n	8007550 <_fflush_r+0xc>
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	059b      	lsls	r3, r3, #22
 8007592:	d4dd      	bmi.n	8007550 <_fflush_r+0xc>
 8007594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007596:	f000 f908 	bl	80077aa <__retarget_lock_release_recursive>
 800759a:	e7d9      	b.n	8007550 <_fflush_r+0xc>
 800759c:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <_fflush_r+0x70>)
 800759e:	429c      	cmp	r4, r3
 80075a0:	d101      	bne.n	80075a6 <_fflush_r+0x62>
 80075a2:	68ac      	ldr	r4, [r5, #8]
 80075a4:	e7df      	b.n	8007566 <_fflush_r+0x22>
 80075a6:	4b04      	ldr	r3, [pc, #16]	; (80075b8 <_fflush_r+0x74>)
 80075a8:	429c      	cmp	r4, r3
 80075aa:	bf08      	it	eq
 80075ac:	68ec      	ldreq	r4, [r5, #12]
 80075ae:	e7da      	b.n	8007566 <_fflush_r+0x22>
 80075b0:	080082a4 	.word	0x080082a4
 80075b4:	080082c4 	.word	0x080082c4
 80075b8:	08008284 	.word	0x08008284

080075bc <std>:
 80075bc:	2300      	movs	r3, #0
 80075be:	b510      	push	{r4, lr}
 80075c0:	4604      	mov	r4, r0
 80075c2:	6083      	str	r3, [r0, #8]
 80075c4:	8181      	strh	r1, [r0, #12]
 80075c6:	4619      	mov	r1, r3
 80075c8:	6643      	str	r3, [r0, #100]	; 0x64
 80075ca:	81c2      	strh	r2, [r0, #14]
 80075cc:	2208      	movs	r2, #8
 80075ce:	6183      	str	r3, [r0, #24]
 80075d0:	e9c0 3300 	strd	r3, r3, [r0]
 80075d4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075d8:	305c      	adds	r0, #92	; 0x5c
 80075da:	f7ff fdd9 	bl	8007190 <memset>
 80075de:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <std+0x38>)
 80075e0:	6224      	str	r4, [r4, #32]
 80075e2:	6263      	str	r3, [r4, #36]	; 0x24
 80075e4:	4b04      	ldr	r3, [pc, #16]	; (80075f8 <std+0x3c>)
 80075e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80075e8:	4b04      	ldr	r3, [pc, #16]	; (80075fc <std+0x40>)
 80075ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075ec:	4b04      	ldr	r3, [pc, #16]	; (8007600 <std+0x44>)
 80075ee:	6323      	str	r3, [r4, #48]	; 0x30
 80075f0:	bd10      	pop	{r4, pc}
 80075f2:	bf00      	nop
 80075f4:	08008039 	.word	0x08008039
 80075f8:	0800805b 	.word	0x0800805b
 80075fc:	08008093 	.word	0x08008093
 8007600:	080080b7 	.word	0x080080b7

08007604 <_cleanup_r>:
 8007604:	4901      	ldr	r1, [pc, #4]	; (800760c <_cleanup_r+0x8>)
 8007606:	f000 b8af 	b.w	8007768 <_fwalk_reent>
 800760a:	bf00      	nop
 800760c:	08007545 	.word	0x08007545

08007610 <__sfmoreglue>:
 8007610:	b570      	push	{r4, r5, r6, lr}
 8007612:	2268      	movs	r2, #104	; 0x68
 8007614:	1e4d      	subs	r5, r1, #1
 8007616:	460e      	mov	r6, r1
 8007618:	4355      	muls	r5, r2
 800761a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800761e:	f000 f997 	bl	8007950 <_malloc_r>
 8007622:	4604      	mov	r4, r0
 8007624:	b140      	cbz	r0, 8007638 <__sfmoreglue+0x28>
 8007626:	2100      	movs	r1, #0
 8007628:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800762c:	e9c0 1600 	strd	r1, r6, [r0]
 8007630:	300c      	adds	r0, #12
 8007632:	60a0      	str	r0, [r4, #8]
 8007634:	f7ff fdac 	bl	8007190 <memset>
 8007638:	4620      	mov	r0, r4
 800763a:	bd70      	pop	{r4, r5, r6, pc}

0800763c <__sfp_lock_acquire>:
 800763c:	4801      	ldr	r0, [pc, #4]	; (8007644 <__sfp_lock_acquire+0x8>)
 800763e:	f000 b8b3 	b.w	80077a8 <__retarget_lock_acquire_recursive>
 8007642:	bf00      	nop
 8007644:	20000559 	.word	0x20000559

08007648 <__sfp_lock_release>:
 8007648:	4801      	ldr	r0, [pc, #4]	; (8007650 <__sfp_lock_release+0x8>)
 800764a:	f000 b8ae 	b.w	80077aa <__retarget_lock_release_recursive>
 800764e:	bf00      	nop
 8007650:	20000559 	.word	0x20000559

08007654 <__sinit_lock_acquire>:
 8007654:	4801      	ldr	r0, [pc, #4]	; (800765c <__sinit_lock_acquire+0x8>)
 8007656:	f000 b8a7 	b.w	80077a8 <__retarget_lock_acquire_recursive>
 800765a:	bf00      	nop
 800765c:	2000055a 	.word	0x2000055a

08007660 <__sinit_lock_release>:
 8007660:	4801      	ldr	r0, [pc, #4]	; (8007668 <__sinit_lock_release+0x8>)
 8007662:	f000 b8a2 	b.w	80077aa <__retarget_lock_release_recursive>
 8007666:	bf00      	nop
 8007668:	2000055a 	.word	0x2000055a

0800766c <__sinit>:
 800766c:	b510      	push	{r4, lr}
 800766e:	4604      	mov	r4, r0
 8007670:	f7ff fff0 	bl	8007654 <__sinit_lock_acquire>
 8007674:	69a3      	ldr	r3, [r4, #24]
 8007676:	b11b      	cbz	r3, 8007680 <__sinit+0x14>
 8007678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800767c:	f7ff bff0 	b.w	8007660 <__sinit_lock_release>
 8007680:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007684:	6523      	str	r3, [r4, #80]	; 0x50
 8007686:	4620      	mov	r0, r4
 8007688:	4b12      	ldr	r3, [pc, #72]	; (80076d4 <__sinit+0x68>)
 800768a:	4a13      	ldr	r2, [pc, #76]	; (80076d8 <__sinit+0x6c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	62a2      	str	r2, [r4, #40]	; 0x28
 8007690:	42a3      	cmp	r3, r4
 8007692:	bf04      	itt	eq
 8007694:	2301      	moveq	r3, #1
 8007696:	61a3      	streq	r3, [r4, #24]
 8007698:	f000 f820 	bl	80076dc <__sfp>
 800769c:	6060      	str	r0, [r4, #4]
 800769e:	4620      	mov	r0, r4
 80076a0:	f000 f81c 	bl	80076dc <__sfp>
 80076a4:	60a0      	str	r0, [r4, #8]
 80076a6:	4620      	mov	r0, r4
 80076a8:	f000 f818 	bl	80076dc <__sfp>
 80076ac:	2200      	movs	r2, #0
 80076ae:	2104      	movs	r1, #4
 80076b0:	60e0      	str	r0, [r4, #12]
 80076b2:	6860      	ldr	r0, [r4, #4]
 80076b4:	f7ff ff82 	bl	80075bc <std>
 80076b8:	2201      	movs	r2, #1
 80076ba:	2109      	movs	r1, #9
 80076bc:	68a0      	ldr	r0, [r4, #8]
 80076be:	f7ff ff7d 	bl	80075bc <std>
 80076c2:	2202      	movs	r2, #2
 80076c4:	2112      	movs	r1, #18
 80076c6:	68e0      	ldr	r0, [r4, #12]
 80076c8:	f7ff ff78 	bl	80075bc <std>
 80076cc:	2301      	movs	r3, #1
 80076ce:	61a3      	str	r3, [r4, #24]
 80076d0:	e7d2      	b.n	8007678 <__sinit+0xc>
 80076d2:	bf00      	nop
 80076d4:	08008280 	.word	0x08008280
 80076d8:	08007605 	.word	0x08007605

080076dc <__sfp>:
 80076dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076de:	4607      	mov	r7, r0
 80076e0:	f7ff ffac 	bl	800763c <__sfp_lock_acquire>
 80076e4:	4b1e      	ldr	r3, [pc, #120]	; (8007760 <__sfp+0x84>)
 80076e6:	681e      	ldr	r6, [r3, #0]
 80076e8:	69b3      	ldr	r3, [r6, #24]
 80076ea:	b913      	cbnz	r3, 80076f2 <__sfp+0x16>
 80076ec:	4630      	mov	r0, r6
 80076ee:	f7ff ffbd 	bl	800766c <__sinit>
 80076f2:	3648      	adds	r6, #72	; 0x48
 80076f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	d503      	bpl.n	8007704 <__sfp+0x28>
 80076fc:	6833      	ldr	r3, [r6, #0]
 80076fe:	b30b      	cbz	r3, 8007744 <__sfp+0x68>
 8007700:	6836      	ldr	r6, [r6, #0]
 8007702:	e7f7      	b.n	80076f4 <__sfp+0x18>
 8007704:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007708:	b9d5      	cbnz	r5, 8007740 <__sfp+0x64>
 800770a:	4b16      	ldr	r3, [pc, #88]	; (8007764 <__sfp+0x88>)
 800770c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007710:	6665      	str	r5, [r4, #100]	; 0x64
 8007712:	60e3      	str	r3, [r4, #12]
 8007714:	f000 f847 	bl	80077a6 <__retarget_lock_init_recursive>
 8007718:	f7ff ff96 	bl	8007648 <__sfp_lock_release>
 800771c:	2208      	movs	r2, #8
 800771e:	4629      	mov	r1, r5
 8007720:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007724:	6025      	str	r5, [r4, #0]
 8007726:	61a5      	str	r5, [r4, #24]
 8007728:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800772c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007730:	f7ff fd2e 	bl	8007190 <memset>
 8007734:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007738:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800773c:	4620      	mov	r0, r4
 800773e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007740:	3468      	adds	r4, #104	; 0x68
 8007742:	e7d9      	b.n	80076f8 <__sfp+0x1c>
 8007744:	2104      	movs	r1, #4
 8007746:	4638      	mov	r0, r7
 8007748:	f7ff ff62 	bl	8007610 <__sfmoreglue>
 800774c:	4604      	mov	r4, r0
 800774e:	6030      	str	r0, [r6, #0]
 8007750:	2800      	cmp	r0, #0
 8007752:	d1d5      	bne.n	8007700 <__sfp+0x24>
 8007754:	f7ff ff78 	bl	8007648 <__sfp_lock_release>
 8007758:	230c      	movs	r3, #12
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	e7ee      	b.n	800773c <__sfp+0x60>
 800775e:	bf00      	nop
 8007760:	08008280 	.word	0x08008280
 8007764:	ffff0001 	.word	0xffff0001

08007768 <_fwalk_reent>:
 8007768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800776c:	4606      	mov	r6, r0
 800776e:	4688      	mov	r8, r1
 8007770:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007774:	2700      	movs	r7, #0
 8007776:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800777a:	f1b9 0901 	subs.w	r9, r9, #1
 800777e:	d505      	bpl.n	800778c <_fwalk_reent+0x24>
 8007780:	6824      	ldr	r4, [r4, #0]
 8007782:	2c00      	cmp	r4, #0
 8007784:	d1f7      	bne.n	8007776 <_fwalk_reent+0xe>
 8007786:	4638      	mov	r0, r7
 8007788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800778c:	89ab      	ldrh	r3, [r5, #12]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d907      	bls.n	80077a2 <_fwalk_reent+0x3a>
 8007792:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007796:	3301      	adds	r3, #1
 8007798:	d003      	beq.n	80077a2 <_fwalk_reent+0x3a>
 800779a:	4629      	mov	r1, r5
 800779c:	4630      	mov	r0, r6
 800779e:	47c0      	blx	r8
 80077a0:	4307      	orrs	r7, r0
 80077a2:	3568      	adds	r5, #104	; 0x68
 80077a4:	e7e9      	b.n	800777a <_fwalk_reent+0x12>

080077a6 <__retarget_lock_init_recursive>:
 80077a6:	4770      	bx	lr

080077a8 <__retarget_lock_acquire_recursive>:
 80077a8:	4770      	bx	lr

080077aa <__retarget_lock_release_recursive>:
 80077aa:	4770      	bx	lr

080077ac <__swhatbuf_r>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	460e      	mov	r6, r1
 80077b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b4:	b096      	sub	sp, #88	; 0x58
 80077b6:	4614      	mov	r4, r2
 80077b8:	2900      	cmp	r1, #0
 80077ba:	461d      	mov	r5, r3
 80077bc:	da08      	bge.n	80077d0 <__swhatbuf_r+0x24>
 80077be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	602a      	str	r2, [r5, #0]
 80077c6:	061a      	lsls	r2, r3, #24
 80077c8:	d410      	bmi.n	80077ec <__swhatbuf_r+0x40>
 80077ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077ce:	e00e      	b.n	80077ee <__swhatbuf_r+0x42>
 80077d0:	466a      	mov	r2, sp
 80077d2:	f000 fc97 	bl	8008104 <_fstat_r>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	dbf1      	blt.n	80077be <__swhatbuf_r+0x12>
 80077da:	9a01      	ldr	r2, [sp, #4]
 80077dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077e4:	425a      	negs	r2, r3
 80077e6:	415a      	adcs	r2, r3
 80077e8:	602a      	str	r2, [r5, #0]
 80077ea:	e7ee      	b.n	80077ca <__swhatbuf_r+0x1e>
 80077ec:	2340      	movs	r3, #64	; 0x40
 80077ee:	2000      	movs	r0, #0
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	b016      	add	sp, #88	; 0x58
 80077f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080077f8 <__smakebuf_r>:
 80077f8:	898b      	ldrh	r3, [r1, #12]
 80077fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077fc:	079d      	lsls	r5, r3, #30
 80077fe:	4606      	mov	r6, r0
 8007800:	460c      	mov	r4, r1
 8007802:	d507      	bpl.n	8007814 <__smakebuf_r+0x1c>
 8007804:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007808:	6023      	str	r3, [r4, #0]
 800780a:	6123      	str	r3, [r4, #16]
 800780c:	2301      	movs	r3, #1
 800780e:	6163      	str	r3, [r4, #20]
 8007810:	b002      	add	sp, #8
 8007812:	bd70      	pop	{r4, r5, r6, pc}
 8007814:	ab01      	add	r3, sp, #4
 8007816:	466a      	mov	r2, sp
 8007818:	f7ff ffc8 	bl	80077ac <__swhatbuf_r>
 800781c:	9900      	ldr	r1, [sp, #0]
 800781e:	4605      	mov	r5, r0
 8007820:	4630      	mov	r0, r6
 8007822:	f000 f895 	bl	8007950 <_malloc_r>
 8007826:	b948      	cbnz	r0, 800783c <__smakebuf_r+0x44>
 8007828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800782c:	059a      	lsls	r2, r3, #22
 800782e:	d4ef      	bmi.n	8007810 <__smakebuf_r+0x18>
 8007830:	f023 0303 	bic.w	r3, r3, #3
 8007834:	f043 0302 	orr.w	r3, r3, #2
 8007838:	81a3      	strh	r3, [r4, #12]
 800783a:	e7e3      	b.n	8007804 <__smakebuf_r+0xc>
 800783c:	4b0d      	ldr	r3, [pc, #52]	; (8007874 <__smakebuf_r+0x7c>)
 800783e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	6020      	str	r0, [r4, #0]
 8007844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007848:	6120      	str	r0, [r4, #16]
 800784a:	81a3      	strh	r3, [r4, #12]
 800784c:	9b00      	ldr	r3, [sp, #0]
 800784e:	6163      	str	r3, [r4, #20]
 8007850:	9b01      	ldr	r3, [sp, #4]
 8007852:	b15b      	cbz	r3, 800786c <__smakebuf_r+0x74>
 8007854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007858:	4630      	mov	r0, r6
 800785a:	f000 fc65 	bl	8008128 <_isatty_r>
 800785e:	b128      	cbz	r0, 800786c <__smakebuf_r+0x74>
 8007860:	89a3      	ldrh	r3, [r4, #12]
 8007862:	f023 0303 	bic.w	r3, r3, #3
 8007866:	f043 0301 	orr.w	r3, r3, #1
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	89a0      	ldrh	r0, [r4, #12]
 800786e:	4305      	orrs	r5, r0
 8007870:	81a5      	strh	r5, [r4, #12]
 8007872:	e7cd      	b.n	8007810 <__smakebuf_r+0x18>
 8007874:	08007605 	.word	0x08007605

08007878 <_free_r>:
 8007878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800787a:	2900      	cmp	r1, #0
 800787c:	d043      	beq.n	8007906 <_free_r+0x8e>
 800787e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007882:	1f0c      	subs	r4, r1, #4
 8007884:	9001      	str	r0, [sp, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	bfb8      	it	lt
 800788a:	18e4      	addlt	r4, r4, r3
 800788c:	f000 fc7c 	bl	8008188 <__malloc_lock>
 8007890:	4a1e      	ldr	r2, [pc, #120]	; (800790c <_free_r+0x94>)
 8007892:	9801      	ldr	r0, [sp, #4]
 8007894:	6813      	ldr	r3, [r2, #0]
 8007896:	b933      	cbnz	r3, 80078a6 <_free_r+0x2e>
 8007898:	6063      	str	r3, [r4, #4]
 800789a:	6014      	str	r4, [r2, #0]
 800789c:	b003      	add	sp, #12
 800789e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078a2:	f000 bc77 	b.w	8008194 <__malloc_unlock>
 80078a6:	42a3      	cmp	r3, r4
 80078a8:	d908      	bls.n	80078bc <_free_r+0x44>
 80078aa:	6825      	ldr	r5, [r4, #0]
 80078ac:	1961      	adds	r1, r4, r5
 80078ae:	428b      	cmp	r3, r1
 80078b0:	bf01      	itttt	eq
 80078b2:	6819      	ldreq	r1, [r3, #0]
 80078b4:	685b      	ldreq	r3, [r3, #4]
 80078b6:	1949      	addeq	r1, r1, r5
 80078b8:	6021      	streq	r1, [r4, #0]
 80078ba:	e7ed      	b.n	8007898 <_free_r+0x20>
 80078bc:	461a      	mov	r2, r3
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	b10b      	cbz	r3, 80078c6 <_free_r+0x4e>
 80078c2:	42a3      	cmp	r3, r4
 80078c4:	d9fa      	bls.n	80078bc <_free_r+0x44>
 80078c6:	6811      	ldr	r1, [r2, #0]
 80078c8:	1855      	adds	r5, r2, r1
 80078ca:	42a5      	cmp	r5, r4
 80078cc:	d10b      	bne.n	80078e6 <_free_r+0x6e>
 80078ce:	6824      	ldr	r4, [r4, #0]
 80078d0:	4421      	add	r1, r4
 80078d2:	1854      	adds	r4, r2, r1
 80078d4:	6011      	str	r1, [r2, #0]
 80078d6:	42a3      	cmp	r3, r4
 80078d8:	d1e0      	bne.n	800789c <_free_r+0x24>
 80078da:	681c      	ldr	r4, [r3, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	4421      	add	r1, r4
 80078e0:	6053      	str	r3, [r2, #4]
 80078e2:	6011      	str	r1, [r2, #0]
 80078e4:	e7da      	b.n	800789c <_free_r+0x24>
 80078e6:	d902      	bls.n	80078ee <_free_r+0x76>
 80078e8:	230c      	movs	r3, #12
 80078ea:	6003      	str	r3, [r0, #0]
 80078ec:	e7d6      	b.n	800789c <_free_r+0x24>
 80078ee:	6825      	ldr	r5, [r4, #0]
 80078f0:	1961      	adds	r1, r4, r5
 80078f2:	428b      	cmp	r3, r1
 80078f4:	bf02      	ittt	eq
 80078f6:	6819      	ldreq	r1, [r3, #0]
 80078f8:	685b      	ldreq	r3, [r3, #4]
 80078fa:	1949      	addeq	r1, r1, r5
 80078fc:	6063      	str	r3, [r4, #4]
 80078fe:	bf08      	it	eq
 8007900:	6021      	streq	r1, [r4, #0]
 8007902:	6054      	str	r4, [r2, #4]
 8007904:	e7ca      	b.n	800789c <_free_r+0x24>
 8007906:	b003      	add	sp, #12
 8007908:	bd30      	pop	{r4, r5, pc}
 800790a:	bf00      	nop
 800790c:	2000055c 	.word	0x2000055c

08007910 <sbrk_aligned>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	4e0e      	ldr	r6, [pc, #56]	; (800794c <sbrk_aligned+0x3c>)
 8007914:	460c      	mov	r4, r1
 8007916:	4605      	mov	r5, r0
 8007918:	6831      	ldr	r1, [r6, #0]
 800791a:	b911      	cbnz	r1, 8007922 <sbrk_aligned+0x12>
 800791c:	f000 fb7c 	bl	8008018 <_sbrk_r>
 8007920:	6030      	str	r0, [r6, #0]
 8007922:	4621      	mov	r1, r4
 8007924:	4628      	mov	r0, r5
 8007926:	f000 fb77 	bl	8008018 <_sbrk_r>
 800792a:	1c43      	adds	r3, r0, #1
 800792c:	d00a      	beq.n	8007944 <sbrk_aligned+0x34>
 800792e:	1cc4      	adds	r4, r0, #3
 8007930:	f024 0403 	bic.w	r4, r4, #3
 8007934:	42a0      	cmp	r0, r4
 8007936:	d007      	beq.n	8007948 <sbrk_aligned+0x38>
 8007938:	1a21      	subs	r1, r4, r0
 800793a:	4628      	mov	r0, r5
 800793c:	f000 fb6c 	bl	8008018 <_sbrk_r>
 8007940:	3001      	adds	r0, #1
 8007942:	d101      	bne.n	8007948 <sbrk_aligned+0x38>
 8007944:	f04f 34ff 	mov.w	r4, #4294967295
 8007948:	4620      	mov	r0, r4
 800794a:	bd70      	pop	{r4, r5, r6, pc}
 800794c:	20000560 	.word	0x20000560

08007950 <_malloc_r>:
 8007950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007954:	1ccd      	adds	r5, r1, #3
 8007956:	4607      	mov	r7, r0
 8007958:	f025 0503 	bic.w	r5, r5, #3
 800795c:	3508      	adds	r5, #8
 800795e:	2d0c      	cmp	r5, #12
 8007960:	bf38      	it	cc
 8007962:	250c      	movcc	r5, #12
 8007964:	2d00      	cmp	r5, #0
 8007966:	db01      	blt.n	800796c <_malloc_r+0x1c>
 8007968:	42a9      	cmp	r1, r5
 800796a:	d905      	bls.n	8007978 <_malloc_r+0x28>
 800796c:	230c      	movs	r3, #12
 800796e:	2600      	movs	r6, #0
 8007970:	603b      	str	r3, [r7, #0]
 8007972:	4630      	mov	r0, r6
 8007974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007978:	4e2e      	ldr	r6, [pc, #184]	; (8007a34 <_malloc_r+0xe4>)
 800797a:	f000 fc05 	bl	8008188 <__malloc_lock>
 800797e:	6833      	ldr	r3, [r6, #0]
 8007980:	461c      	mov	r4, r3
 8007982:	bb34      	cbnz	r4, 80079d2 <_malloc_r+0x82>
 8007984:	4629      	mov	r1, r5
 8007986:	4638      	mov	r0, r7
 8007988:	f7ff ffc2 	bl	8007910 <sbrk_aligned>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	4604      	mov	r4, r0
 8007990:	d14d      	bne.n	8007a2e <_malloc_r+0xde>
 8007992:	6834      	ldr	r4, [r6, #0]
 8007994:	4626      	mov	r6, r4
 8007996:	2e00      	cmp	r6, #0
 8007998:	d140      	bne.n	8007a1c <_malloc_r+0xcc>
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	4631      	mov	r1, r6
 800799e:	4638      	mov	r0, r7
 80079a0:	eb04 0803 	add.w	r8, r4, r3
 80079a4:	f000 fb38 	bl	8008018 <_sbrk_r>
 80079a8:	4580      	cmp	r8, r0
 80079aa:	d13a      	bne.n	8007a22 <_malloc_r+0xd2>
 80079ac:	6821      	ldr	r1, [r4, #0]
 80079ae:	3503      	adds	r5, #3
 80079b0:	4638      	mov	r0, r7
 80079b2:	1a6d      	subs	r5, r5, r1
 80079b4:	f025 0503 	bic.w	r5, r5, #3
 80079b8:	3508      	adds	r5, #8
 80079ba:	2d0c      	cmp	r5, #12
 80079bc:	bf38      	it	cc
 80079be:	250c      	movcc	r5, #12
 80079c0:	4629      	mov	r1, r5
 80079c2:	f7ff ffa5 	bl	8007910 <sbrk_aligned>
 80079c6:	3001      	adds	r0, #1
 80079c8:	d02b      	beq.n	8007a22 <_malloc_r+0xd2>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	442b      	add	r3, r5
 80079ce:	6023      	str	r3, [r4, #0]
 80079d0:	e00e      	b.n	80079f0 <_malloc_r+0xa0>
 80079d2:	6822      	ldr	r2, [r4, #0]
 80079d4:	1b52      	subs	r2, r2, r5
 80079d6:	d41e      	bmi.n	8007a16 <_malloc_r+0xc6>
 80079d8:	2a0b      	cmp	r2, #11
 80079da:	d916      	bls.n	8007a0a <_malloc_r+0xba>
 80079dc:	1961      	adds	r1, r4, r5
 80079de:	42a3      	cmp	r3, r4
 80079e0:	6025      	str	r5, [r4, #0]
 80079e2:	bf18      	it	ne
 80079e4:	6059      	strne	r1, [r3, #4]
 80079e6:	6863      	ldr	r3, [r4, #4]
 80079e8:	bf08      	it	eq
 80079ea:	6031      	streq	r1, [r6, #0]
 80079ec:	5162      	str	r2, [r4, r5]
 80079ee:	604b      	str	r3, [r1, #4]
 80079f0:	f104 060b 	add.w	r6, r4, #11
 80079f4:	4638      	mov	r0, r7
 80079f6:	f000 fbcd 	bl	8008194 <__malloc_unlock>
 80079fa:	1d23      	adds	r3, r4, #4
 80079fc:	f026 0607 	bic.w	r6, r6, #7
 8007a00:	1af2      	subs	r2, r6, r3
 8007a02:	d0b6      	beq.n	8007972 <_malloc_r+0x22>
 8007a04:	1b9b      	subs	r3, r3, r6
 8007a06:	50a3      	str	r3, [r4, r2]
 8007a08:	e7b3      	b.n	8007972 <_malloc_r+0x22>
 8007a0a:	6862      	ldr	r2, [r4, #4]
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	bf0c      	ite	eq
 8007a10:	6032      	streq	r2, [r6, #0]
 8007a12:	605a      	strne	r2, [r3, #4]
 8007a14:	e7ec      	b.n	80079f0 <_malloc_r+0xa0>
 8007a16:	4623      	mov	r3, r4
 8007a18:	6864      	ldr	r4, [r4, #4]
 8007a1a:	e7b2      	b.n	8007982 <_malloc_r+0x32>
 8007a1c:	4634      	mov	r4, r6
 8007a1e:	6876      	ldr	r6, [r6, #4]
 8007a20:	e7b9      	b.n	8007996 <_malloc_r+0x46>
 8007a22:	230c      	movs	r3, #12
 8007a24:	4638      	mov	r0, r7
 8007a26:	603b      	str	r3, [r7, #0]
 8007a28:	f000 fbb4 	bl	8008194 <__malloc_unlock>
 8007a2c:	e7a1      	b.n	8007972 <_malloc_r+0x22>
 8007a2e:	6025      	str	r5, [r4, #0]
 8007a30:	e7de      	b.n	80079f0 <_malloc_r+0xa0>
 8007a32:	bf00      	nop
 8007a34:	2000055c 	.word	0x2000055c

08007a38 <__sfputc_r>:
 8007a38:	6893      	ldr	r3, [r2, #8]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	6093      	str	r3, [r2, #8]
 8007a40:	b410      	push	{r4}
 8007a42:	da08      	bge.n	8007a56 <__sfputc_r+0x1e>
 8007a44:	6994      	ldr	r4, [r2, #24]
 8007a46:	42a3      	cmp	r3, r4
 8007a48:	db01      	blt.n	8007a4e <__sfputc_r+0x16>
 8007a4a:	290a      	cmp	r1, #10
 8007a4c:	d103      	bne.n	8007a56 <__sfputc_r+0x1e>
 8007a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a52:	f7ff bc33 	b.w	80072bc <__swbuf_r>
 8007a56:	6813      	ldr	r3, [r2, #0]
 8007a58:	1c58      	adds	r0, r3, #1
 8007a5a:	6010      	str	r0, [r2, #0]
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	7019      	strb	r1, [r3, #0]
 8007a60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <__sfputs_r>:
 8007a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a68:	4606      	mov	r6, r0
 8007a6a:	460f      	mov	r7, r1
 8007a6c:	4614      	mov	r4, r2
 8007a6e:	18d5      	adds	r5, r2, r3
 8007a70:	42ac      	cmp	r4, r5
 8007a72:	d101      	bne.n	8007a78 <__sfputs_r+0x12>
 8007a74:	2000      	movs	r0, #0
 8007a76:	e007      	b.n	8007a88 <__sfputs_r+0x22>
 8007a78:	463a      	mov	r2, r7
 8007a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a7e:	4630      	mov	r0, r6
 8007a80:	f7ff ffda 	bl	8007a38 <__sfputc_r>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	d1f3      	bne.n	8007a70 <__sfputs_r+0xa>
 8007a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a8c <_vfiprintf_r>:
 8007a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a90:	460d      	mov	r5, r1
 8007a92:	b09d      	sub	sp, #116	; 0x74
 8007a94:	4614      	mov	r4, r2
 8007a96:	4698      	mov	r8, r3
 8007a98:	4606      	mov	r6, r0
 8007a9a:	b118      	cbz	r0, 8007aa4 <_vfiprintf_r+0x18>
 8007a9c:	6983      	ldr	r3, [r0, #24]
 8007a9e:	b90b      	cbnz	r3, 8007aa4 <_vfiprintf_r+0x18>
 8007aa0:	f7ff fde4 	bl	800766c <__sinit>
 8007aa4:	4b89      	ldr	r3, [pc, #548]	; (8007ccc <_vfiprintf_r+0x240>)
 8007aa6:	429d      	cmp	r5, r3
 8007aa8:	d11b      	bne.n	8007ae2 <_vfiprintf_r+0x56>
 8007aaa:	6875      	ldr	r5, [r6, #4]
 8007aac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aae:	07d9      	lsls	r1, r3, #31
 8007ab0:	d405      	bmi.n	8007abe <_vfiprintf_r+0x32>
 8007ab2:	89ab      	ldrh	r3, [r5, #12]
 8007ab4:	059a      	lsls	r2, r3, #22
 8007ab6:	d402      	bmi.n	8007abe <_vfiprintf_r+0x32>
 8007ab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aba:	f7ff fe75 	bl	80077a8 <__retarget_lock_acquire_recursive>
 8007abe:	89ab      	ldrh	r3, [r5, #12]
 8007ac0:	071b      	lsls	r3, r3, #28
 8007ac2:	d501      	bpl.n	8007ac8 <_vfiprintf_r+0x3c>
 8007ac4:	692b      	ldr	r3, [r5, #16]
 8007ac6:	b9eb      	cbnz	r3, 8007b04 <_vfiprintf_r+0x78>
 8007ac8:	4629      	mov	r1, r5
 8007aca:	4630      	mov	r0, r6
 8007acc:	f7ff fc48 	bl	8007360 <__swsetup_r>
 8007ad0:	b1c0      	cbz	r0, 8007b04 <_vfiprintf_r+0x78>
 8007ad2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ad4:	07dc      	lsls	r4, r3, #31
 8007ad6:	d50e      	bpl.n	8007af6 <_vfiprintf_r+0x6a>
 8007ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8007adc:	b01d      	add	sp, #116	; 0x74
 8007ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae2:	4b7b      	ldr	r3, [pc, #492]	; (8007cd0 <_vfiprintf_r+0x244>)
 8007ae4:	429d      	cmp	r5, r3
 8007ae6:	d101      	bne.n	8007aec <_vfiprintf_r+0x60>
 8007ae8:	68b5      	ldr	r5, [r6, #8]
 8007aea:	e7df      	b.n	8007aac <_vfiprintf_r+0x20>
 8007aec:	4b79      	ldr	r3, [pc, #484]	; (8007cd4 <_vfiprintf_r+0x248>)
 8007aee:	429d      	cmp	r5, r3
 8007af0:	bf08      	it	eq
 8007af2:	68f5      	ldreq	r5, [r6, #12]
 8007af4:	e7da      	b.n	8007aac <_vfiprintf_r+0x20>
 8007af6:	89ab      	ldrh	r3, [r5, #12]
 8007af8:	0598      	lsls	r0, r3, #22
 8007afa:	d4ed      	bmi.n	8007ad8 <_vfiprintf_r+0x4c>
 8007afc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007afe:	f7ff fe54 	bl	80077aa <__retarget_lock_release_recursive>
 8007b02:	e7e9      	b.n	8007ad8 <_vfiprintf_r+0x4c>
 8007b04:	2300      	movs	r3, #0
 8007b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b0a:	f04f 0901 	mov.w	r9, #1
 8007b0e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8007cd8 <_vfiprintf_r+0x24c>
 8007b12:	9309      	str	r3, [sp, #36]	; 0x24
 8007b14:	2320      	movs	r3, #32
 8007b16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b1a:	2330      	movs	r3, #48	; 0x30
 8007b1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b20:	4623      	mov	r3, r4
 8007b22:	469a      	mov	sl, r3
 8007b24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b28:	b10a      	cbz	r2, 8007b2e <_vfiprintf_r+0xa2>
 8007b2a:	2a25      	cmp	r2, #37	; 0x25
 8007b2c:	d1f9      	bne.n	8007b22 <_vfiprintf_r+0x96>
 8007b2e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b32:	d00b      	beq.n	8007b4c <_vfiprintf_r+0xc0>
 8007b34:	465b      	mov	r3, fp
 8007b36:	4622      	mov	r2, r4
 8007b38:	4629      	mov	r1, r5
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f7ff ff93 	bl	8007a66 <__sfputs_r>
 8007b40:	3001      	adds	r0, #1
 8007b42:	f000 80aa 	beq.w	8007c9a <_vfiprintf_r+0x20e>
 8007b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b48:	445a      	add	r2, fp
 8007b4a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 80a2 	beq.w	8007c9a <_vfiprintf_r+0x20e>
 8007b56:	2300      	movs	r3, #0
 8007b58:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5c:	f10a 0a01 	add.w	sl, sl, #1
 8007b60:	9304      	str	r3, [sp, #16]
 8007b62:	9307      	str	r3, [sp, #28]
 8007b64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b68:	931a      	str	r3, [sp, #104]	; 0x68
 8007b6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b6e:	4654      	mov	r4, sl
 8007b70:	2205      	movs	r2, #5
 8007b72:	4859      	ldr	r0, [pc, #356]	; (8007cd8 <_vfiprintf_r+0x24c>)
 8007b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b78:	f000 faf8 	bl	800816c <memchr>
 8007b7c:	9a04      	ldr	r2, [sp, #16]
 8007b7e:	b9d8      	cbnz	r0, 8007bb8 <_vfiprintf_r+0x12c>
 8007b80:	06d1      	lsls	r1, r2, #27
 8007b82:	bf44      	itt	mi
 8007b84:	2320      	movmi	r3, #32
 8007b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b8a:	0713      	lsls	r3, r2, #28
 8007b8c:	bf44      	itt	mi
 8007b8e:	232b      	movmi	r3, #43	; 0x2b
 8007b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b94:	f89a 3000 	ldrb.w	r3, [sl]
 8007b98:	2b2a      	cmp	r3, #42	; 0x2a
 8007b9a:	d015      	beq.n	8007bc8 <_vfiprintf_r+0x13c>
 8007b9c:	9a07      	ldr	r2, [sp, #28]
 8007b9e:	4654      	mov	r4, sl
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	f04f 0c0a 	mov.w	ip, #10
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bac:	3b30      	subs	r3, #48	; 0x30
 8007bae:	2b09      	cmp	r3, #9
 8007bb0:	d94e      	bls.n	8007c50 <_vfiprintf_r+0x1c4>
 8007bb2:	b1b0      	cbz	r0, 8007be2 <_vfiprintf_r+0x156>
 8007bb4:	9207      	str	r2, [sp, #28]
 8007bb6:	e014      	b.n	8007be2 <_vfiprintf_r+0x156>
 8007bb8:	eba0 0308 	sub.w	r3, r0, r8
 8007bbc:	46a2      	mov	sl, r4
 8007bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	9304      	str	r3, [sp, #16]
 8007bc6:	e7d2      	b.n	8007b6e <_vfiprintf_r+0xe2>
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	1d19      	adds	r1, r3, #4
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	9103      	str	r1, [sp, #12]
 8007bd2:	bfbb      	ittet	lt
 8007bd4:	425b      	neglt	r3, r3
 8007bd6:	f042 0202 	orrlt.w	r2, r2, #2
 8007bda:	9307      	strge	r3, [sp, #28]
 8007bdc:	9307      	strlt	r3, [sp, #28]
 8007bde:	bfb8      	it	lt
 8007be0:	9204      	strlt	r2, [sp, #16]
 8007be2:	7823      	ldrb	r3, [r4, #0]
 8007be4:	2b2e      	cmp	r3, #46	; 0x2e
 8007be6:	d10c      	bne.n	8007c02 <_vfiprintf_r+0x176>
 8007be8:	7863      	ldrb	r3, [r4, #1]
 8007bea:	2b2a      	cmp	r3, #42	; 0x2a
 8007bec:	d135      	bne.n	8007c5a <_vfiprintf_r+0x1ce>
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	3402      	adds	r4, #2
 8007bf2:	1d1a      	adds	r2, r3, #4
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	9203      	str	r2, [sp, #12]
 8007bfa:	bfb8      	it	lt
 8007bfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c00:	9305      	str	r3, [sp, #20]
 8007c02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ce8 <_vfiprintf_r+0x25c>
 8007c06:	2203      	movs	r2, #3
 8007c08:	7821      	ldrb	r1, [r4, #0]
 8007c0a:	4650      	mov	r0, sl
 8007c0c:	f000 faae 	bl	800816c <memchr>
 8007c10:	b140      	cbz	r0, 8007c24 <_vfiprintf_r+0x198>
 8007c12:	2340      	movs	r3, #64	; 0x40
 8007c14:	eba0 000a 	sub.w	r0, r0, sl
 8007c18:	3401      	adds	r4, #1
 8007c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8007c1e:	9b04      	ldr	r3, [sp, #16]
 8007c20:	4303      	orrs	r3, r0
 8007c22:	9304      	str	r3, [sp, #16]
 8007c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c28:	2206      	movs	r2, #6
 8007c2a:	482c      	ldr	r0, [pc, #176]	; (8007cdc <_vfiprintf_r+0x250>)
 8007c2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c30:	f000 fa9c 	bl	800816c <memchr>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d03f      	beq.n	8007cb8 <_vfiprintf_r+0x22c>
 8007c38:	4b29      	ldr	r3, [pc, #164]	; (8007ce0 <_vfiprintf_r+0x254>)
 8007c3a:	bb1b      	cbnz	r3, 8007c84 <_vfiprintf_r+0x1f8>
 8007c3c:	9b03      	ldr	r3, [sp, #12]
 8007c3e:	3307      	adds	r3, #7
 8007c40:	f023 0307 	bic.w	r3, r3, #7
 8007c44:	3308      	adds	r3, #8
 8007c46:	9303      	str	r3, [sp, #12]
 8007c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c4a:	443b      	add	r3, r7
 8007c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c4e:	e767      	b.n	8007b20 <_vfiprintf_r+0x94>
 8007c50:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c54:	460c      	mov	r4, r1
 8007c56:	2001      	movs	r0, #1
 8007c58:	e7a5      	b.n	8007ba6 <_vfiprintf_r+0x11a>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	3401      	adds	r4, #1
 8007c5e:	f04f 0c0a 	mov.w	ip, #10
 8007c62:	4619      	mov	r1, r3
 8007c64:	9305      	str	r3, [sp, #20]
 8007c66:	4620      	mov	r0, r4
 8007c68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c6c:	3a30      	subs	r2, #48	; 0x30
 8007c6e:	2a09      	cmp	r2, #9
 8007c70:	d903      	bls.n	8007c7a <_vfiprintf_r+0x1ee>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0c5      	beq.n	8007c02 <_vfiprintf_r+0x176>
 8007c76:	9105      	str	r1, [sp, #20]
 8007c78:	e7c3      	b.n	8007c02 <_vfiprintf_r+0x176>
 8007c7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c7e:	4604      	mov	r4, r0
 8007c80:	2301      	movs	r3, #1
 8007c82:	e7f0      	b.n	8007c66 <_vfiprintf_r+0x1da>
 8007c84:	ab03      	add	r3, sp, #12
 8007c86:	462a      	mov	r2, r5
 8007c88:	a904      	add	r1, sp, #16
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	4b15      	ldr	r3, [pc, #84]	; (8007ce4 <_vfiprintf_r+0x258>)
 8007c90:	e000      	b.n	8007c94 <_vfiprintf_r+0x208>
 8007c92:	bf00      	nop
 8007c94:	4607      	mov	r7, r0
 8007c96:	1c78      	adds	r0, r7, #1
 8007c98:	d1d6      	bne.n	8007c48 <_vfiprintf_r+0x1bc>
 8007c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c9c:	07d9      	lsls	r1, r3, #31
 8007c9e:	d405      	bmi.n	8007cac <_vfiprintf_r+0x220>
 8007ca0:	89ab      	ldrh	r3, [r5, #12]
 8007ca2:	059a      	lsls	r2, r3, #22
 8007ca4:	d402      	bmi.n	8007cac <_vfiprintf_r+0x220>
 8007ca6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ca8:	f7ff fd7f 	bl	80077aa <__retarget_lock_release_recursive>
 8007cac:	89ab      	ldrh	r3, [r5, #12]
 8007cae:	065b      	lsls	r3, r3, #25
 8007cb0:	f53f af12 	bmi.w	8007ad8 <_vfiprintf_r+0x4c>
 8007cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cb6:	e711      	b.n	8007adc <_vfiprintf_r+0x50>
 8007cb8:	ab03      	add	r3, sp, #12
 8007cba:	462a      	mov	r2, r5
 8007cbc:	a904      	add	r1, sp, #16
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	4b08      	ldr	r3, [pc, #32]	; (8007ce4 <_vfiprintf_r+0x258>)
 8007cc4:	f000 f882 	bl	8007dcc <_printf_i>
 8007cc8:	e7e4      	b.n	8007c94 <_vfiprintf_r+0x208>
 8007cca:	bf00      	nop
 8007ccc:	080082a4 	.word	0x080082a4
 8007cd0:	080082c4 	.word	0x080082c4
 8007cd4:	08008284 	.word	0x08008284
 8007cd8:	080082e4 	.word	0x080082e4
 8007cdc:	080082ee 	.word	0x080082ee
 8007ce0:	00000000 	.word	0x00000000
 8007ce4:	08007a67 	.word	0x08007a67
 8007ce8:	080082ea 	.word	0x080082ea

08007cec <_printf_common>:
 8007cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf0:	4616      	mov	r6, r2
 8007cf2:	4699      	mov	r9, r3
 8007cf4:	688a      	ldr	r2, [r1, #8]
 8007cf6:	4607      	mov	r7, r0
 8007cf8:	690b      	ldr	r3, [r1, #16]
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d00:	4293      	cmp	r3, r2
 8007d02:	bfb8      	it	lt
 8007d04:	4613      	movlt	r3, r2
 8007d06:	6033      	str	r3, [r6, #0]
 8007d08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d0c:	b10a      	cbz	r2, 8007d12 <_printf_common+0x26>
 8007d0e:	3301      	adds	r3, #1
 8007d10:	6033      	str	r3, [r6, #0]
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	0699      	lsls	r1, r3, #26
 8007d16:	bf42      	ittt	mi
 8007d18:	6833      	ldrmi	r3, [r6, #0]
 8007d1a:	3302      	addmi	r3, #2
 8007d1c:	6033      	strmi	r3, [r6, #0]
 8007d1e:	6825      	ldr	r5, [r4, #0]
 8007d20:	f015 0506 	ands.w	r5, r5, #6
 8007d24:	d106      	bne.n	8007d34 <_printf_common+0x48>
 8007d26:	f104 0a19 	add.w	sl, r4, #25
 8007d2a:	68e3      	ldr	r3, [r4, #12]
 8007d2c:	6832      	ldr	r2, [r6, #0]
 8007d2e:	1a9b      	subs	r3, r3, r2
 8007d30:	42ab      	cmp	r3, r5
 8007d32:	dc29      	bgt.n	8007d88 <_printf_common+0x9c>
 8007d34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d38:	1e13      	subs	r3, r2, #0
 8007d3a:	6822      	ldr	r2, [r4, #0]
 8007d3c:	bf18      	it	ne
 8007d3e:	2301      	movne	r3, #1
 8007d40:	0692      	lsls	r2, r2, #26
 8007d42:	d42e      	bmi.n	8007da2 <_printf_common+0xb6>
 8007d44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d48:	4649      	mov	r1, r9
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	47c0      	blx	r8
 8007d4e:	3001      	adds	r0, #1
 8007d50:	d021      	beq.n	8007d96 <_printf_common+0xaa>
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	341a      	adds	r4, #26
 8007d56:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8007d5a:	f003 0306 	and.w	r3, r3, #6
 8007d5e:	6832      	ldr	r2, [r6, #0]
 8007d60:	2600      	movs	r6, #0
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007d68:	bf08      	it	eq
 8007d6a:	1aad      	subeq	r5, r5, r2
 8007d6c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8007d70:	bf14      	ite	ne
 8007d72:	2500      	movne	r5, #0
 8007d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	bfc4      	itt	gt
 8007d7c:	1a9b      	subgt	r3, r3, r2
 8007d7e:	18ed      	addgt	r5, r5, r3
 8007d80:	42b5      	cmp	r5, r6
 8007d82:	d11a      	bne.n	8007dba <_printf_common+0xce>
 8007d84:	2000      	movs	r0, #0
 8007d86:	e008      	b.n	8007d9a <_printf_common+0xae>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	4652      	mov	r2, sl
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	4638      	mov	r0, r7
 8007d90:	47c0      	blx	r8
 8007d92:	3001      	adds	r0, #1
 8007d94:	d103      	bne.n	8007d9e <_printf_common+0xb2>
 8007d96:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d9e:	3501      	adds	r5, #1
 8007da0:	e7c3      	b.n	8007d2a <_printf_common+0x3e>
 8007da2:	18e1      	adds	r1, r4, r3
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	2030      	movs	r0, #48	; 0x30
 8007da8:	3302      	adds	r3, #2
 8007daa:	4422      	add	r2, r4
 8007dac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007db0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007db4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007db8:	e7c4      	b.n	8007d44 <_printf_common+0x58>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	4622      	mov	r2, r4
 8007dbe:	4649      	mov	r1, r9
 8007dc0:	4638      	mov	r0, r7
 8007dc2:	47c0      	blx	r8
 8007dc4:	3001      	adds	r0, #1
 8007dc6:	d0e6      	beq.n	8007d96 <_printf_common+0xaa>
 8007dc8:	3601      	adds	r6, #1
 8007dca:	e7d9      	b.n	8007d80 <_printf_common+0x94>

08007dcc <_printf_i>:
 8007dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd0:	7e0f      	ldrb	r7, [r1, #24]
 8007dd2:	4691      	mov	r9, r2
 8007dd4:	4680      	mov	r8, r0
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	2f78      	cmp	r7, #120	; 0x78
 8007dda:	469a      	mov	sl, r3
 8007ddc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007dde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007de2:	d807      	bhi.n	8007df4 <_printf_i+0x28>
 8007de4:	2f62      	cmp	r7, #98	; 0x62
 8007de6:	d80a      	bhi.n	8007dfe <_printf_i+0x32>
 8007de8:	2f00      	cmp	r7, #0
 8007dea:	f000 80d8 	beq.w	8007f9e <_printf_i+0x1d2>
 8007dee:	2f58      	cmp	r7, #88	; 0x58
 8007df0:	f000 80a3 	beq.w	8007f3a <_printf_i+0x16e>
 8007df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007df8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007dfc:	e03a      	b.n	8007e74 <_printf_i+0xa8>
 8007dfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e02:	2b15      	cmp	r3, #21
 8007e04:	d8f6      	bhi.n	8007df4 <_printf_i+0x28>
 8007e06:	a101      	add	r1, pc, #4	; (adr r1, 8007e0c <_printf_i+0x40>)
 8007e08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e0c:	08007e65 	.word	0x08007e65
 8007e10:	08007e79 	.word	0x08007e79
 8007e14:	08007df5 	.word	0x08007df5
 8007e18:	08007df5 	.word	0x08007df5
 8007e1c:	08007df5 	.word	0x08007df5
 8007e20:	08007df5 	.word	0x08007df5
 8007e24:	08007e79 	.word	0x08007e79
 8007e28:	08007df5 	.word	0x08007df5
 8007e2c:	08007df5 	.word	0x08007df5
 8007e30:	08007df5 	.word	0x08007df5
 8007e34:	08007df5 	.word	0x08007df5
 8007e38:	08007f85 	.word	0x08007f85
 8007e3c:	08007ea9 	.word	0x08007ea9
 8007e40:	08007f67 	.word	0x08007f67
 8007e44:	08007df5 	.word	0x08007df5
 8007e48:	08007df5 	.word	0x08007df5
 8007e4c:	08007fa7 	.word	0x08007fa7
 8007e50:	08007df5 	.word	0x08007df5
 8007e54:	08007ea9 	.word	0x08007ea9
 8007e58:	08007df5 	.word	0x08007df5
 8007e5c:	08007df5 	.word	0x08007df5
 8007e60:	08007f6f 	.word	0x08007f6f
 8007e64:	682b      	ldr	r3, [r5, #0]
 8007e66:	1d1a      	adds	r2, r3, #4
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	602a      	str	r2, [r5, #0]
 8007e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e74:	2301      	movs	r3, #1
 8007e76:	e0a3      	b.n	8007fc0 <_printf_i+0x1f4>
 8007e78:	6820      	ldr	r0, [r4, #0]
 8007e7a:	6829      	ldr	r1, [r5, #0]
 8007e7c:	0606      	lsls	r6, r0, #24
 8007e7e:	f101 0304 	add.w	r3, r1, #4
 8007e82:	d50a      	bpl.n	8007e9a <_printf_i+0xce>
 8007e84:	680e      	ldr	r6, [r1, #0]
 8007e86:	602b      	str	r3, [r5, #0]
 8007e88:	2e00      	cmp	r6, #0
 8007e8a:	da03      	bge.n	8007e94 <_printf_i+0xc8>
 8007e8c:	232d      	movs	r3, #45	; 0x2d
 8007e8e:	4276      	negs	r6, r6
 8007e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e94:	485e      	ldr	r0, [pc, #376]	; (8008010 <_printf_i+0x244>)
 8007e96:	230a      	movs	r3, #10
 8007e98:	e019      	b.n	8007ece <_printf_i+0x102>
 8007e9a:	680e      	ldr	r6, [r1, #0]
 8007e9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ea0:	602b      	str	r3, [r5, #0]
 8007ea2:	bf18      	it	ne
 8007ea4:	b236      	sxthne	r6, r6
 8007ea6:	e7ef      	b.n	8007e88 <_printf_i+0xbc>
 8007ea8:	682b      	ldr	r3, [r5, #0]
 8007eaa:	6820      	ldr	r0, [r4, #0]
 8007eac:	1d19      	adds	r1, r3, #4
 8007eae:	6029      	str	r1, [r5, #0]
 8007eb0:	0601      	lsls	r1, r0, #24
 8007eb2:	d501      	bpl.n	8007eb8 <_printf_i+0xec>
 8007eb4:	681e      	ldr	r6, [r3, #0]
 8007eb6:	e002      	b.n	8007ebe <_printf_i+0xf2>
 8007eb8:	0646      	lsls	r6, r0, #25
 8007eba:	d5fb      	bpl.n	8007eb4 <_printf_i+0xe8>
 8007ebc:	881e      	ldrh	r6, [r3, #0]
 8007ebe:	2f6f      	cmp	r7, #111	; 0x6f
 8007ec0:	4853      	ldr	r0, [pc, #332]	; (8008010 <_printf_i+0x244>)
 8007ec2:	bf0c      	ite	eq
 8007ec4:	2308      	moveq	r3, #8
 8007ec6:	230a      	movne	r3, #10
 8007ec8:	2100      	movs	r1, #0
 8007eca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ece:	6865      	ldr	r5, [r4, #4]
 8007ed0:	2d00      	cmp	r5, #0
 8007ed2:	60a5      	str	r5, [r4, #8]
 8007ed4:	bfa2      	ittt	ge
 8007ed6:	6821      	ldrge	r1, [r4, #0]
 8007ed8:	f021 0104 	bicge.w	r1, r1, #4
 8007edc:	6021      	strge	r1, [r4, #0]
 8007ede:	b90e      	cbnz	r6, 8007ee4 <_printf_i+0x118>
 8007ee0:	2d00      	cmp	r5, #0
 8007ee2:	d04d      	beq.n	8007f80 <_printf_i+0x1b4>
 8007ee4:	4615      	mov	r5, r2
 8007ee6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007eea:	fb03 6711 	mls	r7, r3, r1, r6
 8007eee:	5dc7      	ldrb	r7, [r0, r7]
 8007ef0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ef4:	4637      	mov	r7, r6
 8007ef6:	460e      	mov	r6, r1
 8007ef8:	42bb      	cmp	r3, r7
 8007efa:	d9f4      	bls.n	8007ee6 <_printf_i+0x11a>
 8007efc:	2b08      	cmp	r3, #8
 8007efe:	d10b      	bne.n	8007f18 <_printf_i+0x14c>
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	07de      	lsls	r6, r3, #31
 8007f04:	d508      	bpl.n	8007f18 <_printf_i+0x14c>
 8007f06:	6923      	ldr	r3, [r4, #16]
 8007f08:	6861      	ldr	r1, [r4, #4]
 8007f0a:	4299      	cmp	r1, r3
 8007f0c:	bfde      	ittt	le
 8007f0e:	2330      	movle	r3, #48	; 0x30
 8007f10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f18:	1b52      	subs	r2, r2, r5
 8007f1a:	6122      	str	r2, [r4, #16]
 8007f1c:	464b      	mov	r3, r9
 8007f1e:	aa03      	add	r2, sp, #12
 8007f20:	4621      	mov	r1, r4
 8007f22:	4640      	mov	r0, r8
 8007f24:	f8cd a000 	str.w	sl, [sp]
 8007f28:	f7ff fee0 	bl	8007cec <_printf_common>
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d14c      	bne.n	8007fca <_printf_i+0x1fe>
 8007f30:	f04f 30ff 	mov.w	r0, #4294967295
 8007f34:	b004      	add	sp, #16
 8007f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3a:	4835      	ldr	r0, [pc, #212]	; (8008010 <_printf_i+0x244>)
 8007f3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f40:	6829      	ldr	r1, [r5, #0]
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f48:	6029      	str	r1, [r5, #0]
 8007f4a:	061d      	lsls	r5, r3, #24
 8007f4c:	d514      	bpl.n	8007f78 <_printf_i+0x1ac>
 8007f4e:	07df      	lsls	r7, r3, #31
 8007f50:	bf44      	itt	mi
 8007f52:	f043 0320 	orrmi.w	r3, r3, #32
 8007f56:	6023      	strmi	r3, [r4, #0]
 8007f58:	b91e      	cbnz	r6, 8007f62 <_printf_i+0x196>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	f023 0320 	bic.w	r3, r3, #32
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	2310      	movs	r3, #16
 8007f64:	e7b0      	b.n	8007ec8 <_printf_i+0xfc>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	f043 0320 	orr.w	r3, r3, #32
 8007f6c:	6023      	str	r3, [r4, #0]
 8007f6e:	2378      	movs	r3, #120	; 0x78
 8007f70:	4828      	ldr	r0, [pc, #160]	; (8008014 <_printf_i+0x248>)
 8007f72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f76:	e7e3      	b.n	8007f40 <_printf_i+0x174>
 8007f78:	0659      	lsls	r1, r3, #25
 8007f7a:	bf48      	it	mi
 8007f7c:	b2b6      	uxthmi	r6, r6
 8007f7e:	e7e6      	b.n	8007f4e <_printf_i+0x182>
 8007f80:	4615      	mov	r5, r2
 8007f82:	e7bb      	b.n	8007efc <_printf_i+0x130>
 8007f84:	682b      	ldr	r3, [r5, #0]
 8007f86:	6826      	ldr	r6, [r4, #0]
 8007f88:	1d18      	adds	r0, r3, #4
 8007f8a:	6961      	ldr	r1, [r4, #20]
 8007f8c:	6028      	str	r0, [r5, #0]
 8007f8e:	0635      	lsls	r5, r6, #24
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	d501      	bpl.n	8007f98 <_printf_i+0x1cc>
 8007f94:	6019      	str	r1, [r3, #0]
 8007f96:	e002      	b.n	8007f9e <_printf_i+0x1d2>
 8007f98:	0670      	lsls	r0, r6, #25
 8007f9a:	d5fb      	bpl.n	8007f94 <_printf_i+0x1c8>
 8007f9c:	8019      	strh	r1, [r3, #0]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	4615      	mov	r5, r2
 8007fa2:	6123      	str	r3, [r4, #16]
 8007fa4:	e7ba      	b.n	8007f1c <_printf_i+0x150>
 8007fa6:	682b      	ldr	r3, [r5, #0]
 8007fa8:	2100      	movs	r1, #0
 8007faa:	1d1a      	adds	r2, r3, #4
 8007fac:	602a      	str	r2, [r5, #0]
 8007fae:	681d      	ldr	r5, [r3, #0]
 8007fb0:	6862      	ldr	r2, [r4, #4]
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	f000 f8da 	bl	800816c <memchr>
 8007fb8:	b108      	cbz	r0, 8007fbe <_printf_i+0x1f2>
 8007fba:	1b40      	subs	r0, r0, r5
 8007fbc:	6060      	str	r0, [r4, #4]
 8007fbe:	6863      	ldr	r3, [r4, #4]
 8007fc0:	6123      	str	r3, [r4, #16]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fc8:	e7a8      	b.n	8007f1c <_printf_i+0x150>
 8007fca:	6923      	ldr	r3, [r4, #16]
 8007fcc:	462a      	mov	r2, r5
 8007fce:	4649      	mov	r1, r9
 8007fd0:	4640      	mov	r0, r8
 8007fd2:	47d0      	blx	sl
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	d0ab      	beq.n	8007f30 <_printf_i+0x164>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	079b      	lsls	r3, r3, #30
 8007fdc:	d413      	bmi.n	8008006 <_printf_i+0x23a>
 8007fde:	68e0      	ldr	r0, [r4, #12]
 8007fe0:	9b03      	ldr	r3, [sp, #12]
 8007fe2:	4298      	cmp	r0, r3
 8007fe4:	bfb8      	it	lt
 8007fe6:	4618      	movlt	r0, r3
 8007fe8:	e7a4      	b.n	8007f34 <_printf_i+0x168>
 8007fea:	2301      	movs	r3, #1
 8007fec:	4632      	mov	r2, r6
 8007fee:	4649      	mov	r1, r9
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	47d0      	blx	sl
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	d09b      	beq.n	8007f30 <_printf_i+0x164>
 8007ff8:	3501      	adds	r5, #1
 8007ffa:	68e3      	ldr	r3, [r4, #12]
 8007ffc:	9903      	ldr	r1, [sp, #12]
 8007ffe:	1a5b      	subs	r3, r3, r1
 8008000:	42ab      	cmp	r3, r5
 8008002:	dcf2      	bgt.n	8007fea <_printf_i+0x21e>
 8008004:	e7eb      	b.n	8007fde <_printf_i+0x212>
 8008006:	2500      	movs	r5, #0
 8008008:	f104 0619 	add.w	r6, r4, #25
 800800c:	e7f5      	b.n	8007ffa <_printf_i+0x22e>
 800800e:	bf00      	nop
 8008010:	080082f5 	.word	0x080082f5
 8008014:	08008306 	.word	0x08008306

08008018 <_sbrk_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	2300      	movs	r3, #0
 800801c:	4d05      	ldr	r5, [pc, #20]	; (8008034 <_sbrk_r+0x1c>)
 800801e:	4604      	mov	r4, r0
 8008020:	4608      	mov	r0, r1
 8008022:	602b      	str	r3, [r5, #0]
 8008024:	f7f9 f9a6 	bl	8001374 <_sbrk>
 8008028:	1c43      	adds	r3, r0, #1
 800802a:	d102      	bne.n	8008032 <_sbrk_r+0x1a>
 800802c:	682b      	ldr	r3, [r5, #0]
 800802e:	b103      	cbz	r3, 8008032 <_sbrk_r+0x1a>
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	bd38      	pop	{r3, r4, r5, pc}
 8008034:	20000564 	.word	0x20000564

08008038 <__sread>:
 8008038:	b510      	push	{r4, lr}
 800803a:	460c      	mov	r4, r1
 800803c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008040:	f000 f8ae 	bl	80081a0 <_read_r>
 8008044:	2800      	cmp	r0, #0
 8008046:	bfab      	itete	ge
 8008048:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800804a:	89a3      	ldrhlt	r3, [r4, #12]
 800804c:	181b      	addge	r3, r3, r0
 800804e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008052:	bfac      	ite	ge
 8008054:	6563      	strge	r3, [r4, #84]	; 0x54
 8008056:	81a3      	strhlt	r3, [r4, #12]
 8008058:	bd10      	pop	{r4, pc}

0800805a <__swrite>:
 800805a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800805e:	461f      	mov	r7, r3
 8008060:	898b      	ldrh	r3, [r1, #12]
 8008062:	4605      	mov	r5, r0
 8008064:	460c      	mov	r4, r1
 8008066:	05db      	lsls	r3, r3, #23
 8008068:	4616      	mov	r6, r2
 800806a:	d505      	bpl.n	8008078 <__swrite+0x1e>
 800806c:	2302      	movs	r3, #2
 800806e:	2200      	movs	r2, #0
 8008070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008074:	f000 f868 	bl	8008148 <_lseek_r>
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	4632      	mov	r2, r6
 800807c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008080:	4628      	mov	r0, r5
 8008082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008086:	81a3      	strh	r3, [r4, #12]
 8008088:	463b      	mov	r3, r7
 800808a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800808e:	f000 b817 	b.w	80080c0 <_write_r>

08008092 <__sseek>:
 8008092:	b510      	push	{r4, lr}
 8008094:	460c      	mov	r4, r1
 8008096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809a:	f000 f855 	bl	8008148 <_lseek_r>
 800809e:	1c43      	adds	r3, r0, #1
 80080a0:	89a3      	ldrh	r3, [r4, #12]
 80080a2:	bf15      	itete	ne
 80080a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80080a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080ae:	81a3      	strheq	r3, [r4, #12]
 80080b0:	bf18      	it	ne
 80080b2:	81a3      	strhne	r3, [r4, #12]
 80080b4:	bd10      	pop	{r4, pc}

080080b6 <__sclose>:
 80080b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ba:	f000 b813 	b.w	80080e4 <_close_r>
	...

080080c0 <_write_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	4604      	mov	r4, r0
 80080c4:	4d06      	ldr	r5, [pc, #24]	; (80080e0 <_write_r+0x20>)
 80080c6:	4608      	mov	r0, r1
 80080c8:	4611      	mov	r1, r2
 80080ca:	2200      	movs	r2, #0
 80080cc:	602a      	str	r2, [r5, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	f7f9 f8ff 	bl	80012d2 <_write>
 80080d4:	1c43      	adds	r3, r0, #1
 80080d6:	d102      	bne.n	80080de <_write_r+0x1e>
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	b103      	cbz	r3, 80080de <_write_r+0x1e>
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	bd38      	pop	{r3, r4, r5, pc}
 80080e0:	20000564 	.word	0x20000564

080080e4 <_close_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	2300      	movs	r3, #0
 80080e8:	4d05      	ldr	r5, [pc, #20]	; (8008100 <_close_r+0x1c>)
 80080ea:	4604      	mov	r4, r0
 80080ec:	4608      	mov	r0, r1
 80080ee:	602b      	str	r3, [r5, #0]
 80080f0:	f7f9 f90b 	bl	800130a <_close>
 80080f4:	1c43      	adds	r3, r0, #1
 80080f6:	d102      	bne.n	80080fe <_close_r+0x1a>
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	b103      	cbz	r3, 80080fe <_close_r+0x1a>
 80080fc:	6023      	str	r3, [r4, #0]
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
 8008100:	20000564 	.word	0x20000564

08008104 <_fstat_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	2300      	movs	r3, #0
 8008108:	4d06      	ldr	r5, [pc, #24]	; (8008124 <_fstat_r+0x20>)
 800810a:	4604      	mov	r4, r0
 800810c:	4608      	mov	r0, r1
 800810e:	4611      	mov	r1, r2
 8008110:	602b      	str	r3, [r5, #0]
 8008112:	f7f9 f906 	bl	8001322 <_fstat>
 8008116:	1c43      	adds	r3, r0, #1
 8008118:	d102      	bne.n	8008120 <_fstat_r+0x1c>
 800811a:	682b      	ldr	r3, [r5, #0]
 800811c:	b103      	cbz	r3, 8008120 <_fstat_r+0x1c>
 800811e:	6023      	str	r3, [r4, #0]
 8008120:	bd38      	pop	{r3, r4, r5, pc}
 8008122:	bf00      	nop
 8008124:	20000564 	.word	0x20000564

08008128 <_isatty_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	2300      	movs	r3, #0
 800812c:	4d05      	ldr	r5, [pc, #20]	; (8008144 <_isatty_r+0x1c>)
 800812e:	4604      	mov	r4, r0
 8008130:	4608      	mov	r0, r1
 8008132:	602b      	str	r3, [r5, #0]
 8008134:	f7f9 f905 	bl	8001342 <_isatty>
 8008138:	1c43      	adds	r3, r0, #1
 800813a:	d102      	bne.n	8008142 <_isatty_r+0x1a>
 800813c:	682b      	ldr	r3, [r5, #0]
 800813e:	b103      	cbz	r3, 8008142 <_isatty_r+0x1a>
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	bd38      	pop	{r3, r4, r5, pc}
 8008144:	20000564 	.word	0x20000564

08008148 <_lseek_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4604      	mov	r4, r0
 800814c:	4d06      	ldr	r5, [pc, #24]	; (8008168 <_lseek_r+0x20>)
 800814e:	4608      	mov	r0, r1
 8008150:	4611      	mov	r1, r2
 8008152:	2200      	movs	r2, #0
 8008154:	602a      	str	r2, [r5, #0]
 8008156:	461a      	mov	r2, r3
 8008158:	f7f9 f8fe 	bl	8001358 <_lseek>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	d102      	bne.n	8008166 <_lseek_r+0x1e>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	b103      	cbz	r3, 8008166 <_lseek_r+0x1e>
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	bd38      	pop	{r3, r4, r5, pc}
 8008168:	20000564 	.word	0x20000564

0800816c <memchr>:
 800816c:	b2c9      	uxtb	r1, r1
 800816e:	4402      	add	r2, r0
 8008170:	b510      	push	{r4, lr}
 8008172:	4290      	cmp	r0, r2
 8008174:	4603      	mov	r3, r0
 8008176:	d101      	bne.n	800817c <memchr+0x10>
 8008178:	2300      	movs	r3, #0
 800817a:	e003      	b.n	8008184 <memchr+0x18>
 800817c:	781c      	ldrb	r4, [r3, #0]
 800817e:	3001      	adds	r0, #1
 8008180:	428c      	cmp	r4, r1
 8008182:	d1f6      	bne.n	8008172 <memchr+0x6>
 8008184:	4618      	mov	r0, r3
 8008186:	bd10      	pop	{r4, pc}

08008188 <__malloc_lock>:
 8008188:	4801      	ldr	r0, [pc, #4]	; (8008190 <__malloc_lock+0x8>)
 800818a:	f7ff bb0d 	b.w	80077a8 <__retarget_lock_acquire_recursive>
 800818e:	bf00      	nop
 8008190:	20000558 	.word	0x20000558

08008194 <__malloc_unlock>:
 8008194:	4801      	ldr	r0, [pc, #4]	; (800819c <__malloc_unlock+0x8>)
 8008196:	f7ff bb08 	b.w	80077aa <__retarget_lock_release_recursive>
 800819a:	bf00      	nop
 800819c:	20000558 	.word	0x20000558

080081a0 <_read_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4604      	mov	r4, r0
 80081a4:	4d06      	ldr	r5, [pc, #24]	; (80081c0 <_read_r+0x20>)
 80081a6:	4608      	mov	r0, r1
 80081a8:	4611      	mov	r1, r2
 80081aa:	2200      	movs	r2, #0
 80081ac:	602a      	str	r2, [r5, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	f7f9 f872 	bl	8001298 <_read>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d102      	bne.n	80081be <_read_r+0x1e>
 80081b8:	682b      	ldr	r3, [r5, #0]
 80081ba:	b103      	cbz	r3, 80081be <_read_r+0x1e>
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	20000564 	.word	0x20000564

080081c4 <_init>:
 80081c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c6:	bf00      	nop
 80081c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ca:	bc08      	pop	{r3}
 80081cc:	469e      	mov	lr, r3
 80081ce:	4770      	bx	lr

080081d0 <_fini>:
 80081d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d2:	bf00      	nop
 80081d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d6:	bc08      	pop	{r3}
 80081d8:	469e      	mov	lr, r3
 80081da:	4770      	bx	lr
